
/Users/xchen/Documents/Arduino/particle/test_rtc/target/3.2.0/argon/test_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008860  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000bc880  000bc880  0000c880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bc888  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003dc14  000bc88c  0001dc14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b64  2003dc90  2003dc90  0002dc90  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bc904  000bc904  0002c904  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bc92c  000bc92c  0002c92c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001b3f9b  00000000  00000000  0002c930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001e526  00000000  00000000  001e08cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00049860  00000000  00000000  001fedf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000035d0  00000000  00000000  00248651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bfc0  00000000  00000000  0024bc21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00049e8d  00000000  00000000  00257be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00063495  00000000  00000000  002a1a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001322c4  00000000  00000000  00304f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a0d0  00000000  00000000  004371c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fe13 	bl	bbc5c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 fe35 	bl	bbcac <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dc14 	.word	0x2003dc14
   b404c:	000bc88c 	.word	0x000bc88c
   b4050:	2003dc8c 	.word	0x2003dc8c
   b4054:	2003dc90 	.word	0x2003dc90
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 fa67 	bl	ba534 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bc85c 	.word	0x000bc85c
   b4080:	000bc880 	.word	0x000bc880

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b80c 	b.w	b50a0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f83d 	bl	b5108 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 ba07 	b.w	ba4a4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 b8a3 	b.w	b81e0 <malloc>

000b409a <_Znaj>:
   b409a:	f004 b8a1 	b.w	b81e0 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f004 b8a7 	b.w	b81f0 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	2100      	movs	r1, #0
   b40aa:	200c      	movs	r0, #12
   b40ac:	f003 ffd4 	bl	b8058 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b7d19 	.word	0x000b7d19

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40c8:	4770      	bx	lr

000b40ca <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ca:	7c03      	ldrb	r3, [r0, #16]
   b40cc:	f013 0308 	ands.w	r3, r3, #8
   b40d0:	bf1e      	ittt	ne
   b40d2:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d4:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40d6:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40d8:	2b00      	cmp	r3, #0
  }
   b40da:	bfac      	ite	ge
   b40dc:	4618      	movge	r0, r3
   b40de:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e2:	4770      	bx	lr

000b40e4 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40e4:	4770      	bx	lr

000b40e6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40e6:	b510      	push	{r4, lr}
  }
   b40e8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40ea:	4604      	mov	r4, r0
  }
   b40ec:	f7ff ffd7 	bl	b409e <_ZdlPvj>
   b40f0:	4620      	mov	r0, r4
   b40f2:	bd10      	pop	{r4, pc}

000b40f4 <_ZN4FileD0Ev>:
   b40f4:	b510      	push	{r4, lr}
   b40f6:	2134      	movs	r1, #52	; 0x34
   b40f8:	4604      	mov	r4, r0
   b40fa:	f7ff ffd0 	bl	b409e <_ZdlPvj>
   b40fe:	4620      	mov	r0, r4
   b4100:	bd10      	pop	{r4, pc}

000b4102 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4102:	3010      	adds	r0, #16
   b4104:	f002 bb36 	b.w	b6774 <_ZN7FatFile5writeEPKvj>

000b4108 <_ZN4File4readEv>:
  int read() {
   b4108:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b410a:	2201      	movs	r2, #1
   b410c:	f10d 0107 	add.w	r1, sp, #7
   b4110:	3010      	adds	r0, #16
   b4112:	f001 ffe3 	bl	b60dc <_ZN7FatFile4readEPvj>
   b4116:	2801      	cmp	r0, #1
   b4118:	bf0c      	ite	eq
   b411a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b411e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
   b4122:	b003      	add	sp, #12
   b4124:	f85d fb04 	ldr.w	pc, [sp], #4

000b4128 <_ZN4File5flushEv>:
    FatFile::sync();
   b4128:	3010      	adds	r0, #16
   b412a:	f002 b9a3 	b.w	b6474 <_ZN7FatFile4syncEv>

000b412e <_ZN4File4peekEv>:
    return FatFile::peek();
   b412e:	3010      	adds	r0, #16
   b4130:	f002 b882 	b.w	b6238 <_ZN7FatFile4peekEv>

000b4134 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b4134:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4136:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b4138:	4606      	mov	r6, r0
   b413a:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b413c:	da0b      	bge.n	b4156 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0+0x22>
   b413e:	2a0a      	cmp	r2, #10
   b4140:	d109      	bne.n	b4156 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b4142:	212d      	movs	r1, #45	; 0x2d
   b4144:	f005 fc12 	bl	b996c <_ZN5Print5printEc>
            val = -n;
   b4148:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b414a:	b2ea      	uxtb	r2, r5
   b414c:	4630      	mov	r0, r6
    }
}
   b414e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4152:	f005 bc26 	b.w	b99a2 <_ZN5Print11printNumberEmh>
            val = n;
   b4156:	4621      	mov	r1, r4
   b4158:	e7f7      	b.n	b414a <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0+0x16>

000b415a <_ZN13FatFileSystem5mkdirEPKcb.isra.0>:
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
   b415a:	b500      	push	{lr}
   b415c:	b08b      	sub	sp, #44	; 0x2c
   b415e:	4613      	mov	r3, r2
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4160:	2200      	movs	r2, #0
   b4162:	9201      	str	r2, [sp, #4]
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
   b4164:	460a      	mov	r2, r1
   b4166:	f200 413c 	addw	r1, r0, #1084	; 0x43c
   b416a:	a801      	add	r0, sp, #4
   b416c:	f002 fab1 	bl	b66d2 <_ZN7FatFile5mkdirEPS_PKcb>
  }
   b4170:	b00b      	add	sp, #44	; 0x2c
   b4172:	f85d fb04 	ldr.w	pc, [sp], #4

000b4176 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4176:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4178:	2201      	movs	r2, #1
   b417a:	f88d 1007 	strb.w	r1, [sp, #7]
   b417e:	3010      	adds	r0, #16
   b4180:	f10d 0107 	add.w	r1, sp, #7
   b4184:	f002 faf6 	bl	b6774 <_ZN7FatFile5writeEPKvj>
  }
   b4188:	b003      	add	sp, #12
   b418a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4190 <_ZN7TestLib10dateTimeSDEPtS0_>:
    Time_Date[5] = now.second();
    return LogTimeDate;
}

void TestLib::dateTimeSD(uint16_t* date, uint16_t* time)
{
   b4190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// DateTime now = RTC.now();
	// sprintf(timestamp, "%02d:%02d:%02d %2d/%2d/%2d \n", now.hour(),now.minute(),now.second(),now.month(),now.day(),now.year()-2000);
	// Serial.println("yy");
	// Serial.println(timestamp);
	// return date using FAT_DATE macro to format fields
	Serial.println(selfPointer->Time_Date[0]); //DEBUG!
   b4192:	4d18      	ldr	r5, [pc, #96]	; (b41f4 <_ZN7TestLib10dateTimeSDEPtS0_+0x64>)
{
   b4194:	460c      	mov	r4, r1
   b4196:	4606      	mov	r6, r0
	Serial.println(selfPointer->Time_Date[0]); //DEBUG!
   b4198:	f006 f8c8 	bl	ba32c <_Z16_fetch_usbserialv>
   b419c:	682b      	ldr	r3, [r5, #0]
   b419e:	220a      	movs	r2, #10
   b41a0:	f8d3 14f0 	ldr.w	r1, [r3, #1264]	; 0x4f0
   b41a4:	4607      	mov	r7, r0
size_t Print::print(T n, int base)
   b41a6:	f7ff ffc5 	bl	b4134 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>
        n += println();
   b41aa:	4638      	mov	r0, r7
   b41ac:	f005 fbe1 	bl	b9972 <_ZN5Print7printlnEv>
	*date = FAT_DATE(selfPointer->Time_Date[0], selfPointer->Time_Date[1], selfPointer->Time_Date[2]);
   b41b0:	6829      	ldr	r1, [r5, #0]
 * \param[in] day [1,31]
 *
 * \return Packed date for dir_t entry.
 */
static inline uint16_t FAT_DATE(uint16_t year, uint8_t month, uint8_t day) {
  return (year - 1980) << 9 | month << 5 | day;
   b41b2:	f8d1 34f4 	ldr.w	r3, [r1, #1268]	; 0x4f4
   b41b6:	015b      	lsls	r3, r3, #5
   b41b8:	f403 52ff 	and.w	r2, r3, #8160	; 0x1fe0
   b41bc:	f891 34f8 	ldrb.w	r3, [r1, #1272]	; 0x4f8
   b41c0:	4313      	orrs	r3, r2
   b41c2:	f8b1 24f0 	ldrh.w	r2, [r1, #1264]	; 0x4f0
   b41c6:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
   b41ca:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   b41ce:	8033      	strh	r3, [r6, #0]

	// return time using FAT_TIME macro to format fields
	*time = FAT_TIME(selfPointer->Time_Date[3], selfPointer->Time_Date[4], selfPointer->Time_Date[5]);
   b41d0:	6829      	ldr	r1, [r5, #0]
 * \param[in] second [0,59]
 *
 * \return Packed time for dir_t entry.
 */
static inline uint16_t FAT_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour << 11 | minute << 5 | second >> 1;
   b41d2:	f8d1 34fc 	ldr.w	r3, [r1, #1276]	; 0x4fc
   b41d6:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
   b41da:	02db      	lsls	r3, r3, #11
   b41dc:	0152      	lsls	r2, r2, #5
   b41de:	f402 52ff 	and.w	r2, r2, #8160	; 0x1fe0
   b41e2:	f403 23ff 	and.w	r3, r3, #522240	; 0x7f800
   b41e6:	4313      	orrs	r3, r2
   b41e8:	f891 2504 	ldrb.w	r2, [r1, #1284]	; 0x504
   b41ec:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   b41f0:	8023      	strh	r3, [r4, #0]
}
   b41f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b41f4:	2003dc9c 	.word	0x2003dc9c

000b41f8 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41f8:	b40e      	push	{r1, r2, r3}
   b41fa:	b503      	push	{r0, r1, lr}
   b41fc:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b41fe:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4200:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4204:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4206:	f005 fcdc 	bl	b9bc2 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b420a:	b002      	add	sp, #8
   b420c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4210:	b003      	add	sp, #12
   b4212:	4770      	bx	lr

000b4214 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4214:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4216:	4604      	mov	r4, r0
   b4218:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b421a:	7922      	ldrb	r2, [r4, #4]
   b421c:	68a3      	ldr	r3, [r4, #8]
   b421e:	b132      	cbz	r2, b422e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4220:	b9a3      	cbnz	r3, b424c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4222:	490b      	ldr	r1, [pc, #44]	; (b4250 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4224:	b002      	add	sp, #8
   b4226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b422a:	f005 bb9b 	b.w	b9964 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b422e:	4a09      	ldr	r2, [pc, #36]	; (b4254 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4230:	7b26      	ldrb	r6, [r4, #12]
   b4232:	4d09      	ldr	r5, [pc, #36]	; (b4258 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4234:	4909      	ldr	r1, [pc, #36]	; (b425c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4236:	7b64      	ldrb	r4, [r4, #13]
   b4238:	2e01      	cmp	r6, #1
   b423a:	bf18      	it	ne
   b423c:	4629      	movne	r1, r5
   b423e:	e9cd 1400 	strd	r1, r4, [sp]
   b4242:	4907      	ldr	r1, [pc, #28]	; (b4260 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4244:	f7ff ffd8 	bl	b41f8 <_ZN5Print6printfEPKcz>
  }
   b4248:	b002      	add	sp, #8
   b424a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b424c:	4a05      	ldr	r2, [pc, #20]	; (b4264 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b424e:	e7ef      	b.n	b4230 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4250:	000bc075 	.word	0x000bc075
   b4254:	000bc2e4 	.word	0x000bc2e4
   b4258:	000bc071 	.word	0x000bc071
   b425c:	000bc06d 	.word	0x000bc06d
   b4260:	000bc08b 	.word	0x000bc08b
   b4264:	000bc064 	.word	0x000bc064

000b4268 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4268:	b40e      	push	{r1, r2, r3}
   b426a:	b500      	push	{lr}
   b426c:	b08c      	sub	sp, #48	; 0x30
   b426e:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4270:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4274:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4278:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b427a:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b427e:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4280:	6801      	ldr	r1, [r0, #0]
   b4282:	aa04      	add	r2, sp, #16
   b4284:	201e      	movs	r0, #30
    attr.flags = 0;
   b4286:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b428a:	f003 feed 	bl	b8068 <log_message_v>
}
   b428e:	b00c      	add	sp, #48	; 0x30
   b4290:	f85d eb04 	ldr.w	lr, [sp], #4
   b4294:	b003      	add	sp, #12
   b4296:	4770      	bx	lr

000b4298 <_ZNK5spark6Logger4warnEPKcz>:
inline void spark::Logger::warn(const char *fmt, ...) const {
   b4298:	b40e      	push	{r1, r2, r3}
   b429a:	b500      	push	{lr}
   b429c:	b08c      	sub	sp, #48	; 0x30
   b429e:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b42a0:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::warn(const char *fmt, ...) const {
   b42a4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b42a8:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b42aa:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b42ae:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b42b0:	6801      	ldr	r1, [r0, #0]
   b42b2:	aa04      	add	r2, sp, #16
   b42b4:	2028      	movs	r0, #40	; 0x28
    attr.flags = 0;
   b42b6:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b42ba:	f003 fed5 	bl	b8068 <log_message_v>
}
   b42be:	b00c      	add	sp, #48	; 0x30
   b42c0:	f85d eb04 	ldr.w	lr, [sp], #4
   b42c4:	b003      	add	sp, #12
   b42c6:	4770      	bx	lr

000b42c8 <_ZN7FatFile6existsEPKc>:
  bool exists(const char* path) {
   b42c8:	b500      	push	{lr}
   b42ca:	b08b      	sub	sp, #44	; 0x2c
   b42cc:	460a      	mov	r2, r1
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b42ce:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b42d0:	4601      	mov	r1, r0
   b42d2:	a801      	add	r0, sp, #4
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b42d4:	9301      	str	r3, [sp, #4]
    return file.open(this, path, O_RDONLY);
   b42d6:	f002 f90a 	bl	b64ee <_ZN7FatFile4openEPS_PKci>
  }
   b42da:	b00b      	add	sp, #44	; 0x2c
   b42dc:	f85d fb04 	ldr.w	pc, [sp], #4

000b42e0 <_ZN7FatFile6setCwdEPS_>:
    if (!dir || !dir->isDir()) {
   b42e0:	b140      	cbz	r0, b42f4 <_ZN7FatFile6setCwdEPS_+0x14>
   b42e2:	7803      	ldrb	r3, [r0, #0]
   b42e4:	f013 0370 	ands.w	r3, r3, #112	; 0x70
   b42e8:	d003      	beq.n	b42f2 <_ZN7FatFile6setCwdEPS_+0x12>
    m_cwd = dir;
   b42ea:	4b03      	ldr	r3, [pc, #12]	; (b42f8 <_ZN7FatFile6setCwdEPS_+0x18>)
   b42ec:	6018      	str	r0, [r3, #0]
    return true;
   b42ee:	2001      	movs	r0, #1
   b42f0:	4770      	bx	lr
      return false;
   b42f2:	4618      	mov	r0, r3
  }
   b42f4:	4770      	bx	lr
   b42f6:	bf00      	nop
   b42f8:	2003e688 	.word	0x2003e688

000b42fc <_ZN13FatFileSystem5chdirEPKcb.isra.0>:
  bool chdir(const char *path, bool set_cwd = false) {
   b42fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b42fe:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4300:	2300      	movs	r3, #0
   b4302:	9301      	str	r3, [sp, #4]
    if (path[0] == '/' && path[1] == '\0') {
   b4304:	780b      	ldrb	r3, [r1, #0]
   b4306:	2b2f      	cmp	r3, #47	; 0x2f
  bool chdir(const char *path, bool set_cwd = false) {
   b4308:	4604      	mov	r4, r0
   b430a:	4617      	mov	r7, r2
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b430c:	f200 463c 	addw	r6, r0, #1084	; 0x43c
    if (path[0] == '/' && path[1] == '\0') {
   b4310:	d10f      	bne.n	b4332 <_ZN13FatFileSystem5chdirEPKcb.isra.0+0x36>
   b4312:	784b      	ldrb	r3, [r1, #1]
   b4314:	b96b      	cbnz	r3, b4332 <_ZN13FatFileSystem5chdirEPKcb.isra.0+0x36>
    vwd()->close();
   b4316:	4630      	mov	r0, r6
   b4318:	f002 f8e2 	bl	b64e0 <_ZN7FatFile5closeEv>
    return vwd()->openRoot(this) && (set_cwd ? FatFile::setCwd(vwd()) : true);
   b431c:	4621      	mov	r1, r4
   b431e:	4630      	mov	r0, r6
   b4320:	f001 fed6 	bl	b60d0 <_ZN7FatFile8openRootEP9FatVolume>
   b4324:	b118      	cbz	r0, b432e <_ZN13FatFileSystem5chdirEPKcb.isra.0+0x32>
    if (set_cwd) {
   b4326:	b117      	cbz	r7, b432e <_ZN13FatFileSystem5chdirEPKcb.isra.0+0x32>
      FatFile::setCwd(vwd());
   b4328:	4630      	mov	r0, r6
   b432a:	f7ff ffd9 	bl	b42e0 <_ZN7FatFile6setCwdEPS_>
  }
   b432e:	b00b      	add	sp, #44	; 0x2c
   b4330:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!dir.open(vwd(), path, O_RDONLY)) {
   b4332:	460a      	mov	r2, r1
   b4334:	2300      	movs	r3, #0
   b4336:	4631      	mov	r1, r6
   b4338:	a801      	add	r0, sp, #4
   b433a:	f002 f8d8 	bl	b64ee <_ZN7FatFile4openEPS_PKci>
   b433e:	2800      	cmp	r0, #0
   b4340:	d0f5      	beq.n	b432e <_ZN13FatFileSystem5chdirEPKcb.isra.0+0x32>
    if (!dir.isDir()) {
   b4342:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4346:	f013 0f70 	tst.w	r3, #112	; 0x70
   b434a:	d0f0      	beq.n	b432e <_ZN13FatFileSystem5chdirEPKcb.isra.0+0x32>
    m_vwd = dir;
   b434c:	ac01      	add	r4, sp, #4
   b434e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4350:	4635      	mov	r5, r6
   b4352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4358:	6823      	ldr	r3, [r4, #0]
   b435a:	602b      	str	r3, [r5, #0]
   b435c:	e7e3      	b.n	b4326 <_ZN13FatFileSystem5chdirEPKcb.isra.0+0x2a>
	...

000b4360 <_ZN7TestLibC1Eb>:
TestLib::TestLib(bool displayMsg) {
   b4360:	b537      	push	{r0, r1, r2, r4, r5, lr}
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   b4362:	2264      	movs	r2, #100	; 0x64
   b4364:	f880 2464 	strb.w	r2, [r0, #1124]	; 0x464
   b4368:	f240 7305 	movw	r3, #1797	; 0x705
  {
   b436c:	4a35      	ldr	r2, [pc, #212]	; (b4444 <_ZN7TestLibC1Eb+0xe4>)
   b436e:	8003      	strh	r3, [r0, #0]
   b4370:	f8c0 2474 	str.w	r2, [r0, #1140]	; 0x474
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   b4374:	2300      	movs	r3, #0
   b4376:	2201      	movs	r2, #1

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4378:	4d33      	ldr	r5, [pc, #204]	; (b4448 <_ZN7TestLibC1Eb+0xe8>)
   b437a:	72c3      	strb	r3, [r0, #11]
   b437c:	f8a0 3440 	strh.w	r3, [r0, #1088]	; 0x440
   b4380:	f880 346e 	strb.w	r3, [r0, #1134]	; 0x46e
   b4384:	f880 2478 	strb.w	r2, [r0, #1144]	; 0x478
   b4388:	f8c0 347c 	str.w	r3, [r0, #1148]	; 0x47c
   b438c:	f8a0 3480 	strh.w	r3, [r0, #1152]	; 0x480
   b4390:	7829      	ldrb	r1, [r5, #0]
   b4392:	f3bf 8f5b 	dmb	ish
   b4396:	4011      	ands	r1, r2
   b4398:	4604      	mov	r4, r0
   b439a:	d10b      	bne.n	b43b4 <_ZN7TestLibC1Eb+0x54>
   b439c:	4628      	mov	r0, r5
   b439e:	9101      	str	r1, [sp, #4]
   b43a0:	f7ff fe8a 	bl	b40b8 <__cxa_guard_acquire>
   b43a4:	9901      	ldr	r1, [sp, #4]
   b43a6:	b128      	cbz	r0, b43b4 <_ZN7TestLibC1Eb+0x54>
   b43a8:	4828      	ldr	r0, [pc, #160]	; (b444c <_ZN7TestLibC1Eb+0xec>)
   b43aa:	f005 fc55 	bl	b9c58 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b43ae:	4628      	mov	r0, r5
   b43b0:	f7ff fe87 	bl	b40c2 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b43b4:	4b25      	ldr	r3, [pc, #148]	; (b444c <_ZN7TestLibC1Eb+0xec>)
   b43b6:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
   b43ba:	f504 6091 	add.w	r0, r4, #1160	; 0x488
   b43be:	f001 fa8a 	bl	b58d6 <_ZN16Adafruit_MCP9600C1Ev>
   b43c2:	2305      	movs	r3, #5
   b43c4:	f884 3494 	strb.w	r3, [r4, #1172]	; 0x494
   b43c8:	4921      	ldr	r1, [pc, #132]	; (b4450 <_ZN7TestLibC1Eb+0xf0>)
   b43ca:	f204 409c 	addw	r0, r4, #1180	; 0x49c
   b43ce:	f005 fdae 	bl	b9f2e <_ZN6StringC1EPK19__FlashStringHelper>
   b43d2:	4920      	ldr	r1, [pc, #128]	; (b4454 <_ZN7TestLibC1Eb+0xf4>)
   b43d4:	f204 40ac 	addw	r0, r4, #1196	; 0x4ac
   b43d8:	f005 fda9 	bl	b9f2e <_ZN6StringC1EPK19__FlashStringHelper>
   b43dc:	2100      	movs	r1, #0
   b43de:	f204 40bc 	addw	r0, r4, #1212	; 0x4bc
   b43e2:	f001 fc0b 	bl	b5bfc <_ZN8DateTimeC1Em>
   b43e6:	4b1c      	ldr	r3, [pc, #112]	; (b4458 <_ZN7TestLibC1Eb+0xf8>)
   b43e8:	f204 42c2 	addw	r2, r4, #1218	; 0x4c2
   b43ec:	f103 0110 	add.w	r1, r3, #16
   b43f0:	f853 0b04 	ldr.w	r0, [r3], #4
   b43f4:	f842 0b04 	str.w	r0, [r2], #4
   b43f8:	428b      	cmp	r3, r1
   b43fa:	d1f9      	bne.n	b43f0 <_ZN7TestLibC1Eb+0x90>
   b43fc:	f504 629b 	add.w	r2, r4, #1240	; 0x4d8
   b4400:	2300      	movs	r3, #0
   b4402:	4916      	ldr	r1, [pc, #88]	; (b445c <_ZN7TestLibC1Eb+0xfc>)
   b4404:	f8a4 34d2 	strh.w	r3, [r4, #1234]	; 0x4d2
   b4408:	f8c4 34d4 	str.w	r3, [r4, #1236]	; 0x4d4
   b440c:	6011      	str	r1, [r2, #0]
   b440e:	f204 42dc 	addw	r2, r4, #1244	; 0x4dc
   b4412:	4913      	ldr	r1, [pc, #76]	; (b4460 <_ZN7TestLibC1Eb+0x100>)
   b4414:	6011      	str	r1, [r2, #0]
   b4416:	4913      	ldr	r1, [pc, #76]	; (b4464 <_ZN7TestLibC1Eb+0x104>)
   b4418:	f504 629c 	add.w	r2, r4, #1248	; 0x4e0
   b441c:	2000      	movs	r0, #0
   b441e:	e9c2 0100 	strd	r0, r1, [r2]
   b4422:	f504 629e 	add.w	r2, r4, #1264	; 0x4f0
   b4426:	2000      	movs	r0, #0
   b4428:	2100      	movs	r1, #0
   b442a:	e942 0102 	strd	r0, r1, [r2, #-8]
   b442e:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
}
   b4432:	4620      	mov	r0, r4
TestLib::TestLib(bool displayMsg) {
   b4434:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
   b4438:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    SD_CS = 5;
   b443c:	2305      	movs	r3, #5
   b443e:	7023      	strb	r3, [r4, #0]
}
   b4440:	b003      	add	sp, #12
   b4442:	bd30      	pop	{r4, r5, pc}
   b4444:	000bc3b8 	.word	0x000bc3b8
   b4448:	2003dc90 	.word	0x2003dc90
   b444c:	2003dc94 	.word	0x2003dc94
   b4450:	000bc2e4 	.word	0x000bc2e4
   b4454:	000bc0a8 	.word	0x000bc0a8
   b4458:	000bc3ec 	.word	0x000bc3ec
   b445c:	40533333 	.word	0x40533333
   b4460:	42480000 	.word	0x42480000
   b4464:	7ff80000 	.word	0x7ff80000

000b4468 <_ZN7TestLib8RTCsetupEv>:
void TestLib::RTCsetup() {
   b4468:	b513      	push	{r0, r1, r4, lr}
   b446a:	4604      	mov	r4, r0
    while (!Serial); // wait for serial port to connect. Needed for native USB
   b446c:	f005 ff5e 	bl	ba32c <_Z16_fetch_usbserialv>
   b4470:	f005 ff52 	bl	ba318 <_ZN9USBSerialcvbEv>
   b4474:	2800      	cmp	r0, #0
   b4476:	d0f9      	beq.n	b446c <_ZN7TestLib8RTCsetupEv+0x4>
    if (! rtc.begin()) {
   b4478:	3402      	adds	r4, #2
   b447a:	4620      	mov	r0, r4
   b447c:	f001 fc6d 	bl	b5d5a <_ZN11RTC_PCF85235beginEv>
   b4480:	b968      	cbnz	r0, b449e <_ZN7TestLib8RTCsetupEv+0x36>
        Serial.println("Couldn't find RTC");
   b4482:	f005 ff53 	bl	ba32c <_Z16_fetch_usbserialv>
   b4486:	491c      	ldr	r1, [pc, #112]	; (b44f8 <_ZN7TestLib8RTCsetupEv+0x90>)
   b4488:	f005 fa7f 	bl	b998a <_ZN5Print7printlnEPKc>
        Serial.flush();
   b448c:	f005 ff4e 	bl	ba32c <_Z16_fetch_usbserialv>
   b4490:	6803      	ldr	r3, [r0, #0]
   b4492:	69db      	ldr	r3, [r3, #28]
   b4494:	4798      	blx	r3
        while (1) delay(10);
   b4496:	200a      	movs	r0, #10
   b4498:	f003 fee2 	bl	b8260 <delay>
   b449c:	e7fb      	b.n	b4496 <_ZN7TestLib8RTCsetupEv+0x2e>
    if (! rtc.initialized()) {
   b449e:	4620      	mov	r0, r4
   b44a0:	f001 fc5d 	bl	b5d5e <_ZN11RTC_PCF852311initializedEv>
   b44a4:	b968      	cbnz	r0, b44c2 <_ZN7TestLib8RTCsetupEv+0x5a>
        Serial.println("RTC is NOT initialized, let's set the time!");
   b44a6:	f005 ff41 	bl	ba32c <_Z16_fetch_usbserialv>
   b44aa:	4914      	ldr	r1, [pc, #80]	; (b44fc <_ZN7TestLib8RTCsetupEv+0x94>)
   b44ac:	f005 fa6d 	bl	b998a <_ZN5Print7printlnEPKc>
        rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
   b44b0:	4913      	ldr	r1, [pc, #76]	; (b4500 <_ZN7TestLib8RTCsetupEv+0x98>)
   b44b2:	4a14      	ldr	r2, [pc, #80]	; (b4504 <_ZN7TestLib8RTCsetupEv+0x9c>)
   b44b4:	4668      	mov	r0, sp
   b44b6:	f001 fbe9 	bl	b5c8c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
   b44ba:	4669      	mov	r1, sp
   b44bc:	4620      	mov	r0, r4
   b44be:	f001 fc6f 	bl	b5da0 <_ZN11RTC_PCF85236adjustERK8DateTime>
    rtc.begin();
   b44c2:	4620      	mov	r0, r4
   b44c4:	f001 fc49 	bl	b5d5a <_ZN11RTC_PCF85235beginEv>
    Serial.print("Offset is "); Serial.println(offset); // Print to control offset
   b44c8:	f005 ff30 	bl	ba32c <_Z16_fetch_usbserialv>
   b44cc:	490e      	ldr	r1, [pc, #56]	; (b4508 <_ZN7TestLib8RTCsetupEv+0xa0>)
   b44ce:	f005 fa49 	bl	b9964 <_ZN5Print5printEPKc>
   b44d2:	f005 ff2b 	bl	ba32c <_Z16_fetch_usbserialv>
   b44d6:	220a      	movs	r2, #10
   b44d8:	2110      	movs	r1, #16
   b44da:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   b44dc:	f7ff fe2a 	bl	b4134 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>
        n += println();
   b44e0:	4620      	mov	r0, r4
   b44e2:	f005 fa46 	bl	b9972 <_ZN5Print7printlnEv>
    Serial.println("Time is set!");
   b44e6:	f005 ff21 	bl	ba32c <_Z16_fetch_usbserialv>
   b44ea:	4908      	ldr	r1, [pc, #32]	; (b450c <_ZN7TestLib8RTCsetupEv+0xa4>)
}
   b44ec:	b002      	add	sp, #8
   b44ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Time is set!");
   b44f2:	f005 ba4a 	b.w	b998a <_ZN5Print7printlnEPKc>
   b44f6:	bf00      	nop
   b44f8:	000bc0bc 	.word	0x000bc0bc
   b44fc:	000bc0ce 	.word	0x000bc0ce
   b4500:	000bc103 	.word	0x000bc103
   b4504:	000bc0fa 	.word	0x000bc0fa
   b4508:	000bc10f 	.word	0x000bc10f
   b450c:	000bc11a 	.word	0x000bc11a

000b4510 <_ZN7TestLib7SDsetupEv>:
void TestLib::SDsetup() {
   b4510:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4512:	ed2d 8b02 	vpush	{d8}
   b4516:	4604      	mov	r4, r0
   b4518:	b09f      	sub	sp, #124	; 0x7c
	pinMode(SD_CS, INPUT);
   b451a:	2100      	movs	r1, #0
   b451c:	7800      	ldrb	r0, [r0, #0]
   b451e:	f006 f879 	bl	ba614 <pinMode>
	Serial.print("SD: ");
   b4522:	f005 ff03 	bl	ba32c <_Z16_fetch_usbserialv>
   b4526:	496e      	ldr	r1, [pc, #440]	; (b46e0 <_ZN7TestLib7SDsetupEv+0x1d0>)
   b4528:	f005 fa1c 	bl	b9964 <_ZN5Print5printEPKc>
	delay(5); //DEBUG!
   b452c:	2005      	movs	r0, #5
   b452e:	f003 fe97 	bl	b8260 <delay>
class SPISettings : public Printable {
   b4532:	4b6c      	ldr	r3, [pc, #432]	; (b46e4 <_ZN7TestLib7SDsetupEv+0x1d4>)
   b4534:	9311      	str	r3, [sp, #68]	; 0x44
	if (!SD.begin(SD_CS)) {
   b4536:	4625      	mov	r5, r4
   b4538:	2300      	movs	r3, #0
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b453a:	f204 4664 	addw	r6, r4, #1124	; 0x464
   b453e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   b4542:	4b69      	ldr	r3, [pc, #420]	; (b46e8 <_ZN7TestLib7SDsetupEv+0x1d8>)
   b4544:	9313      	str	r3, [sp, #76]	; 0x4c
   b4546:	2701      	movs	r7, #1
   b4548:	f815 2b04 	ldrb.w	r2, [r5], #4
   b454c:	f8ad 7050 	strh.w	r7, [sp, #80]	; 0x50
   b4550:	ab11      	add	r3, sp, #68	; 0x44
   b4552:	f504 618e 	add.w	r1, r4, #1136	; 0x470
   b4556:	4630      	mov	r0, r6
   b4558:	f003 f9a4 	bl	b78a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b455c:	2800      	cmp	r0, #0
   b455e:	f000 80a3 	beq.w	b46a8 <_ZN7TestLib7SDsetupEv+0x198>
    m_blockDev = blockDev;
   b4562:	6066      	str	r6, [r4, #4]
    return &m_vwd;
   b4564:	f504 6688 	add.w	r6, r4, #1088	; 0x440
    vwd()->close();
   b4568:	4630      	mov	r0, r6
   b456a:	f001 ffb9 	bl	b64e0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b456e:	4639      	mov	r1, r7
   b4570:	4628      	mov	r0, r5
   b4572:	f002 fff7 	bl	b7564 <_ZN9FatVolume4initEh>
   b4576:	4601      	mov	r1, r0
   b4578:	2800      	cmp	r0, #0
   b457a:	f000 808f 	beq.w	b469c <_ZN7TestLib7SDsetupEv+0x18c>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b457e:	4629      	mov	r1, r5
   b4580:	4630      	mov	r0, r6
   b4582:	f001 fda5 	bl	b60d0 <_ZN7FatFile8openRootEP9FatVolume>
   b4586:	2800      	cmp	r0, #0
   b4588:	f000 808e 	beq.w	b46a8 <_ZN7TestLib7SDsetupEv+0x198>
   b458c:	4630      	mov	r0, r6
   b458e:	f7ff fea7 	bl	b42e0 <_ZN7FatFile6setCwdEPS_>
   b4592:	2800      	cmp	r0, #0
   b4594:	f000 8088 	beq.w	b46a8 <_ZN7TestLib7SDsetupEv+0x198>
    randomSeed(analogRead(D1)); 
   b4598:	2001      	movs	r0, #1
   b459a:	f006 f865 	bl	ba668 <analogRead>
   b459e:	f005 fb4c 	bl	b9c3a <_Z10randomSeedj>
    int RandVal = random(30557); //Generate a random number between 0 and 30557 (the number of words in Hamlet)
   b45a2:	f247 705d 	movw	r0, #30557	; 0x775d
   b45a6:	f005 fb3d 	bl	b9c24 <_Z6randomi>
    char RandDigits[6] = {0};
   b45aa:	2700      	movs	r7, #0
    sprintf(RandDigits, "%d", RandVal); //Convert RandVal into a series of digits
   b45ac:	4602      	mov	r2, r0
   b45ae:	494f      	ldr	r1, [pc, #316]	; (b46ec <_ZN7TestLib7SDsetupEv+0x1dc>)
    char RandDigits[6] = {0};
   b45b0:	9700      	str	r7, [sp, #0]
    int RandVal = random(30557); //Generate a random number between 0 and 30557 (the number of words in Hamlet)
   b45b2:	4605      	mov	r5, r0
    sprintf(RandDigits, "%d", RandVal); //Convert RandVal into a series of digits
   b45b4:	4668      	mov	r0, sp
    char RandDigits[6] = {0};
   b45b6:	f8ad 7004 	strh.w	r7, [sp, #4]
    sprintf(RandDigits, "%d", RandVal); //Convert RandVal into a series of digits
   b45ba:	f003 fe29 	bl	b8210 <sprintf>
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }
   b45be:	4628      	mov	r0, r5
   b45c0:	f006 fddc 	bl	bb17c <__aeabi_i2d>
   b45c4:	ec41 0b10 	vmov	d0, r0, r1
   b45c8:	f006 f982 	bl	ba8d0 <log10>
    return FatFile::remove(vwd(), path);
   b45cc:	4948      	ldr	r1, [pc, #288]	; (b46f0 <_ZN7TestLib7SDsetupEv+0x1e0>)
   b45ce:	eeb0 8a40 	vmov.f32	s16, s0
   b45d2:	eef0 8a60 	vmov.f32	s17, s1
   b45d6:	4630      	mov	r0, r6
   b45d8:	f001 ffd7 	bl	b658a <_ZN7FatFile6removeEPS_PKc>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b45dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    Print() : write_error(0) {}
   b45e0:	9705      	str	r7, [sp, #20]
   b45e2:	9306      	str	r3, [sp, #24]
   b45e4:	9708      	str	r7, [sp, #32]
    tmpFile.open(vwd(), path, oflag);
   b45e6:	f244 2302 	movw	r3, #16898	; 0x4202
  File() {}
   b45ea:	4f42      	ldr	r7, [pc, #264]	; (b46f4 <_ZN7TestLib7SDsetupEv+0x1e4>)
   b45ec:	4a40      	ldr	r2, [pc, #256]	; (b46f0 <_ZN7TestLib7SDsetupEv+0x1e0>)
   b45ee:	9704      	str	r7, [sp, #16]
   b45f0:	4631      	mov	r1, r6
   b45f2:	a808      	add	r0, sp, #32
   b45f4:	f001 ff7b 	bl	b64ee <_ZN7FatFile4openEPS_PKci>
    if(DataWrite) {
   b45f8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   b45fc:	b19b      	cbz	r3, b4626 <_ZN7TestLib7SDsetupEv+0x116>
size_t Print::print(T n, int base)
   b45fe:	220a      	movs	r2, #10
   b4600:	4629      	mov	r1, r5
   b4602:	a804      	add	r0, sp, #16
   b4604:	f7ff fd96 	bl	b4134 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>
        n += println();
   b4608:	a804      	add	r0, sp, #16
   b460a:	f005 f9b2 	bl	b9972 <_ZN5Print7printlnEv>
        DataWrite.println("\nHe was a man. Take him for all in all.");
   b460e:	493a      	ldr	r1, [pc, #232]	; (b46f8 <_ZN7TestLib7SDsetupEv+0x1e8>)
   b4610:	a804      	add	r0, sp, #16
   b4612:	f005 f9ba 	bl	b998a <_ZN5Print7printlnEPKc>
        DataWrite.println("I shall not look upon his like again.");
   b4616:	4939      	ldr	r1, [pc, #228]	; (b46fc <_ZN7TestLib7SDsetupEv+0x1ec>)
   b4618:	a804      	add	r0, sp, #16
   b461a:	f005 f9b6 	bl	b998a <_ZN5Print7printlnEPKc>
        DataWrite.println("-Hamlet, Act 1, Scene 2");
   b461e:	4938      	ldr	r1, [pc, #224]	; (b4700 <_ZN7TestLib7SDsetupEv+0x1f0>)
   b4620:	a804      	add	r0, sp, #16
   b4622:	f005 f9b2 	bl	b998a <_ZN5Print7printlnEPKc>
    DataWrite.close();
   b4626:	a808      	add	r0, sp, #32
   b4628:	f001 ff5a 	bl	b64e0 <_ZN7FatFile5closeEv>
    char TestDigits[6] = {0};
   b462c:	2500      	movs	r5, #0
   b462e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4632:	9313      	str	r3, [sp, #76]	; 0x4c
   b4634:	4a2e      	ldr	r2, [pc, #184]	; (b46f0 <_ZN7TestLib7SDsetupEv+0x1e0>)
   b4636:	9502      	str	r5, [sp, #8]
   b4638:	462b      	mov	r3, r5
   b463a:	4631      	mov	r1, r6
   b463c:	a815      	add	r0, sp, #84	; 0x54
   b463e:	f8ad 500c 	strh.w	r5, [sp, #12]
    Print() : write_error(0) {}
   b4642:	9512      	str	r5, [sp, #72]	; 0x48
   b4644:	9515      	str	r5, [sp, #84]	; 0x54
   b4646:	9711      	str	r7, [sp, #68]	; 0x44
   b4648:	f001 ff51 	bl	b64ee <_ZN7FatFile4openEPS_PKci>
	  if(DataRead) {
   b464c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   b4650:	2b00      	cmp	r3, #0
   b4652:	d03d      	beq.n	b46d0 <_ZN7TestLib7SDsetupEv+0x1c0>
    int RandLength = (int)((ceil(log10(RandVal))+1)*sizeof(char)); //Find the length of the values in the array
   b4654:	eeb0 0a48 	vmov.f32	s0, s16
   b4658:	eef0 0a68 	vmov.f32	s1, s17
   b465c:	f006 f8b8 	bl	ba7d0 <ceil>
   b4660:	4b28      	ldr	r3, [pc, #160]	; (b4704 <_ZN7TestLib7SDsetupEv+0x1f4>)
   b4662:	ec51 0b10 	vmov	r0, r1, d0
   b4666:	2200      	movs	r2, #0
   b4668:	f006 fc3c 	bl	baee4 <__adddf3>
   b466c:	f007 f8a0 	bl	bb7b0 <__aeabi_d2iz>
    	DataRead.read(TestDigits, RandLength);
   b4670:	a902      	add	r1, sp, #8
   b4672:	4602      	mov	r2, r0
    int RandLength = (int)((ceil(log10(RandVal))+1)*sizeof(char)); //Find the length of the values in the array
   b4674:	4606      	mov	r6, r0
    	DataRead.read(TestDigits, RandLength);
   b4676:	a815      	add	r0, sp, #84	; 0x54
   b4678:	f001 fd30 	bl	b60dc <_ZN7FatFile4readEPvj>
		  for(int i = 0; i < RandLength - 1; i++){ //Test random value string
   b467c:	3e01      	subs	r6, #1
   b467e:	aa02      	add	r2, sp, #8
   b4680:	466b      	mov	r3, sp
		      OBError = true;
   b4682:	2101      	movs	r1, #1
		  for(int i = 0; i < RandLength - 1; i++){ //Test random value string
   b4684:	42ae      	cmp	r6, r5
   b4686:	dd23      	ble.n	b46d0 <_ZN7TestLib7SDsetupEv+0x1c0>
		    if(TestDigits[i] != RandDigits[i]) {
   b4688:	f812 7b01 	ldrb.w	r7, [r2], #1
   b468c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b4690:	4287      	cmp	r7, r0
		      OBError = true;
   b4692:	bf18      	it	ne
   b4694:	f884 14d2 	strbne.w	r1, [r4, #1234]	; 0x4d2
		  for(int i = 0; i < RandLength - 1; i++){ //Test random value string
   b4698:	3501      	adds	r5, #1
   b469a:	e7f3      	b.n	b4684 <_ZN7TestLib7SDsetupEv+0x174>
    return (part ? init(part) : init(1) || init(0))
   b469c:	4628      	mov	r0, r5
   b469e:	f002 ff61 	bl	b7564 <_ZN9FatVolume4initEh>
   b46a2:	2800      	cmp	r0, #0
   b46a4:	f47f af6b 	bne.w	b457e <_ZN7TestLib7SDsetupEv+0x6e>
        Log.warn(" NO CARD");
   b46a8:	4917      	ldr	r1, [pc, #92]	; (b4708 <_ZN7TestLib7SDsetupEv+0x1f8>)
   b46aa:	4818      	ldr	r0, [pc, #96]	; (b470c <_ZN7TestLib7SDsetupEv+0x1fc>)
   b46ac:	f7ff fdf4 	bl	b4298 <_ZNK5spark6Logger4warnEPKcz>
  	    OBError = true;
   b46b0:	2301      	movs	r3, #1
   b46b2:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
if(SDError) Serial.println("FAIL");  //If card is inserted and still does not connect propperly, throw error
   b46b6:	f894 34d5 	ldrb.w	r3, [r4, #1237]	; 0x4d5
   b46ba:	b16b      	cbz	r3, b46d8 <_ZN7TestLib7SDsetupEv+0x1c8>
   b46bc:	f005 fe36 	bl	ba32c <_Z16_fetch_usbserialv>
   b46c0:	4913      	ldr	r1, [pc, #76]	; (b4710 <_ZN7TestLib7SDsetupEv+0x200>)
}
   b46c2:	b01f      	add	sp, #124	; 0x7c
   b46c4:	ecbd 8b02 	vpop	{d8}
   b46c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	else if(!SDError) Serial.println("PASS");  //If card is inserted AND connectects propely return success
   b46cc:	f005 b95d 	b.w	b998a <_ZN5Print7printlnEPKc>
	  DataRead.close();
   b46d0:	a815      	add	r0, sp, #84	; 0x54
   b46d2:	f001 ff05 	bl	b64e0 <_ZN7FatFile5closeEv>
    virtual ~Print() {}
   b46d6:	e7ee      	b.n	b46b6 <_ZN7TestLib7SDsetupEv+0x1a6>
	else if(!SDError) Serial.println("PASS");  //If card is inserted AND connectects propely return success
   b46d8:	f005 fe28 	bl	ba32c <_Z16_fetch_usbserialv>
   b46dc:	490d      	ldr	r1, [pc, #52]	; (b4714 <_ZN7TestLib7SDsetupEv+0x204>)
   b46de:	e7f0      	b.n	b46c2 <_ZN7TestLib7SDsetupEv+0x1b2>
   b46e0:	000bc127 	.word	0x000bc127
   b46e4:	000bc3b8 	.word	0x000bc3b8
   b46e8:	02faf080 	.word	0x02faf080
   b46ec:	000bc12c 	.word	0x000bc12c
   b46f0:	000bc12f 	.word	0x000bc12f
   b46f4:	000bc3cc 	.word	0x000bc3cc
   b46f8:	000bc143 	.word	0x000bc143
   b46fc:	000bc16b 	.word	0x000bc16b
   b4700:	000bc191 	.word	0x000bc191
   b4704:	3ff00000 	.word	0x3ff00000
   b4708:	000bc13a 	.word	0x000bc13a
   b470c:	2003e6ac 	.word	0x2003e6ac
   b4710:	000bc2d0 	.word	0x000bc2d0
   b4714:	000bc2d6 	.word	0x000bc2d6

000b4718 <_ZN7TestLib7TCsetupEv>:
void TestLib::TCsetup() {
   b4718:	b530      	push	{r4, r5, lr}
   b471a:	b085      	sub	sp, #20
    if (! mcp.begin(I2C_ADDRESS)) {
   b471c:	f500 6491 	add.w	r4, r0, #1160	; 0x488
   b4720:	f005 ffec 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b4724:	2167      	movs	r1, #103	; 0x67
   b4726:	4602      	mov	r2, r0
   b4728:	4620      	mov	r0, r4
   b472a:	f001 f8e8 	bl	b58fe <_ZN16Adafruit_MCP96005beginEhP7TwoWire>
   b472e:	b928      	cbnz	r0, b473c <_ZN7TestLib7TCsetupEv+0x24>
        Serial.println("Thermocouple amplifier not found. Check wiring!");
   b4730:	f005 fdfc 	bl	ba32c <_Z16_fetch_usbserialv>
   b4734:	4956      	ldr	r1, [pc, #344]	; (b4890 <_ZN7TestLib7TCsetupEv+0x178>)
   b4736:	f005 f928 	bl	b998a <_ZN5Print7printlnEPKc>
        while (1);
   b473a:	e7fe      	b.n	b473a <_ZN7TestLib7TCsetupEv+0x22>
    Serial.println("Found MCP9600!");
   b473c:	f005 fdf6 	bl	ba32c <_Z16_fetch_usbserialv>
   b4740:	4954      	ldr	r1, [pc, #336]	; (b4894 <_ZN7TestLib7TCsetupEv+0x17c>)
   b4742:	f005 f922 	bl	b998a <_ZN5Print7printlnEPKc>
    mcp.setADCresolution(MCP9600_ADCRESOLUTION_18);
   b4746:	2100      	movs	r1, #0
   b4748:	4620      	mov	r0, r4
   b474a:	f001 f947 	bl	b59dc <_ZN16Adafruit_MCP960016setADCresolutionE11_resolution>
    Serial.print("ADC resolution set to ");
   b474e:	f005 fded 	bl	ba32c <_Z16_fetch_usbserialv>
   b4752:	4951      	ldr	r1, [pc, #324]	; (b4898 <_ZN7TestLib7TCsetupEv+0x180>)
   b4754:	f005 f906 	bl	b9964 <_ZN5Print5printEPKc>
    switch (mcp.getADCresolution()) {
   b4758:	4620      	mov	r0, r4
   b475a:	f001 f94d 	bl	b59f8 <_ZN16Adafruit_MCP960016getADCresolutionEv>
   b475e:	2803      	cmp	r0, #3
   b4760:	d808      	bhi.n	b4774 <_ZN7TestLib7TCsetupEv+0x5c>
   b4762:	e8df f000 	tbb	[pc, r0]
   b4766:	2002      	.short	0x2002
   b4768:	2824      	.short	0x2824
        case MCP9600_ADCRESOLUTION_18:   Serial.print("18"); break;
   b476a:	f005 fddf 	bl	ba32c <_Z16_fetch_usbserialv>
   b476e:	494b      	ldr	r1, [pc, #300]	; (b489c <_ZN7TestLib7TCsetupEv+0x184>)
        case MCP9600_ADCRESOLUTION_12:   Serial.print("12"); break;
   b4770:	f005 f8f8 	bl	b9964 <_ZN5Print5printEPKc>
    Serial.println(" bits");
   b4774:	f005 fdda 	bl	ba32c <_Z16_fetch_usbserialv>
   b4778:	4949      	ldr	r1, [pc, #292]	; (b48a0 <_ZN7TestLib7TCsetupEv+0x188>)
   b477a:	f005 f906 	bl	b998a <_ZN5Print7printlnEPKc>
    mcp.setThermocoupleType(MCP9600_TYPE_T);
   b477e:	2102      	movs	r1, #2
   b4780:	4620      	mov	r0, r4
   b4782:	f001 f973 	bl	b5a6c <_ZN16Adafruit_MCP960019setThermocoupleTypeE10_themotype>
    Serial.print("Thermocouple type set to ");
   b4786:	f005 fdd1 	bl	ba32c <_Z16_fetch_usbserialv>
   b478a:	4946      	ldr	r1, [pc, #280]	; (b48a4 <_ZN7TestLib7TCsetupEv+0x18c>)
   b478c:	f005 f8ea 	bl	b9964 <_ZN5Print5printEPKc>
    switch (mcp.getThermocoupleType()) {
   b4790:	4620      	mov	r0, r4
   b4792:	f001 f954 	bl	b5a3e <_ZN16Adafruit_MCP960019getThermocoupleTypeEv>
   b4796:	2807      	cmp	r0, #7
   b4798:	d816      	bhi.n	b47c8 <_ZN7TestLib7TCsetupEv+0xb0>
   b479a:	e8df f000 	tbb	[pc, r0]
   b479e:	5d10      	.short	0x5d10
   b47a0:	6d696561 	.word	0x6d696561
   b47a4:	7571      	.short	0x7571
        case MCP9600_ADCRESOLUTION_16:   Serial.print("16"); break;
   b47a6:	f005 fdc1 	bl	ba32c <_Z16_fetch_usbserialv>
   b47aa:	493f      	ldr	r1, [pc, #252]	; (b48a8 <_ZN7TestLib7TCsetupEv+0x190>)
   b47ac:	e7e0      	b.n	b4770 <_ZN7TestLib7TCsetupEv+0x58>
        case MCP9600_ADCRESOLUTION_14:   Serial.print("14"); break;
   b47ae:	f005 fdbd 	bl	ba32c <_Z16_fetch_usbserialv>
   b47b2:	493e      	ldr	r1, [pc, #248]	; (b48ac <_ZN7TestLib7TCsetupEv+0x194>)
   b47b4:	e7dc      	b.n	b4770 <_ZN7TestLib7TCsetupEv+0x58>
        case MCP9600_ADCRESOLUTION_12:   Serial.print("12"); break;
   b47b6:	f005 fdb9 	bl	ba32c <_Z16_fetch_usbserialv>
   b47ba:	493d      	ldr	r1, [pc, #244]	; (b48b0 <_ZN7TestLib7TCsetupEv+0x198>)
   b47bc:	e7d8      	b.n	b4770 <_ZN7TestLib7TCsetupEv+0x58>
        case MCP9600_TYPE_K:  Serial.print("K"); break;
   b47be:	f005 fdb5 	bl	ba32c <_Z16_fetch_usbserialv>
   b47c2:	493c      	ldr	r1, [pc, #240]	; (b48b4 <_ZN7TestLib7TCsetupEv+0x19c>)
        case MCP9600_TYPE_R:  Serial.print("R"); break;
   b47c4:	f005 f8ce 	bl	b9964 <_ZN5Print5printEPKc>
    Serial.println(" type");
   b47c8:	f005 fdb0 	bl	ba32c <_Z16_fetch_usbserialv>
   b47cc:	493a      	ldr	r1, [pc, #232]	; (b48b8 <_ZN7TestLib7TCsetupEv+0x1a0>)
   b47ce:	f005 f8dc 	bl	b998a <_ZN5Print7printlnEPKc>
    mcp.setFilterCoefficient(3);
   b47d2:	2103      	movs	r1, #3
   b47d4:	4620      	mov	r0, r4
   b47d6:	f001 f977 	bl	b5ac8 <_ZN16Adafruit_MCP960020setFilterCoefficientEh>
    Serial.print("Filter coefficient value set to: ");
   b47da:	f005 fda7 	bl	ba32c <_Z16_fetch_usbserialv>
   b47de:	4937      	ldr	r1, [pc, #220]	; (b48bc <_ZN7TestLib7TCsetupEv+0x1a4>)
   b47e0:	f005 f8c0 	bl	b9964 <_ZN5Print5printEPKc>
    Serial.println(mcp.getFilterCoefficient());
   b47e4:	f005 fda2 	bl	ba32c <_Z16_fetch_usbserialv>
   b47e8:	4605      	mov	r5, r0
   b47ea:	4620      	mov	r0, r4
   b47ec:	f001 f955 	bl	b5a9a <_ZN16Adafruit_MCP960020getFilterCoefficientEv>
        return printNumber(val, base) + t;
   b47f0:	220a      	movs	r2, #10
   b47f2:	4601      	mov	r1, r0
   b47f4:	4628      	mov	r0, r5
   b47f6:	f005 f8d4 	bl	b99a2 <_ZN5Print11printNumberEmh>
        n += println();
   b47fa:	4628      	mov	r0, r5
   b47fc:	f005 f8b9 	bl	b9972 <_ZN5Print7printlnEv>
    mcp.setAlertTemperature(1, 30);
   b4800:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
   b4804:	2101      	movs	r1, #1
   b4806:	4620      	mov	r0, r4
   b4808:	f001 f996 	bl	b5b38 <_ZN16Adafruit_MCP960019setAlertTemperatureEhf>
    Serial.print("Alert #1 temperature set to ");
   b480c:	f005 fd8e 	bl	ba32c <_Z16_fetch_usbserialv>
   b4810:	492b      	ldr	r1, [pc, #172]	; (b48c0 <_ZN7TestLib7TCsetupEv+0x1a8>)
   b4812:	f005 f8a7 	bl	b9964 <_ZN5Print5printEPKc>
    Serial.println(mcp.getAlertTemperature(1));
   b4816:	f005 fd89 	bl	ba32c <_Z16_fetch_usbserialv>
   b481a:	2101      	movs	r1, #1
   b481c:	4605      	mov	r5, r0
   b481e:	4620      	mov	r0, r4
   b4820:	f001 f96a 	bl	b5af8 <_ZN16Adafruit_MCP960019getAlertTemperatureEh>
   b4824:	2102      	movs	r1, #2
   b4826:	4628      	mov	r0, r5
   b4828:	f005 f9bc 	bl	b9ba4 <_ZN5Print7printlnEfi>
    mcp.configureAlert(1, true, true);  // alert 1 enabled, rising temp
   b482c:	2300      	movs	r3, #0
   b482e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4832:	9300      	str	r3, [sp, #0]
   b4834:	2301      	movs	r3, #1
   b4836:	4619      	mov	r1, r3
   b4838:	461a      	mov	r2, r3
   b483a:	4620      	mov	r0, r4
   b483c:	f001 f9a0 	bl	b5b80 <_ZN16Adafruit_MCP960014configureAlertEhbbbbb>
    mcp.enable(true);
   b4840:	2101      	movs	r1, #1
   b4842:	4620      	mov	r0, r4
   b4844:	f001 f84a 	bl	b58dc <_ZN16Adafruit_MCP96006enableEb>
    Serial.println(F("------------------------------"));
   b4848:	f005 fd70 	bl	ba32c <_Z16_fetch_usbserialv>
   b484c:	491d      	ldr	r1, [pc, #116]	; (b48c4 <_ZN7TestLib7TCsetupEv+0x1ac>)
}
   b484e:	b005      	add	sp, #20
   b4850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Serial.println(F("------------------------------"));
   b4854:	f005 b8a3 	b.w	b999e <_ZN5Print7printlnEPK19__FlashStringHelper>
        case MCP9600_TYPE_J:  Serial.print("J"); break;
   b4858:	f005 fd68 	bl	ba32c <_Z16_fetch_usbserialv>
   b485c:	491a      	ldr	r1, [pc, #104]	; (b48c8 <_ZN7TestLib7TCsetupEv+0x1b0>)
   b485e:	e7b1      	b.n	b47c4 <_ZN7TestLib7TCsetupEv+0xac>
        case MCP9600_TYPE_T:  Serial.print("T"); break;
   b4860:	f005 fd64 	bl	ba32c <_Z16_fetch_usbserialv>
   b4864:	4919      	ldr	r1, [pc, #100]	; (b48cc <_ZN7TestLib7TCsetupEv+0x1b4>)
   b4866:	e7ad      	b.n	b47c4 <_ZN7TestLib7TCsetupEv+0xac>
        case MCP9600_TYPE_N:  Serial.print("N"); break;
   b4868:	f005 fd60 	bl	ba32c <_Z16_fetch_usbserialv>
   b486c:	4918      	ldr	r1, [pc, #96]	; (b48d0 <_ZN7TestLib7TCsetupEv+0x1b8>)
   b486e:	e7a9      	b.n	b47c4 <_ZN7TestLib7TCsetupEv+0xac>
        case MCP9600_TYPE_S:  Serial.print("S"); break;
   b4870:	f005 fd5c 	bl	ba32c <_Z16_fetch_usbserialv>
   b4874:	4917      	ldr	r1, [pc, #92]	; (b48d4 <_ZN7TestLib7TCsetupEv+0x1bc>)
   b4876:	e7a5      	b.n	b47c4 <_ZN7TestLib7TCsetupEv+0xac>
        case MCP9600_TYPE_E:  Serial.print("E"); break;
   b4878:	f005 fd58 	bl	ba32c <_Z16_fetch_usbserialv>
   b487c:	4916      	ldr	r1, [pc, #88]	; (b48d8 <_ZN7TestLib7TCsetupEv+0x1c0>)
   b487e:	e7a1      	b.n	b47c4 <_ZN7TestLib7TCsetupEv+0xac>
        case MCP9600_TYPE_B:  Serial.print("B"); break;
   b4880:	f005 fd54 	bl	ba32c <_Z16_fetch_usbserialv>
   b4884:	4915      	ldr	r1, [pc, #84]	; (b48dc <_ZN7TestLib7TCsetupEv+0x1c4>)
   b4886:	e79d      	b.n	b47c4 <_ZN7TestLib7TCsetupEv+0xac>
        case MCP9600_TYPE_R:  Serial.print("R"); break;
   b4888:	f005 fd50 	bl	ba32c <_Z16_fetch_usbserialv>
   b488c:	4914      	ldr	r1, [pc, #80]	; (b48e0 <_ZN7TestLib7TCsetupEv+0x1c8>)
   b488e:	e799      	b.n	b47c4 <_ZN7TestLib7TCsetupEv+0xac>
   b4890:	000bc1a9 	.word	0x000bc1a9
   b4894:	000bc1d9 	.word	0x000bc1d9
   b4898:	000bc1e8 	.word	0x000bc1e8
   b489c:	000bc1ff 	.word	0x000bc1ff
   b48a0:	000bc20b 	.word	0x000bc20b
   b48a4:	000bc211 	.word	0x000bc211
   b48a8:	000bc202 	.word	0x000bc202
   b48ac:	000bc205 	.word	0x000bc205
   b48b0:	000bc208 	.word	0x000bc208
   b48b4:	000bc22b 	.word	0x000bc22b
   b48b8:	000bc235 	.word	0x000bc235
   b48bc:	000bc23b 	.word	0x000bc23b
   b48c0:	000bc25d 	.word	0x000bc25d
   b48c4:	000bc27a 	.word	0x000bc27a
   b48c8:	000bc22d 	.word	0x000bc22d
   b48cc:	000bc22f 	.word	0x000bc22f
   b48d0:	000bc231 	.word	0x000bc231
   b48d4:	000bc2d9 	.word	0x000bc2d9
   b48d8:	000bc2cd 	.word	0x000bc2cd
   b48dc:	000bc073 	.word	0x000bc073
   b48e0:	000bc233 	.word	0x000bc233

000b48e4 <_ZN7TestLib9blinkGoodEv>:
void TestLib::blinkGood() {
   b48e4:	b510      	push	{r4, lr}
   b48e6:	4604      	mov	r4, r0
    delay(2000);
   b48e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b48ec:	f003 fcb8 	bl	b8260 <delay>
    digitalWrite(BlueLED, HIGH);
   b48f0:	7860      	ldrb	r0, [r4, #1]
   b48f2:	2101      	movs	r1, #1
   b48f4:	f005 fe9f 	bl	ba636 <digitalWrite>
    delay(5000);
   b48f8:	f241 3088 	movw	r0, #5000	; 0x1388
   b48fc:	f003 fcb0 	bl	b8260 <delay>
    digitalWrite(BlueLED, LOW);
   b4900:	7860      	ldrb	r0, [r4, #1]
   b4902:	2100      	movs	r1, #0
}
   b4904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(BlueLED, LOW);
   b4908:	f005 be95 	b.w	ba636 <digitalWrite>

000b490c <_ZN7TestLib7getTimeEv>:
{
   b490c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b490e:	b097      	sub	sp, #92	; 0x5c
    now = rtc.now();
   b4910:	ad09      	add	r5, sp, #36	; 0x24
{
   b4912:	4606      	mov	r6, r0
    now = rtc.now();
   b4914:	4628      	mov	r0, r5
{
   b4916:	460c      	mov	r4, r1
    now = rtc.now();
   b4918:	f001 fabf 	bl	b5e9a <_ZN11RTC_PCF85233nowEv>
   b491c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4920:	4603      	mov	r3, r0
   b4922:	f8c4 04bc 	str.w	r0, [r4, #1212]	; 0x4bc
   b4926:	f8a4 14c0 	strh.w	r1, [r4, #1216]	; 0x4c0
    DateTime (uint16_t year, uint8_t month, uint8_t day,
                uint8_t hour = 0, uint8_t min = 0, uint8_t sec = 0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
   b492a:	b2c2      	uxtb	r2, r0
    sprintf(temp, "%04d/%02d/%02d %02d:%02d:%02d", now.year(), now.month(), 
   b492c:	f3c1 2007 	ubfx	r0, r1, #8, #8
   b4930:	b2c9      	uxtb	r1, r1
   b4932:	9102      	str	r1, [sp, #8]
   b4934:	0e19      	lsrs	r1, r3, #24
   b4936:	9101      	str	r1, [sp, #4]
   b4938:	f3c3 4107 	ubfx	r1, r3, #16, #8
   b493c:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
   b4940:	f3c3 2307 	ubfx	r3, r3, #8, #8
   b4944:	9003      	str	r0, [sp, #12]
   b4946:	9100      	str	r1, [sp, #0]
   b4948:	4628      	mov	r0, r5
   b494a:	4918      	ldr	r1, [pc, #96]	; (b49ac <_ZN7TestLib7getTimeEv+0xa0>)
   b494c:	f003 fc60 	bl	b8210 <sprintf>
    LogTimeDate = String(temp);
   b4950:	f204 47ac 	addw	r7, r4, #1196	; 0x4ac
   b4954:	4629      	mov	r1, r5
   b4956:	a805      	add	r0, sp, #20
   b4958:	f005 fae9 	bl	b9f2e <_ZN6StringC1EPK19__FlashStringHelper>
   b495c:	a905      	add	r1, sp, #20
   b495e:	4638      	mov	r0, r7
   b4960:	f005 fb3b 	bl	b9fda <_ZN6StringaSEOS_>
   b4964:	a805      	add	r0, sp, #20
   b4966:	f005 fa97 	bl	b9e98 <_ZN6StringD1Ev>
   b496a:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
    Time_Date[0] = now.year();
   b496e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
   b4972:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
    Time_Date[1] = now.month();
   b4976:	f894 34bd 	ldrb.w	r3, [r4, #1213]	; 0x4bd
   b497a:	f8c4 34f4 	str.w	r3, [r4, #1268]	; 0x4f4
    Time_Date[2] = now.day();
   b497e:	f894 34be 	ldrb.w	r3, [r4, #1214]	; 0x4be
   b4982:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
    Time_Date[3] = now.hour();
   b4986:	f894 34bf 	ldrb.w	r3, [r4, #1215]	; 0x4bf
   b498a:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    Time_Date[4] = now.minute();
   b498e:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
   b4992:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    Time_Date[5] = now.second();
   b4996:	f894 34c1 	ldrb.w	r3, [r4, #1217]	; 0x4c1
   b499a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    return LogTimeDate;
   b499e:	4639      	mov	r1, r7
   b49a0:	4630      	mov	r0, r6
   b49a2:	f005 fb0f 	bl	b9fc4 <_ZN6StringC1ERKS_>
}
   b49a6:	4630      	mov	r0, r6
   b49a8:	b017      	add	sp, #92	; 0x5c
   b49aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b49ac:	000bc299 	.word	0x000bc299

000b49b0 <_ZN7TestLib9clockTestEv>:
{
   b49b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b49b2:	4604      	mov	r4, r0
	Serial.print("Clock: ");
   b49b4:	f005 fcba 	bl	ba32c <_Z16_fetch_usbserialv>
   b49b8:	4929      	ldr	r1, [pc, #164]	; (b4a60 <_ZN7TestLib9clockTestEv+0xb0>)
   b49ba:	f004 ffd3 	bl	b9964 <_ZN5Print5printEPKc>
	Wire.beginTransmission(0x68);
   b49be:	f005 fe9d 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b49c2:	2168      	movs	r1, #104	; 0x68
   b49c4:	f003 fd38 	bl	b8438 <_ZN7TwoWire17beginTransmissionEi>
  	Wire.write(0xFF); // DEBUG: Margay address!
   b49c8:	f005 fe98 	bl	ba6fc <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b49cc:	6803      	ldr	r3, [r0, #0]
   b49ce:	21ff      	movs	r1, #255	; 0xff
   b49d0:	689b      	ldr	r3, [r3, #8]
   b49d2:	4798      	blx	r3
    Wire.write(0x0F); // DEBUG!! PCF8523_CLKOUTCONTROL
   b49d4:	f005 fe92 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b49d8:	6803      	ldr	r3, [r0, #0]
   b49da:	210f      	movs	r1, #15
   b49dc:	689b      	ldr	r3, [r3, #8]
   b49de:	4798      	blx	r3
	Error = Wire.endTransmission();    
   b49e0:	f005 fe8c 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b49e4:	f003 fd2f 	bl	b8446 <_ZN7TwoWire15endTransmissionEv>
	if(Error == 0) {
   b49e8:	4605      	mov	r5, r0
   b49ea:	b9b0      	cbnz	r0, b4a1a <_ZN7TestLib9clockTestEv+0x6a>
		getTime(); //FIX!
   b49ec:	4621      	mov	r1, r4
   b49ee:	4668      	mov	r0, sp
   b49f0:	f7ff ff8c 	bl	b490c <_ZN7TestLib7getTimeEv>
   b49f4:	4668      	mov	r0, sp
   b49f6:	f005 fa4f 	bl	b9e98 <_ZN6StringD1Ev>
	  	delay(1100);
   b49fa:	f240 404c 	movw	r0, #1100	; 0x44c
    uint8_t month() const       { return m; }
    uint8_t day() const         { return d; }
    uint8_t hour() const        { return hh; }
    uint8_t minute() const      { return mm; }
    uint8_t second() const      { return ss; }
   b49fe:	f894 64c1 	ldrb.w	r6, [r4, #1217]	; 0x4c1
   b4a02:	f003 fc2d 	bl	b8260 <delay>
        DateTime later = rtc.now();
   b4a06:	4668      	mov	r0, sp
   b4a08:	f001 fa47 	bl	b5e9a <_ZN11RTC_PCF85233nowEv>
	  	if(later.second() == TestSeconds) {
   b4a0c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4a10:	42b3      	cmp	r3, r6
	  		OBError = true; //If clock is not incrementing
   b4a12:	bf04      	itt	eq
   b4a14:	2301      	moveq	r3, #1
   b4a16:	f884 34d2 	strbeq.w	r3, [r4, #1234]	; 0x4d2
	if(YearNow == 2000) {  //If value is 2000, work around Y2K bug by setting time to Jan 1st, midnight, 2049
   b4a1a:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
   b4a1e:	b93b      	cbnz	r3, b4a30 <_ZN7TestLib9clockTestEv+0x80>
		TimeError = true;
   b4a20:	2301      	movs	r3, #1
   b4a22:	f884 34d4 	strb.w	r3, [r4, #1236]	; 0x4d4
		Serial.println(" PASS, BAD TIME");
   b4a26:	f005 fc81 	bl	ba32c <_Z16_fetch_usbserialv>
   b4a2a:	490e      	ldr	r1, [pc, #56]	; (b4a64 <_ZN7TestLib9clockTestEv+0xb4>)
   b4a2c:	f004 ffad 	bl	b998a <_ZN5Print7printlnEPKc>
	if(Error != 0) {
   b4a30:	b14d      	cbz	r5, b4a46 <_ZN7TestLib9clockTestEv+0x96>
		Serial.println(" FAIL");
   b4a32:	f005 fc7b 	bl	ba32c <_Z16_fetch_usbserialv>
   b4a36:	490c      	ldr	r1, [pc, #48]	; (b4a68 <_ZN7TestLib9clockTestEv+0xb8>)
   b4a38:	f004 ffa7 	bl	b998a <_ZN5Print7printlnEPKc>
		OBError = true;
   b4a3c:	2301      	movs	r3, #1
   b4a3e:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
}
   b4a42:	b004      	add	sp, #16
   b4a44:	bd70      	pop	{r4, r5, r6, pc}
	else if(Error == 0 && OscStop == false && TimeError == false) {
   b4a46:	f894 34d4 	ldrb.w	r3, [r4, #1236]	; 0x4d4
   b4a4a:	2b00      	cmp	r3, #0
   b4a4c:	d1f9      	bne.n	b4a42 <_ZN7TestLib9clockTestEv+0x92>
		Serial.println(" PASS");
   b4a4e:	f005 fc6d 	bl	ba32c <_Z16_fetch_usbserialv>
   b4a52:	4906      	ldr	r1, [pc, #24]	; (b4a6c <_ZN7TestLib9clockTestEv+0xbc>)
}
   b4a54:	b004      	add	sp, #16
   b4a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		Serial.println(" PASS");
   b4a5a:	f004 bf96 	b.w	b998a <_ZN5Print7printlnEPKc>
   b4a5e:	bf00      	nop
   b4a60:	000bc2b7 	.word	0x000bc2b7
   b4a64:	000bc2bf 	.word	0x000bc2bf
   b4a68:	000bc2cf 	.word	0x000bc2cf
   b4a6c:	000bc2d5 	.word	0x000bc2d5

000b4a70 <_ZN7TestLib13getBatVoltageEv>:
    LogTimeDate = getTime();
    return LogTimeDate + "," + String(BatVoltage) + ",";
}

float TestLib::getBatVoltage()
{
   b4a70:	b508      	push	{r3, lr}
	float BatVoltage = analogRead(BATT) * 0.0011224;
   b4a72:	2021      	movs	r0, #33	; 0x21
   b4a74:	f005 fdf8 	bl	ba668 <analogRead>
   b4a78:	f006 fb80 	bl	bb17c <__aeabi_i2d>
   b4a7c:	a304      	add	r3, pc, #16	; (adr r3, b4a90 <_ZN7TestLib13getBatVoltageEv+0x20>)
   b4a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4a82:	f006 fbe5 	bl	bb250 <__aeabi_dmul>
   b4a86:	f006 fedb 	bl	bb840 <__aeabi_d2f>
	return BatVoltage;
}
   b4a8a:	ee00 0a10 	vmov	s0, r0
   b4a8e:	bd08      	pop	{r3, pc}
   b4a90:	d2c10294 	.word	0xd2c10294
   b4a94:	3f5263af 	.word	0x3f5263af

000b4a98 <_ZN7TestLib7batTestEv>:
{
   b4a98:	b538      	push	{r3, r4, r5, lr}
   b4a9a:	4604      	mov	r4, r0
	if(getBatVoltage() < BatVoltageError) BatError = true; //Set error flag if below min voltage
   b4a9c:	f7ff ffe8 	bl	b4a70 <_ZN7TestLib13getBatVoltageEv>
   b4aa0:	f504 639b 	add.w	r3, r4, #1240	; 0x4d8
   b4aa4:	edd3 7a00 	vldr	s15, [r3]
   b4aa8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b4aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ab0:	bf44      	itt	mi
   b4ab2:	2301      	movmi	r3, #1
   b4ab4:	f884 34d6 	strbmi.w	r3, [r4, #1238]	; 0x4d6
	Serial.print("Bat = ");
   b4ab8:	f005 fc38 	bl	ba32c <_Z16_fetch_usbserialv>
   b4abc:	4909      	ldr	r1, [pc, #36]	; (b4ae4 <_ZN7TestLib7batTestEv+0x4c>)
   b4abe:	f004 ff51 	bl	b9964 <_ZN5Print5printEPKc>
	Serial.print(getBatVoltage());
   b4ac2:	f005 fc33 	bl	ba32c <_Z16_fetch_usbserialv>
   b4ac6:	4605      	mov	r5, r0
   b4ac8:	4620      	mov	r0, r4
   b4aca:	f7ff ffd1 	bl	b4a70 <_ZN7TestLib13getBatVoltageEv>
   b4ace:	2102      	movs	r1, #2
   b4ad0:	4628      	mov	r0, r5
   b4ad2:	f005 f84d 	bl	b9b70 <_ZN5Print5printEfi>
	Serial.print("V\t");
   b4ad6:	f005 fc29 	bl	ba32c <_Z16_fetch_usbserialv>
}
   b4ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Serial.print("V\t");
   b4ade:	4902      	ldr	r1, [pc, #8]	; (b4ae8 <_ZN7TestLib7batTestEv+0x50>)
   b4ae0:	f004 bf40 	b.w	b9964 <_ZN5Print5printEPKc>
   b4ae4:	000bc2db 	.word	0x000bc2db
   b4ae8:	000bc2e2 	.word	0x000bc2e2

000b4aec <_ZN7TestLib5beginE6String>:
int TestLib::begin(String header_) {
   b4aec:	b570      	push	{r4, r5, r6, lr}
   b4aee:	4604      	mov	r4, r0
   b4af0:	b088      	sub	sp, #32
   b4af2:	460d      	mov	r5, r1
    RTCsetup(); // ONLY USE DURING INITIAL SETUP!
   b4af4:	f7ff fcb8 	bl	b4468 <_ZN7TestLib8RTCsetupEv>
    rtc.begin();
   b4af8:	1ca0      	adds	r0, r4, #2
   b4afa:	f001 f92e 	bl	b5d5a <_ZN11RTC_PCF85235beginEv>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4afe:	4668      	mov	r0, sp
   b4b00:	f003 fafe 	bl	b8100 <spark_deviceID>
    SN = id.c_str();
   b4b04:	9b00      	ldr	r3, [sp, #0]
   b4b06:	f8c4 3498 	str.w	r3, [r4, #1176]	; 0x498
    Log.info("\n\n\nInitializing...\n");
   b4b0a:	492c      	ldr	r1, [pc, #176]	; (b4bbc <_ZN7TestLib5beginE6String+0xd0>)
   b4b0c:	482c      	ldr	r0, [pc, #176]	; (b4bc0 <_ZN7TestLib5beginE6String+0xd4>)
   b4b0e:	f7ff fbab 	bl	b4268 <_ZNK5spark6Logger4infoEPKcz>
    delay(100);
   b4b12:	2064      	movs	r0, #100	; 0x64
   b4b14:	f003 fba4 	bl	b8260 <delay>
    getTime();
   b4b18:	4621      	mov	r1, r4
   b4b1a:	a804      	add	r0, sp, #16
   b4b1c:	f7ff fef6 	bl	b490c <_ZN7TestLib7getTimeEv>
   b4b20:	a804      	add	r0, sp, #16
   b4b22:	f005 f9b9 	bl	b9e98 <_ZN6StringD1Ev>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4b26:	4927      	ldr	r1, [pc, #156]	; (b4bc4 <_ZN7TestLib5beginE6String+0xd8>)
   b4b28:	a804      	add	r0, sp, #16
   b4b2a:	f005 fa00 	bl	b9f2e <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("\nTimestamp = "+LogTimeDate);
   b4b2e:	f204 41ac 	addw	r1, r4, #1196	; 0x4ac
   b4b32:	a804      	add	r0, sp, #16
   b4b34:	f005 fab0 	bl	ba098 <_ZplRK15StringSumHelperRK6String>
   b4b38:	6801      	ldr	r1, [r0, #0]
   b4b3a:	4821      	ldr	r0, [pc, #132]	; (b4bc0 <_ZN7TestLib5beginE6String+0xd4>)
   b4b3c:	f7ff fb94 	bl	b4268 <_ZNK5spark6Logger4infoEPKcz>
    Header = header_;
   b4b40:	f204 469c 	addw	r6, r4, #1180	; 0x49c
class StringSumHelper : public String
   b4b44:	a804      	add	r0, sp, #16
   b4b46:	f005 f9a7 	bl	b9e98 <_ZN6StringD1Ev>
   b4b4a:	4629      	mov	r1, r5
   b4b4c:	4630      	mov	r0, r6
   b4b4e:	f005 fa2a 	bl	b9fa6 <_ZN6StringaSERKS_>
    Log.info(Header);
   b4b52:	f8d4 149c 	ldr.w	r1, [r4, #1180]	; 0x49c
   b4b56:	481a      	ldr	r0, [pc, #104]	; (b4bc0 <_ZN7TestLib5beginE6String+0xd4>)
   b4b58:	f7ff fb86 	bl	b4268 <_ZNK5spark6Logger4infoEPKcz>
    if (Header.substring(0, 2) == "TC") {
   b4b5c:	2302      	movs	r3, #2
   b4b5e:	2200      	movs	r2, #0
   b4b60:	4631      	mov	r1, r6
   b4b62:	a804      	add	r0, sp, #16
   b4b64:	f005 fae4 	bl	ba130 <_ZNK6String9substringEjj>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4b68:	4917      	ldr	r1, [pc, #92]	; (b4bc8 <_ZN7TestLib5beginE6String+0xdc>)
   b4b6a:	a804      	add	r0, sp, #16
   b4b6c:	f005 fab5 	bl	ba0da <_ZNK6String6equalsEPKc>
   b4b70:	4605      	mov	r5, r0
   b4b72:	a804      	add	r0, sp, #16
   b4b74:	f005 f990 	bl	b9e98 <_ZN6StringD1Ev>
   b4b78:	b1cd      	cbz	r5, b4bae <_ZN7TestLib5beginE6String+0xc2>
        TCsetup();
   b4b7a:	4620      	mov	r0, r4
   b4b7c:	f7ff fdcc 	bl	b4718 <_ZN7TestLib7TCsetupEv>
	selfPointer = this;
   b4b80:	4b12      	ldr	r3, [pc, #72]	; (b4bcc <_ZN7TestLib5beginE6String+0xe0>)
    SDsetup();
   b4b82:	4620      	mov	r0, r4
	selfPointer = this;
   b4b84:	601c      	str	r4, [r3, #0]
    SDsetup();
   b4b86:	f7ff fcc3 	bl	b4510 <_ZN7TestLib7SDsetupEv>
    clockTest();
   b4b8a:	4620      	mov	r0, r4
   b4b8c:	f7ff ff10 	bl	b49b0 <_ZN7TestLib9clockTestEv>
    m_dateTime = dateTime;
   b4b90:	4b0f      	ldr	r3, [pc, #60]	; (b4bd0 <_ZN7TestLib5beginE6String+0xe4>)
   b4b92:	4a10      	ldr	r2, [pc, #64]	; (b4bd4 <_ZN7TestLib5beginE6String+0xe8>)
   b4b94:	601a      	str	r2, [r3, #0]
    batTest();
   b4b96:	4620      	mov	r0, r4
   b4b98:	f7ff ff7e 	bl	b4a98 <_ZN7TestLib7batTestEv>
    blinkGood();
   b4b9c:	4620      	mov	r0, r4
   b4b9e:	f7ff fea1 	bl	b48e4 <_ZN7TestLib9blinkGoodEv>
    String id = System.deviceID();
   b4ba2:	4668      	mov	r0, sp
   b4ba4:	f005 f978 	bl	b9e98 <_ZN6StringD1Ev>
}
   b4ba8:	2001      	movs	r0, #1
   b4baa:	b008      	add	sp, #32
   b4bac:	bd70      	pop	{r4, r5, r6, pc}
        Serial.println("Set up for soil moisture and rain gauge");
   b4bae:	f005 fbbd 	bl	ba32c <_Z16_fetch_usbserialv>
   b4bb2:	4909      	ldr	r1, [pc, #36]	; (b4bd8 <_ZN7TestLib5beginE6String+0xec>)
   b4bb4:	f004 fee9 	bl	b998a <_ZN5Print7printlnEPKc>
   b4bb8:	e7e2      	b.n	b4b80 <_ZN7TestLib5beginE6String+0x94>
   b4bba:	bf00      	nop
   b4bbc:	000bc2e5 	.word	0x000bc2e5
   b4bc0:	2003e6ac 	.word	0x2003e6ac
   b4bc4:	000bc2f9 	.word	0x000bc2f9
   b4bc8:	000bc0cb 	.word	0x000bc0cb
   b4bcc:	2003dc9c 	.word	0x2003dc9c
   b4bd0:	2003e684 	.word	0x2003e684
   b4bd4:	000b4191 	.word	0x000b4191
   b4bd8:	000bc307 	.word	0x000bc307

000b4bdc <_ZN7TestLib14getOnBoardValsEv>:
{   
   b4bdc:	b570      	push	{r4, r5, r6, lr}
   b4bde:	b08a      	sub	sp, #40	; 0x28
   b4be0:	4604      	mov	r4, r0
    float BatVoltage = getBatVoltage(); //Get battery voltage, Include voltage divider in math
   b4be2:	4608      	mov	r0, r1
   b4be4:	9101      	str	r1, [sp, #4]
   b4be6:	f7ff ff43 	bl	b4a70 <_ZN7TestLib13getBatVoltageEv>
    LogTimeDate = getTime();
   b4bea:	9901      	ldr	r1, [sp, #4]
    float BatVoltage = getBatVoltage(); //Get battery voltage, Include voltage divider in math
   b4bec:	ed8d 0a00 	vstr	s0, [sp]
    LogTimeDate = getTime();
   b4bf0:	f201 45ac 	addw	r5, r1, #1196	; 0x4ac
   b4bf4:	a806      	add	r0, sp, #24
   b4bf6:	f7ff fe89 	bl	b490c <_ZN7TestLib7getTimeEv>
   b4bfa:	a906      	add	r1, sp, #24
   b4bfc:	4628      	mov	r0, r5
   b4bfe:	f005 f9ec 	bl	b9fda <_ZN6StringaSEOS_>
    return LogTimeDate + "," + String(BatVoltage) + ",";
   b4c02:	4e13      	ldr	r6, [pc, #76]	; (b4c50 <_ZN7TestLib14getOnBoardValsEv+0x74>)
    LogTimeDate = getTime();
   b4c04:	a806      	add	r0, sp, #24
   b4c06:	f005 f947 	bl	b9e98 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4c0a:	4629      	mov	r1, r5
   b4c0c:	a802      	add	r0, sp, #8
   b4c0e:	f005 f9d9 	bl	b9fc4 <_ZN6StringC1ERKS_>
    return LogTimeDate + "," + String(BatVoltage) + ",";
   b4c12:	4631      	mov	r1, r6
   b4c14:	a802      	add	r0, sp, #8
   b4c16:	f005 fa4b 	bl	ba0b0 <_ZplRK15StringSumHelperPKc>
   b4c1a:	ed9d 0a00 	vldr	s0, [sp]
   b4c1e:	4605      	mov	r5, r0
   b4c20:	2106      	movs	r1, #6
   b4c22:	a806      	add	r0, sp, #24
   b4c24:	f005 f9f3 	bl	ba00e <_ZN6StringC1Efi>
   b4c28:	a906      	add	r1, sp, #24
   b4c2a:	4628      	mov	r0, r5
   b4c2c:	f005 fa34 	bl	ba098 <_ZplRK15StringSumHelperRK6String>
   b4c30:	4631      	mov	r1, r6
   b4c32:	f005 fa3d 	bl	ba0b0 <_ZplRK15StringSumHelperPKc>
   b4c36:	4601      	mov	r1, r0
   b4c38:	4620      	mov	r0, r4
   b4c3a:	f005 f9c3 	bl	b9fc4 <_ZN6StringC1ERKS_>
   b4c3e:	a806      	add	r0, sp, #24
   b4c40:	f005 f92a 	bl	b9e98 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4c44:	a802      	add	r0, sp, #8
   b4c46:	f005 f927 	bl	b9e98 <_ZN6StringD1Ev>
}
   b4c4a:	4620      	mov	r0, r4
   b4c4c:	b00a      	add	sp, #40	; 0x28
   b4c4e:	bd70      	pop	{r4, r5, r6, pc}
   b4c50:	000bc32f 	.word	0x000bc32f

000b4c54 <_ZN7TestLib12getTCvoltageEv>:

double TestLib::getTCvoltage() 
{
   b4c54:	b570      	push	{r4, r5, r6, lr}
   b4c56:	4604      	mov	r4, r0
    Serial.print("ADC: "); Serial.print(mcp.readADC() * 2); Serial.println(" uV");
   b4c58:	f005 fb68 	bl	ba32c <_Z16_fetch_usbserialv>
   b4c5c:	4912      	ldr	r1, [pc, #72]	; (b4ca8 <_ZN7TestLib12getTCvoltageEv+0x54>)
   b4c5e:	f004 fe81 	bl	b9964 <_ZN5Print5printEPKc>
   b4c62:	f005 fb63 	bl	ba32c <_Z16_fetch_usbserialv>
   b4c66:	f504 6591 	add.w	r5, r4, #1160	; 0x488
   b4c6a:	4606      	mov	r6, r0
   b4c6c:	4628      	mov	r0, r5
   b4c6e:	f000 fed1 	bl	b5a14 <_ZN16Adafruit_MCP96007readADCEv>
size_t Print::print(T n, int base)
   b4c72:	220a      	movs	r2, #10
   b4c74:	0041      	lsls	r1, r0, #1
   b4c76:	4630      	mov	r0, r6
   b4c78:	f7ff fa5c 	bl	b4134 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>
   b4c7c:	f005 fb56 	bl	ba32c <_Z16_fetch_usbserialv>
   b4c80:	490a      	ldr	r1, [pc, #40]	; (b4cac <_ZN7TestLib12getTCvoltageEv+0x58>)
   b4c82:	f004 fe82 	bl	b998a <_ZN5Print7printlnEPKc>
    if (!(mcp.readThermocouple() == NAN)) {
   b4c86:	4628      	mov	r0, r5
   b4c88:	f000 fe8a 	bl	b59a0 <_ZN16Adafruit_MCP960016readThermocoupleEv>
        TCvoltage = mcp.readADC() * 2;
   b4c8c:	4628      	mov	r0, r5
   b4c8e:	f000 fec1 	bl	b5a14 <_ZN16Adafruit_MCP96007readADCEv>
   b4c92:	0040      	lsls	r0, r0, #1
   b4c94:	f006 fa72 	bl	bb17c <__aeabi_i2d>
   b4c98:	f504 649c 	add.w	r4, r4, #1248	; 0x4e0
   b4c9c:	e9c4 0100 	strd	r0, r1, [r4]
   b4ca0:	ec41 0b10 	vmov	d0, r0, r1
    }
    return TCvoltage;
}
   b4ca4:	bd70      	pop	{r4, r5, r6, pc}
   b4ca6:	bf00      	nop
   b4ca8:	000bc331 	.word	0x000bc331
   b4cac:	000bc337 	.word	0x000bc337

000b4cb0 <_ZN7TestLib14getSoilvoltageEv>:

double TestLib::getSoilvoltage() 
{
   b4cb0:	b510      	push	{r4, lr}
    pinMode(A1, INPUT);
   b4cb2:	2100      	movs	r1, #0
{
   b4cb4:	4604      	mov	r4, r0
    pinMode(A1, INPUT);
   b4cb6:	2012      	movs	r0, #18
   b4cb8:	f005 fcac 	bl	ba614 <pinMode>
    Soilvoltage = analogRead(A1) * (3.3 / 4096); 
   b4cbc:	2012      	movs	r0, #18
   b4cbe:	f005 fcd3 	bl	ba668 <analogRead>
   b4cc2:	f006 fa5b 	bl	bb17c <__aeabi_i2d>
   b4cc6:	a30d      	add	r3, pc, #52	; (adr r3, b4cfc <_ZN7TestLib14getSoilvoltageEv+0x4c>)
   b4cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ccc:	f006 fac0 	bl	bb250 <__aeabi_dmul>
   b4cd0:	f504 649e 	add.w	r4, r4, #1264	; 0x4f0
   b4cd4:	e944 0102 	strd	r0, r1, [r4, #-8]
    Serial.print("Soil moisture [V]: ");
   b4cd8:	f005 fb28 	bl	ba32c <_Z16_fetch_usbserialv>
   b4cdc:	4906      	ldr	r1, [pc, #24]	; (b4cf8 <_ZN7TestLib14getSoilvoltageEv+0x48>)
   b4cde:	f004 fe41 	bl	b9964 <_ZN5Print5printEPKc>
    Serial.println(Soilvoltage);
   b4ce2:	f005 fb23 	bl	ba32c <_Z16_fetch_usbserialv>
   b4ce6:	ed14 0b02 	vldr	d0, [r4, #-8]
   b4cea:	2102      	movs	r1, #2
   b4cec:	f004 ff4f 	bl	b9b8e <_ZN5Print7printlnEdi>
    
    return Soilvoltage;
}
   b4cf0:	ed14 0b02 	vldr	d0, [r4, #-8]
   b4cf4:	bd10      	pop	{r4, pc}
   b4cf6:	bf00      	nop
   b4cf8:	000bc33b 	.word	0x000bc33b
   b4cfc:	66666666 	.word	0x66666666
   b4d00:	3f4a6666 	.word	0x3f4a6666

000b4d04 <_ZN7TestLib8dirsetupEv>:
// 	if(Per < 0) return 0;  //Do not allow return of non-sensical values
// 	if(Per > 100) return 100;  //Is this appropriate? Float voltage could be higher than specified and still be correct
// 	return Per;
// }

void TestLib::dirsetup(){
   b4d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return &m_vwd;
   b4d06:	f500 6788 	add.w	r7, r0, #1088	; 0x440
    return vwd()->exists(path);
   b4d0a:	4919      	ldr	r1, [pc, #100]	; (b4d70 <_ZN7TestLib8dirsetupEv+0x6c>)
   b4d0c:	4604      	mov	r4, r0
    return &m_vwd;
   b4d0e:	1d05      	adds	r5, r0, #4
    return vwd()->exists(path);
   b4d10:	4638      	mov	r0, r7
   b4d12:	f7ff fad9 	bl	b42c8 <_ZN7FatFile6existsEPKc>
    if (!SD.exists("Particle")) {
   b4d16:	4606      	mov	r6, r0
   b4d18:	bb40      	cbnz	r0, b4d6c <_ZN7TestLib8dirsetupEv+0x68>
        SD.mkdir("Particle");
   b4d1a:	4915      	ldr	r1, [pc, #84]	; (b4d70 <_ZN7TestLib8dirsetupEv+0x6c>)
   b4d1c:	2201      	movs	r2, #1
   b4d1e:	4628      	mov	r0, r5
   b4d20:	f7ff fa1b 	bl	b415a <_ZN13FatFileSystem5mkdirEPKcb.isra.0>
        SD.chdir("Particle");
   b4d24:	4632      	mov	r2, r6
   b4d26:	4912      	ldr	r1, [pc, #72]	; (b4d70 <_ZN7TestLib8dirsetupEv+0x6c>)
   b4d28:	4628      	mov	r0, r5
   b4d2a:	f7ff fae7 	bl	b42fc <_ZN13FatFileSystem5chdirEPKcb.isra.0>
   b4d2e:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
   b4d32:	4638      	mov	r0, r7
   b4d34:	f7ff fac8 	bl	b42c8 <_ZN7FatFile6existsEPKc>
        if (!SD.exists(SN)) {
   b4d38:	4606      	mov	r6, r0
   b4d3a:	b9b8      	cbnz	r0, b4d6c <_ZN7TestLib8dirsetupEv+0x68>
            SD.mkdir(SN);
   b4d3c:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
   b4d40:	2201      	movs	r2, #1
   b4d42:	4628      	mov	r0, r5
   b4d44:	f7ff fa09 	bl	b415a <_ZN13FatFileSystem5mkdirEPKcb.isra.0>
            SD.chdir(SN);
   b4d48:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
   b4d4c:	4628      	mov	r0, r5
   b4d4e:	4632      	mov	r2, r6
   b4d50:	f7ff fad4 	bl	b42fc <_ZN13FatFileSystem5chdirEPKcb.isra.0>
   b4d54:	4907      	ldr	r1, [pc, #28]	; (b4d74 <_ZN7TestLib8dirsetupEv+0x70>)
   b4d56:	4638      	mov	r0, r7
   b4d58:	f7ff fab6 	bl	b42c8 <_ZN7FatFile6existsEPKc>
            if (!SD.exists("Logs")) {
   b4d5c:	b930      	cbnz	r0, b4d6c <_ZN7TestLib8dirsetupEv+0x68>
                SD.mkdir("Logs");
   b4d5e:	4628      	mov	r0, r5
   b4d60:	4904      	ldr	r1, [pc, #16]	; (b4d74 <_ZN7TestLib8dirsetupEv+0x70>)
            }
    }   
    } 
}
   b4d62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                SD.mkdir("Logs");
   b4d66:	2201      	movs	r2, #1
   b4d68:	f7ff b9f7 	b.w	b415a <_ZN13FatFileSystem5mkdirEPKcb.isra.0>
}
   b4d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4d6e:	bf00      	nop
   b4d70:	000bc34f 	.word	0x000bc34f
   b4d74:	000bc38e 	.word	0x000bc38e

000b4d78 <_ZN7TestLib6logStrE6String>:
    logStr(Header); //DEBUG!
    // logStr("Time [UTC], PresOB [mBar], RH_OB [%], TempOB [C], Temp RTC [C], Bat [V], " + Header); //Log concatonated header (for new loggers)
}

int TestLib::logStr(String val)
{
   b4d78:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4d7a:	b08f      	sub	sp, #60	; 0x3c
   b4d7c:	4606      	mov	r6, r0
   b4d7e:	460d      	mov	r5, r1
    Serial.print("We are in this folder: ");
   b4d80:	f005 fad4 	bl	ba32c <_Z16_fetch_usbserialv>
   b4d84:	4920      	ldr	r1, [pc, #128]	; (b4e08 <_ZN7TestLib6logStrE6String+0x90>)
   b4d86:	f004 fded 	bl	b9964 <_ZN5Print5printEPKc>
    Serial.println(SD.ls());
   b4d8a:	f005 facf 	bl	ba32c <_Z16_fetch_usbserialv>
   b4d8e:	4604      	mov	r4, r0
    return ls(&Serial, flags);
   b4d90:	f005 facc 	bl	ba32c <_Z16_fetch_usbserialv>
    return &m_vwd;
   b4d94:	f506 6788 	add.w	r7, r6, #1088	; 0x440
    return vwd()->ls(pr, flags);
   b4d98:	2300      	movs	r3, #0
   b4d9a:	461a      	mov	r2, r3
    return ls(&Serial, flags);
   b4d9c:	4601      	mov	r1, r0
    return vwd()->ls(pr, flags);
   b4d9e:	4638      	mov	r0, r7
   b4da0:	f002 fa2f 	bl	b7202 <_ZN7FatFile2lsEP5Printhh>
        return printNumber(val, base) + t;
   b4da4:	220a      	movs	r2, #10
   b4da6:	4601      	mov	r1, r0
   b4da8:	4620      	mov	r0, r4
   b4daa:	f004 fdfa 	bl	b99a2 <_ZN5Print11printNumberEmh>
        n += println();
   b4dae:	4620      	mov	r0, r4
   b4db0:	f004 fddf 	bl	b9972 <_ZN5Print7printlnEv>
    Serial.println(val); //Echo to serial monitor
   b4db4:	f005 faba 	bl	ba32c <_Z16_fetch_usbserialv>
   b4db8:	6829      	ldr	r1, [r5, #0]
   b4dba:	f004 fde6 	bl	b998a <_ZN5Print7printlnEPKc>
   b4dbe:	2400      	movs	r4, #0
   b4dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4dc4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   b4dc8:	4b10      	ldr	r3, [pc, #64]	; (b4e0c <_ZN7TestLib6logStrE6String+0x94>)
   b4dca:	9301      	str	r3, [sp, #4]
    tmpFile.open(vwd(), path, oflag);
   b4dcc:	f506 62a2 	add.w	r2, r6, #1296	; 0x510
   b4dd0:	f244 2302 	movw	r3, #16898	; 0x4202
   b4dd4:	4639      	mov	r1, r7
   b4dd6:	a805      	add	r0, sp, #20
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4dd8:	9405      	str	r4, [sp, #20]
   b4dda:	f001 fb88 	bl	b64ee <_ZN7FatFile4openEPS_PKci>
	// SD.chdir(SN);  //Move into specific numbered sub folder
	// SD.chdir("Logs"); //Move into the logs sub-folder
	File DataFile = SD.open(FileNameC, FILE_WRITE);

	// if the file is available, write to it:
	if (DataFile) {
   b4dde:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b4de2:	b14b      	cbz	r3, b4df8 <_ZN7TestLib6logStrE6String+0x80>
		DataFile.println(val);
   b4de4:	6829      	ldr	r1, [r5, #0]
   b4de6:	a801      	add	r0, sp, #4
   b4de8:	f004 fdcf 	bl	b998a <_ZN5Print7printlnEPKc>
        DataFile.close();
   b4dec:	a805      	add	r0, sp, #20
   b4dee:	f001 fb77 	bl	b64e0 <_ZN7FatFile5closeEv>
	    return 0;
   b4df2:	4620      	mov	r0, r4
        Serial.println("Print Error");
	    return -1;
	}

	// DataFile.close();
}
   b4df4:	b00f      	add	sp, #60	; 0x3c
   b4df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Serial.println("Print Error");
   b4df8:	f005 fa98 	bl	ba32c <_Z16_fetch_usbserialv>
   b4dfc:	4904      	ldr	r1, [pc, #16]	; (b4e10 <_ZN7TestLib6logStrE6String+0x98>)
   b4dfe:	f004 fdc4 	bl	b998a <_ZN5Print7printlnEPKc>
	    return -1;
   b4e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4e06:	e7f5      	b.n	b4df4 <_ZN7TestLib6logStrE6String+0x7c>
   b4e08:	000bc358 	.word	0x000bc358
   b4e0c:	000bc3cc 	.word	0x000bc3cc
   b4e10:	000bc370 	.word	0x000bc370

000b4e14 <_ZN7TestLib12addDataPointEPF6StringvE>:
{
   b4e14:	b530      	push	{r4, r5, lr}
   b4e16:	b08d      	sub	sp, #52	; 0x34
   b4e18:	4604      	mov	r4, r0
   b4e1a:	460d      	mov	r5, r1
	String data = "";
   b4e1c:	4668      	mov	r0, sp
   b4e1e:	4919      	ldr	r1, [pc, #100]	; (b4e84 <_ZN7TestLib12addDataPointEPF6StringvE+0x70>)
   b4e20:	f005 f885 	bl	b9f2e <_ZN6StringC1EPK19__FlashStringHelper>
	data = (*update)(); //Run external update function
   b4e24:	a808      	add	r0, sp, #32
   b4e26:	47a8      	blx	r5
   b4e28:	a908      	add	r1, sp, #32
   b4e2a:	4668      	mov	r0, sp
   b4e2c:	f005 f8d5 	bl	b9fda <_ZN6StringaSEOS_>
   b4e30:	a808      	add	r0, sp, #32
   b4e32:	f005 f831 	bl	b9e98 <_ZN6StringD1Ev>
	data = getOnBoardVals() + data; //Prepend on board readings
   b4e36:	4621      	mov	r1, r4
   b4e38:	a804      	add	r0, sp, #16
   b4e3a:	f7ff fecf 	bl	b4bdc <_ZN7TestLib14getOnBoardValsEv>
	StringSumHelper(const String &s) : String(s) {}
   b4e3e:	a904      	add	r1, sp, #16
   b4e40:	a808      	add	r0, sp, #32
   b4e42:	f005 f8bf 	bl	b9fc4 <_ZN6StringC1ERKS_>
   b4e46:	4669      	mov	r1, sp
   b4e48:	a808      	add	r0, sp, #32
   b4e4a:	f005 f925 	bl	ba098 <_ZplRK15StringSumHelperRK6String>
   b4e4e:	4601      	mov	r1, r0
   b4e50:	4668      	mov	r0, sp
   b4e52:	f005 f8a8 	bl	b9fa6 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b4e56:	a808      	add	r0, sp, #32
   b4e58:	f005 f81e 	bl	b9e98 <_ZN6StringD1Ev>
   b4e5c:	a804      	add	r0, sp, #16
   b4e5e:	f005 f81b 	bl	b9e98 <_ZN6StringD1Ev>
	logStr(data);
   b4e62:	4669      	mov	r1, sp
   b4e64:	a808      	add	r0, sp, #32
   b4e66:	f005 f8ad 	bl	b9fc4 <_ZN6StringC1ERKS_>
   b4e6a:	a908      	add	r1, sp, #32
   b4e6c:	4620      	mov	r0, r4
   b4e6e:	f7ff ff83 	bl	b4d78 <_ZN7TestLib6logStrE6String>
   b4e72:	a808      	add	r0, sp, #32
   b4e74:	f005 f810 	bl	b9e98 <_ZN6StringD1Ev>
	String data = "";
   b4e78:	4668      	mov	r0, sp
   b4e7a:	f005 f80d 	bl	b9e98 <_ZN6StringD1Ev>
}
   b4e7e:	b00d      	add	sp, #52	; 0x34
   b4e80:	bd30      	pop	{r4, r5, pc}
   b4e82:	bf00      	nop
   b4e84:	000bc2e4 	.word	0x000bc2e4

000b4e88 <_ZN7TestLib11initLogFileEv>:
{
   b4e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4e8c:	4604      	mov	r4, r0
   b4e8e:	b095      	sub	sp, #84	; 0x54
    dirsetup();
   b4e90:	f7ff ff38 	bl	b4d04 <_ZN7TestLib8dirsetupEv>
	SD.chdir("Particle");  //Move into northern widget folder from root
   b4e94:	1d20      	adds	r0, r4, #4
   b4e96:	4952      	ldr	r1, [pc, #328]	; (b4fe0 <_ZN7TestLib11initLogFileEv+0x158>)
   b4e98:	9001      	str	r0, [sp, #4]
   b4e9a:	2200      	movs	r2, #0
   b4e9c:	f7ff fa2e 	bl	b42fc <_ZN13FatFileSystem5chdirEPKcb.isra.0>
    SD.chdir(SN);  //Move into specific numbered sub folder    
   b4ea0:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
   b4ea4:	9801      	ldr	r0, [sp, #4]
      sprintf(NumCharArray, "%05d", FileNum);
   b4ea6:	f8df 814c 	ldr.w	r8, [pc, #332]	; b4ff4 <_ZN7TestLib11initLogFileEv+0x16c>
      (FileName + String(NumCharArray) + ".txt").toCharArray(FileNameC, 13);
   b4eaa:	4f4e      	ldr	r7, [pc, #312]	; (b4fe4 <_ZN7TestLib11initLogFileEv+0x15c>)
    SD.chdir(SN);  //Move into specific numbered sub folder    
   b4eac:	2200      	movs	r2, #0
   b4eae:	f7ff fa25 	bl	b42fc <_ZN13FatFileSystem5chdirEPKcb.isra.0>
    SD.chdir("Logs"); //Move into the logs sub-folder
   b4eb2:	2200      	movs	r2, #0
   b4eb4:	494c      	ldr	r1, [pc, #304]	; (b4fe8 <_ZN7TestLib11initLogFileEv+0x160>)
   b4eb6:	9801      	ldr	r0, [sp, #4]
   b4eb8:	f7ff fa20 	bl	b42fc <_ZN13FatFileSystem5chdirEPKcb.isra.0>
    Serial.println("Supposed to be in Logs");
   b4ebc:	f005 fa36 	bl	ba32c <_Z16_fetch_usbserialv>
   b4ec0:	494a      	ldr	r1, [pc, #296]	; (b4fec <_ZN7TestLib11initLogFileEv+0x164>)
   b4ec2:	f004 fd62 	bl	b998a <_ZN5Print7printlnEPKc>
    String FileName = "Log";
   b4ec6:	494a      	ldr	r1, [pc, #296]	; (b4ff0 <_ZN7TestLib11initLogFileEv+0x168>)
   b4ec8:	a804      	add	r0, sp, #16
   b4eca:	f005 f830 	bl	b9f2e <_ZN6StringC1EPK19__FlashStringHelper>
    sprintf(NumCharArray, "%05d", FileNum);
   b4ece:	2201      	movs	r2, #1
   b4ed0:	4948      	ldr	r1, [pc, #288]	; (b4ff4 <_ZN7TestLib11initLogFileEv+0x16c>)
   b4ed2:	a802      	add	r0, sp, #8
   b4ed4:	f003 f99c 	bl	b8210 <sprintf>
	StringSumHelper(const String &s) : String(s) {}
   b4ed8:	a904      	add	r1, sp, #16
   b4eda:	a810      	add	r0, sp, #64	; 0x40
   b4edc:	f005 f872 	bl	b9fc4 <_ZN6StringC1ERKS_>
    (FileName + String(NumCharArray) + ".txt").toCharArray(FileNameC, 13);
   b4ee0:	a902      	add	r1, sp, #8
   b4ee2:	a80c      	add	r0, sp, #48	; 0x30
   b4ee4:	f005 f823 	bl	b9f2e <_ZN6StringC1EPK19__FlashStringHelper>
   b4ee8:	a90c      	add	r1, sp, #48	; 0x30
   b4eea:	a810      	add	r0, sp, #64	; 0x40
   b4eec:	f005 f8d4 	bl	ba098 <_ZplRK15StringSumHelperRK6String>
   b4ef0:	f504 65a2 	add.w	r5, r4, #1296	; 0x510
   b4ef4:	493b      	ldr	r1, [pc, #236]	; (b4fe4 <_ZN7TestLib11initLogFileEv+0x15c>)
   b4ef6:	f005 f8db 	bl	ba0b0 <_ZplRK15StringSumHelperPKc>
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4efa:	2300      	movs	r3, #0
   b4efc:	220d      	movs	r2, #13
   b4efe:	4629      	mov	r1, r5
   b4f00:	f005 f8fd 	bl	ba0fe <_ZNK6String8getBytesEPhjj>
   b4f04:	a80c      	add	r0, sp, #48	; 0x30
   b4f06:	f004 ffc7 	bl	b9e98 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4f0a:	a810      	add	r0, sp, #64	; 0x40
   b4f0c:	f004 ffc4 	bl	b9e98 <_ZN6StringD1Ev>
    int FileNum = 1;
   b4f10:	2601      	movs	r6, #1
    return &m_vwd;
   b4f12:	f504 6988 	add.w	r9, r4, #1088	; 0x440
    return vwd()->exists(path);
   b4f16:	4629      	mov	r1, r5
   b4f18:	4648      	mov	r0, r9
   b4f1a:	f7ff f9d5 	bl	b42c8 <_ZN7FatFile6existsEPKc>
    while(SD.exists(FileNameC)) {
   b4f1e:	b300      	cbz	r0, b4f62 <_ZN7TestLib11initLogFileEv+0xda>
      FileNum += 1;
   b4f20:	3601      	adds	r6, #1
      sprintf(NumCharArray, "%05d", FileNum);
   b4f22:	4632      	mov	r2, r6
   b4f24:	4641      	mov	r1, r8
   b4f26:	a802      	add	r0, sp, #8
   b4f28:	f003 f972 	bl	b8210 <sprintf>
	StringSumHelper(const String &s) : String(s) {}
   b4f2c:	a904      	add	r1, sp, #16
   b4f2e:	a810      	add	r0, sp, #64	; 0x40
   b4f30:	f005 f848 	bl	b9fc4 <_ZN6StringC1ERKS_>
      (FileName + String(NumCharArray) + ".txt").toCharArray(FileNameC, 13);
   b4f34:	a902      	add	r1, sp, #8
   b4f36:	a80c      	add	r0, sp, #48	; 0x30
   b4f38:	f004 fff9 	bl	b9f2e <_ZN6StringC1EPK19__FlashStringHelper>
   b4f3c:	a90c      	add	r1, sp, #48	; 0x30
   b4f3e:	a810      	add	r0, sp, #64	; 0x40
   b4f40:	f005 f8aa 	bl	ba098 <_ZplRK15StringSumHelperRK6String>
   b4f44:	4639      	mov	r1, r7
   b4f46:	f005 f8b3 	bl	ba0b0 <_ZplRK15StringSumHelperPKc>
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4f4a:	2300      	movs	r3, #0
   b4f4c:	220d      	movs	r2, #13
   b4f4e:	4629      	mov	r1, r5
   b4f50:	f005 f8d5 	bl	ba0fe <_ZNK6String8getBytesEPhjj>
   b4f54:	a80c      	add	r0, sp, #48	; 0x30
   b4f56:	f004 ff9f 	bl	b9e98 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4f5a:	a810      	add	r0, sp, #64	; 0x40
   b4f5c:	f004 ff9c 	bl	b9e98 <_ZN6StringD1Ev>
    while(SD.exists(FileNameC)) {
   b4f60:	e7d9      	b.n	b4f16 <_ZN7TestLib11initLogFileEv+0x8e>
    Serial.print("FileNameC: ");
   b4f62:	f005 f9e3 	bl	ba32c <_Z16_fetch_usbserialv>
   b4f66:	4924      	ldr	r1, [pc, #144]	; (b4ff8 <_ZN7TestLib11initLogFileEv+0x170>)
   b4f68:	f004 fcfc 	bl	b9964 <_ZN5Print5printEPKc>
    Serial.println(FileNameC);
   b4f6c:	f005 f9de 	bl	ba32c <_Z16_fetch_usbserialv>
   b4f70:	4629      	mov	r1, r5
   b4f72:	f004 fd0a 	bl	b998a <_ZN5Print7printlnEPKc>
	StringSumHelper(const char *p) : String(p) {}
   b4f76:	4921      	ldr	r1, [pc, #132]	; (b4ffc <_ZN7TestLib11initLogFileEv+0x174>)
   b4f78:	a810      	add	r0, sp, #64	; 0x40
   b4f7a:	f004 ffd8 	bl	b9f2e <_ZN6StringC1EPK19__FlashStringHelper>
   b4f7e:	a80c      	add	r0, sp, #48	; 0x30
   b4f80:	f003 f8be 	bl	b8100 <spark_deviceID>
  	String InitData = " SN = " + System.deviceID();  //Make string of onboard characteristics
   b4f84:	a90c      	add	r1, sp, #48	; 0x30
   b4f86:	a810      	add	r0, sp, #64	; 0x40
   b4f88:	f005 f886 	bl	ba098 <_ZplRK15StringSumHelperRK6String>
   b4f8c:	4601      	mov	r1, r0
   b4f8e:	a808      	add	r0, sp, #32
   b4f90:	f005 f818 	bl	b9fc4 <_ZN6StringC1ERKS_>
   b4f94:	a80c      	add	r0, sp, #48	; 0x30
   b4f96:	f004 ff7f 	bl	b9e98 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4f9a:	a810      	add	r0, sp, #64	; 0x40
   b4f9c:	f004 ff7c 	bl	b9e98 <_ZN6StringD1Ev>
  	logStr(InitData); //Log as first line of data
   b4fa0:	a908      	add	r1, sp, #32
   b4fa2:	a810      	add	r0, sp, #64	; 0x40
   b4fa4:	f005 f80e 	bl	b9fc4 <_ZN6StringC1ERKS_>
   b4fa8:	a910      	add	r1, sp, #64	; 0x40
   b4faa:	4620      	mov	r0, r4
   b4fac:	f7ff fee4 	bl	b4d78 <_ZN7TestLib6logStrE6String>
   b4fb0:	a810      	add	r0, sp, #64	; 0x40
   b4fb2:	f004 ff71 	bl	b9e98 <_ZN6StringD1Ev>
    logStr(Header); //DEBUG!
   b4fb6:	f204 419c 	addw	r1, r4, #1180	; 0x49c
   b4fba:	a810      	add	r0, sp, #64	; 0x40
   b4fbc:	f005 f802 	bl	b9fc4 <_ZN6StringC1ERKS_>
   b4fc0:	a910      	add	r1, sp, #64	; 0x40
   b4fc2:	4620      	mov	r0, r4
   b4fc4:	f7ff fed8 	bl	b4d78 <_ZN7TestLib6logStrE6String>
   b4fc8:	a810      	add	r0, sp, #64	; 0x40
   b4fca:	f004 ff65 	bl	b9e98 <_ZN6StringD1Ev>
  	String InitData = " SN = " + System.deviceID();  //Make string of onboard characteristics
   b4fce:	a808      	add	r0, sp, #32
   b4fd0:	f004 ff62 	bl	b9e98 <_ZN6StringD1Ev>
    String FileName = "Log";
   b4fd4:	a804      	add	r0, sp, #16
   b4fd6:	f004 ff5f 	bl	b9e98 <_ZN6StringD1Ev>
}
   b4fda:	b015      	add	sp, #84	; 0x54
   b4fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4fe0:	000bc34f 	.word	0x000bc34f
   b4fe4:	000bc135 	.word	0x000bc135
   b4fe8:	000bc38e 	.word	0x000bc38e
   b4fec:	000bc37c 	.word	0x000bc37c
   b4ff0:	000bc393 	.word	0x000bc393
   b4ff4:	000bc397 	.word	0x000bc397
   b4ff8:	000bc39c 	.word	0x000bc39c
   b4ffc:	000bc3a8 	.word	0x000bc3a8

000b5000 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b5000:	4770      	bx	lr

000b5002 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b5002:	6a00      	ldr	r0, [r0, #32]
   b5004:	6803      	ldr	r3, [r0, #0]
   b5006:	68db      	ldr	r3, [r3, #12]
   b5008:	4718      	bx	r3
	...

000b500c <_Z4calcv>:
    Log.info("SD reading");
  }
  delay(5000);
  }

String calc(){
   b500c:	b530      	push	{r4, r5, lr}
   b500e:	b085      	sub	sp, #20
  double volt;
  if (Header.substring(0, 2) == "TC") {
   b5010:	2302      	movs	r3, #2
   b5012:	2200      	movs	r2, #0
   b5014:	490d      	ldr	r1, [pc, #52]	; (b504c <_Z4calcv+0x40>)
String calc(){
   b5016:	4604      	mov	r4, r0
  if (Header.substring(0, 2) == "TC") {
   b5018:	4668      	mov	r0, sp
   b501a:	f005 f889 	bl	ba130 <_ZNK6String9substringEjj>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b501e:	490c      	ldr	r1, [pc, #48]	; (b5050 <_Z4calcv+0x44>)
   b5020:	4668      	mov	r0, sp
   b5022:	f005 f85a 	bl	ba0da <_ZNK6String6equalsEPKc>
   b5026:	4605      	mov	r5, r0
   b5028:	4668      	mov	r0, sp
   b502a:	f004 ff35 	bl	b9e98 <_ZN6StringD1Ev>
    volt = MyLogger.getTCvoltage();
   b502e:	4809      	ldr	r0, [pc, #36]	; (b5054 <_Z4calcv+0x48>)
  if (Header.substring(0, 2) == "TC") {
   b5030:	b145      	cbz	r5, b5044 <_Z4calcv+0x38>
    volt = MyLogger.getTCvoltage();
   b5032:	f7ff fe0f 	bl	b4c54 <_ZN7TestLib12getTCvoltageEv>
  } else {
    volt = MyLogger.getSoilvoltage();
  }
  return String(volt);
   b5036:	2106      	movs	r1, #6
   b5038:	4620      	mov	r0, r4
   b503a:	f005 f802 	bl	ba042 <_ZN6StringC1Edi>
}
   b503e:	4620      	mov	r0, r4
   b5040:	b005      	add	sp, #20
   b5042:	bd30      	pop	{r4, r5, pc}
    volt = MyLogger.getSoilvoltage();
   b5044:	f7ff fe34 	bl	b4cb0 <_ZN7TestLib14getSoilvoltageEv>
   b5048:	e7f5      	b.n	b5036 <_Z4calcv+0x2a>
   b504a:	bf00      	nop
   b504c:	2003dca0 	.word	0x2003dca0
   b5050:	000bc0cb 	.word	0x000bc0cb
   b5054:	2003dcb0 	.word	0x2003dcb0

000b5058 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b5058:	4b0a      	ldr	r3, [pc, #40]	; (b5084 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b505a:	b510      	push	{r4, lr}
   b505c:	4604      	mov	r4, r0
   b505e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b5060:	f003 fda0 	bl	b8ba4 <_ZN5spark10LogManager8instanceEv>
   b5064:	4621      	mov	r1, r4
   b5066:	f003 ffd8 	bl	b901a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b506a:	f005 f95f 	bl	ba32c <_Z16_fetch_usbserialv>
   b506e:	f005 f94d 	bl	ba30c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b5072:	4620      	mov	r0, r4
   b5074:	4b04      	ldr	r3, [pc, #16]	; (b5088 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b5076:	f840 3b04 	str.w	r3, [r0], #4
   b507a:	f003 fe69 	bl	b8d50 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b507e:	4620      	mov	r0, r4
   b5080:	bd10      	pop	{r4, pc}
   b5082:	bf00      	nop
   b5084:	000bc458 	.word	0x000bc458
   b5088:	000bc440 	.word	0x000bc440

000b508c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b508c:	b510      	push	{r4, lr}
   b508e:	4604      	mov	r4, r0
    }
   b5090:	f7ff ffe2 	bl	b5058 <_ZN5spark16SerialLogHandlerD1Ev>
   b5094:	4620      	mov	r0, r4
   b5096:	2124      	movs	r1, #36	; 0x24
   b5098:	f7ff f801 	bl	b409e <_ZdlPvj>
   b509c:	4620      	mov	r0, r4
   b509e:	bd10      	pop	{r4, pc}

000b50a0 <setup>:
void setup() {
   b50a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Header = "TC [uV]";
   b50a2:	4c0e      	ldr	r4, [pc, #56]	; (b50dc <setup+0x3c>)
   b50a4:	490e      	ldr	r1, [pc, #56]	; (b50e0 <setup+0x40>)
   b50a6:	4620      	mov	r0, r4
   b50a8:	f004 ff9f 	bl	b9fea <_ZN6StringaSEPKc>
  MyLogger.begin(Header); //Pass header info to logger
   b50ac:	4621      	mov	r1, r4
   b50ae:	4c0d      	ldr	r4, [pc, #52]	; (b50e4 <setup+0x44>)
   b50b0:	4668      	mov	r0, sp
   b50b2:	f004 ff87 	bl	b9fc4 <_ZN6StringC1ERKS_>
   b50b6:	4669      	mov	r1, sp
   b50b8:	4620      	mov	r0, r4
   b50ba:	f7ff fd17 	bl	b4aec <_ZN7TestLib5beginE6String>
   b50be:	4668      	mov	r0, sp
   b50c0:	f004 feea 	bl	b9e98 <_ZN6StringD1Ev>
  Serial.println("Finish initialization!"); // DEBUG!!
   b50c4:	f005 f932 	bl	ba32c <_Z16_fetch_usbserialv>
   b50c8:	4907      	ldr	r1, [pc, #28]	; (b50e8 <setup+0x48>)
   b50ca:	f004 fc5e 	bl	b998a <_ZN5Print7printlnEPKc>
  MyLogger.initLogFile();
   b50ce:	4620      	mov	r0, r4
}
   b50d0:	b004      	add	sp, #16
   b50d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MyLogger.initLogFile();
   b50d6:	f7ff bed7 	b.w	b4e88 <_ZN7TestLib11initLogFileEv>
   b50da:	bf00      	nop
   b50dc:	2003dca0 	.word	0x2003dca0
   b50e0:	000bc3fc 	.word	0x000bc3fc
   b50e4:	2003dcb0 	.word	0x2003dcb0
   b50e8:	000bc404 	.word	0x000bc404

000b50ec <_Z7heatingv>:

void heating(){
   b50ec:	b508      	push	{r3, lr}
  pinMode(A0, OUTPUT);
   b50ee:	2101      	movs	r1, #1
   b50f0:	2013      	movs	r0, #19
   b50f2:	f005 fa8f 	bl	ba614 <pinMode>
  analogWrite(A0, 100, 500);
   b50f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  analogWrite(A0, 100, 500);
   b50fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   b50fe:	2164      	movs	r1, #100	; 0x64
   b5100:	2013      	movs	r0, #19
   b5102:	f005 bac8 	b.w	ba696 <_Z11analogWritetmm>
	...

000b5108 <loop>:
void loop() {
   b5108:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  MyLogger.addDataPoint(calc);
   b510a:	4923      	ldr	r1, [pc, #140]	; (b5198 <loop+0x90>)
   b510c:	4823      	ldr	r0, [pc, #140]	; (b519c <loop+0x94>)
   b510e:	4c24      	ldr	r4, [pc, #144]	; (b51a0 <loop+0x98>)
   b5110:	f7ff fe80 	bl	b4e14 <_ZN7TestLib12addDataPointEPF6StringvE>
  heating();
   b5114:	f7ff ffea 	bl	b50ec <_Z7heatingv>
   b5118:	4b22      	ldr	r3, [pc, #136]	; (b51a4 <loop+0x9c>)
   b511a:	9300      	str	r3, [sp, #0]
   b511c:	2300      	movs	r3, #0
   b511e:	f88d 3004 	strb.w	r3, [sp, #4]
   b5122:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   b5126:	4b20      	ldr	r3, [pc, #128]	; (b51a8 <loop+0xa0>)
   b5128:	9302      	str	r3, [sp, #8]
   b512a:	2501      	movs	r5, #1
   b512c:	466b      	mov	r3, sp
   b512e:	2205      	movs	r2, #5
   b5130:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   b5134:	4630      	mov	r0, r6
   b5136:	f8ad 500c 	strh.w	r5, [sp, #12]
   b513a:	f002 fbb3 	bl	b78a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b513e:	b348      	cbz	r0, b5194 <loop+0x8c>
    vwd()->close();
   b5140:	f204 403c 	addw	r0, r4, #1084	; 0x43c
    m_blockDev = blockDev;
   b5144:	6026      	str	r6, [r4, #0]
    vwd()->close();
   b5146:	f001 f9cb 	bl	b64e0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b514a:	4629      	mov	r1, r5
   b514c:	4620      	mov	r0, r4
   b514e:	f002 fa09 	bl	b7564 <_ZN9FatVolume4initEh>
   b5152:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   b5156:	4601      	mov	r1, r0
   b5158:	b1b8      	cbz	r0, b518a <loop+0x82>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b515a:	4911      	ldr	r1, [pc, #68]	; (b51a0 <loop+0x98>)
   b515c:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   b5160:	f000 ffb6 	bl	b60d0 <_ZN7FatFile8openRootEP9FatVolume>
   b5164:	b1b0      	cbz	r0, b5194 <loop+0x8c>
    if (!dir || !dir->isDir()) {
   b5166:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b516a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b516e:	d011      	beq.n	b5194 <loop+0x8c>
    m_cwd = dir;
   b5170:	4b0e      	ldr	r3, [pc, #56]	; (b51ac <loop+0xa4>)
    Log.info("SD reading");
   b5172:	490f      	ldr	r1, [pc, #60]	; (b51b0 <loop+0xa8>)
   b5174:	601d      	str	r5, [r3, #0]
    Log.info("SD not reading");
   b5176:	480f      	ldr	r0, [pc, #60]	; (b51b4 <loop+0xac>)
   b5178:	f7ff f876 	bl	b4268 <_ZNK5spark6Logger4infoEPKcz>
  delay(5000);
   b517c:	f241 3088 	movw	r0, #5000	; 0x1388
  }
   b5180:	b004      	add	sp, #16
   b5182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(5000);
   b5186:	f003 b86b 	b.w	b8260 <delay>
    return (part ? init(part) : init(1) || init(0))
   b518a:	4620      	mov	r0, r4
   b518c:	f002 f9ea 	bl	b7564 <_ZN9FatVolume4initEh>
   b5190:	2800      	cmp	r0, #0
   b5192:	d1e2      	bne.n	b515a <loop+0x52>
    Log.info("SD not reading");
   b5194:	4908      	ldr	r1, [pc, #32]	; (b51b8 <loop+0xb0>)
   b5196:	e7ee      	b.n	b5176 <loop+0x6e>
   b5198:	000b500d 	.word	0x000b500d
   b519c:	2003dcb0 	.word	0x2003dcb0
   b51a0:	2003e1d0 	.word	0x2003e1d0
   b51a4:	000bc3b8 	.word	0x000bc3b8
   b51a8:	02faf080 	.word	0x02faf080
   b51ac:	2003e688 	.word	0x2003e688
   b51b0:	000bc41b 	.word	0x000bc41b
   b51b4:	2003e6ac 	.word	0x2003e6ac
   b51b8:	000bc426 	.word	0x000bc426

000b51bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b51bc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b51be:	e9d0 5300 	ldrd	r5, r3, [r0]
   b51c2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b51c4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b51c6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b51ca:	42ae      	cmp	r6, r5
   b51cc:	d004      	beq.n	b51d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b51ce:	4628      	mov	r0, r5
   b51d0:	f004 fe62 	bl	b9e98 <_ZN6StringD1Ev>
   b51d4:	3514      	adds	r5, #20
   b51d6:	e7f8      	b.n	b51ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b51d8:	6820      	ldr	r0, [r4, #0]
   b51da:	f003 f809 	bl	b81f0 <free>
    AllocatorT::free(data_);
}
   b51de:	4620      	mov	r0, r4
   b51e0:	bd70      	pop	{r4, r5, r6, pc}

000b51e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b51e2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b51e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b51e6:	4604      	mov	r4, r0
   b51e8:	460d      	mov	r5, r1
   b51ea:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b51ec:	d916      	bls.n	b521c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b51ee:	4290      	cmp	r0, r2
   b51f0:	d215      	bcs.n	b521e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b51f2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b51f6:	1a75      	subs	r5, r6, r1
   b51f8:	f1a1 0714 	sub.w	r7, r1, #20
   b51fc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b51fe:	42b7      	cmp	r7, r6
   b5200:	d01c      	beq.n	b523c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5202:	b12c      	cbz	r4, b5210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5204:	4631      	mov	r1, r6
   b5206:	4620      	mov	r0, r4
   b5208:	f004 fec2 	bl	b9f90 <_ZN6StringC1EOS_>
   b520c:	7c33      	ldrb	r3, [r6, #16]
   b520e:	7423      	strb	r3, [r4, #16]
   b5210:	4630      	mov	r0, r6
   b5212:	f004 fe41 	bl	b9e98 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5216:	3e14      	subs	r6, #20
   b5218:	3c14      	subs	r4, #20
   b521a:	e7f0      	b.n	b51fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b521c:	d00e      	beq.n	b523c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b521e:	42b5      	cmp	r5, r6
   b5220:	d00c      	beq.n	b523c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5222:	b12c      	cbz	r4, b5230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5224:	4629      	mov	r1, r5
   b5226:	4620      	mov	r0, r4
   b5228:	f004 feb2 	bl	b9f90 <_ZN6StringC1EOS_>
   b522c:	7c2b      	ldrb	r3, [r5, #16]
   b522e:	7423      	strb	r3, [r4, #16]
   b5230:	4628      	mov	r0, r5
   b5232:	f004 fe31 	bl	b9e98 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5236:	3514      	adds	r5, #20
   b5238:	3414      	adds	r4, #20
   b523a:	e7f0      	b.n	b521e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b523c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b523e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b523e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5242:	2300      	movs	r3, #0
   b5244:	e9c0 3300 	strd	r3, r3, [r0]
   b5248:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b524a:	684f      	ldr	r7, [r1, #4]
   b524c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b524e:	4604      	mov	r4, r0
   b5250:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5252:	dd23      	ble.n	b529c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b5254:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5258:	fb08 f007 	mul.w	r0, r8, r7
   b525c:	f002 ffc0 	bl	b81e0 <malloc>
            if (!d) {
   b5260:	4605      	mov	r5, r0
   b5262:	b1d8      	cbz	r0, b529c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b5264:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5268:	fb08 1202 	mla	r2, r8, r2, r1
   b526c:	f7ff ffb9 	bl	b51e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5270:	6820      	ldr	r0, [r4, #0]
   b5272:	f002 ffbd 	bl	b81f0 <free>
        data_ = d;
   b5276:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5278:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b527a:	e9d6 7300 	ldrd	r7, r3, [r6]
   b527e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b5282:	45b8      	cmp	r8, r7
   b5284:	d008      	beq.n	b5298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b5286:	4639      	mov	r1, r7
   b5288:	4628      	mov	r0, r5
   b528a:	f004 fe9b 	bl	b9fc4 <_ZN6StringC1ERKS_>
   b528e:	7c3b      	ldrb	r3, [r7, #16]
   b5290:	742b      	strb	r3, [r5, #16]
   b5292:	3714      	adds	r7, #20
   b5294:	3514      	adds	r5, #20
   b5296:	e7f4      	b.n	b5282 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b5298:	6873      	ldr	r3, [r6, #4]
   b529a:	6063      	str	r3, [r4, #4]
}
   b529c:	4620      	mov	r0, r4
   b529e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b52a4 <_GLOBAL__sub_I_SystemMode>:
   b52a4:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   b52a6:	4b3b      	ldr	r3, [pc, #236]	; (b5394 <_GLOBAL__sub_I_SystemMode+0xf0>)
    SleepResult() {}
   b52a8:	4a3b      	ldr	r2, [pc, #236]	; (b5398 <_GLOBAL__sub_I_SystemMode+0xf4>)
   b52aa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b52ac:	2400      	movs	r4, #0
   b52ae:	b08e      	sub	sp, #56	; 0x38
   b52b0:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b52b4:	2003      	movs	r0, #3
   b52b6:	f002 feef 	bl	b8098 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b52ba:	4621      	mov	r1, r4
   b52bc:	2001      	movs	r0, #1
   b52be:	f002 fefb 	bl	b80b8 <system_thread_set_state>
        capacity_(0) {
   b52c2:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b52c6:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b52c8:	f005 f830 	bl	ba32c <_Z16_fetch_usbserialv>
   b52cc:	a902      	add	r1, sp, #8
   b52ce:	4606      	mov	r6, r0
   b52d0:	a805      	add	r0, sp, #20
        filter_(level, filters) {
   b52d2:	4d32      	ldr	r5, [pc, #200]	; (b539c <_GLOBAL__sub_I_SystemMode+0xf8>)
   b52d4:	f7ff ffb3 	bl	b523e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b52d8:	a905      	add	r1, sp, #20
   b52da:	a808      	add	r0, sp, #32
   b52dc:	f7ff ffaf 	bl	b523e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b52e0:	4b2f      	ldr	r3, [pc, #188]	; (b53a0 <_GLOBAL__sub_I_SystemMode+0xfc>)
   b52e2:	602b      	str	r3, [r5, #0]
   b52e4:	a908      	add	r1, sp, #32
   b52e6:	a80b      	add	r0, sp, #44	; 0x2c
   b52e8:	f7ff ffa9 	bl	b523e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b52ec:	aa0b      	add	r2, sp, #44	; 0x2c
   b52ee:	211e      	movs	r1, #30
   b52f0:	1d28      	adds	r0, r5, #4
   b52f2:	f003 ff75 	bl	b91e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b52f6:	a80b      	add	r0, sp, #44	; 0x2c
   b52f8:	f7ff ff60 	bl	b51bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b52fc:	a808      	add	r0, sp, #32
   b52fe:	f7ff ff5d 	bl	b51bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5302:	4b28      	ldr	r3, [pc, #160]	; (b53a4 <_GLOBAL__sub_I_SystemMode+0x100>)
   b5304:	602b      	str	r3, [r5, #0]
   b5306:	622e      	str	r6, [r5, #32]
   b5308:	a805      	add	r0, sp, #20
   b530a:	f7ff ff57 	bl	b51bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b530e:	4b26      	ldr	r3, [pc, #152]	; (b53a8 <_GLOBAL__sub_I_SystemMode+0x104>)
   b5310:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b5312:	f005 f80b 	bl	ba32c <_Z16_fetch_usbserialv>
   b5316:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b531a:	f004 fff3 	bl	ba304 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b531e:	f003 fc41 	bl	b8ba4 <_ZN5spark10LogManager8instanceEv>
   b5322:	4629      	mov	r1, r5
   b5324:	f003 fe32 	bl	b8f8c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b5328:	a802      	add	r0, sp, #8
  SdFat() {
   b532a:	4d20      	ldr	r5, [pc, #128]	; (b53ac <_GLOBAL__sub_I_SystemMode+0x108>)
   b532c:	f7ff ff46 	bl	b51bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
TestLib MyLogger;
   b5330:	2101      	movs	r1, #1
   b5332:	481f      	ldr	r0, [pc, #124]	; (b53b0 <_GLOBAL__sub_I_SystemMode+0x10c>)
   b5334:	f7ff f814 	bl	b4360 <_ZN7TestLibC1Eb>
   b5338:	2364      	movs	r3, #100	; 0x64
   b533a:	f8c5 3460 	str.w	r3, [r5, #1120]	; 0x460
  {
   b533e:	4b1d      	ldr	r3, [pc, #116]	; (b53b4 <_GLOBAL__sub_I_SystemMode+0x110>)
   b5340:	606c      	str	r4, [r5, #4]
   b5342:	f8c5 443c 	str.w	r4, [r5, #1084]	; 0x43c
   b5346:	f8c5 4468 	str.w	r4, [r5, #1128]	; 0x468
   b534a:	f8c5 3470 	str.w	r3, [r5, #1136]	; 0x470
   b534e:	f8c5 4478 	str.w	r4, [r5, #1144]	; 0x478
   b5352:	f8a5 447c 	strh.w	r4, [r5, #1148]	; 0x47c
   b5356:	2301      	movs	r3, #1
   b5358:	4c17      	ldr	r4, [pc, #92]	; (b53b8 <_GLOBAL__sub_I_SystemMode+0x114>)
   b535a:	f885 3474 	strb.w	r3, [r5, #1140]	; 0x474
   b535e:	7821      	ldrb	r1, [r4, #0]
   b5360:	f3bf 8f5b 	dmb	ish
   b5364:	4019      	ands	r1, r3
   b5366:	d10b      	bne.n	b5380 <_GLOBAL__sub_I_SystemMode+0xdc>
   b5368:	4620      	mov	r0, r4
   b536a:	9101      	str	r1, [sp, #4]
   b536c:	f7fe fea4 	bl	b40b8 <__cxa_guard_acquire>
   b5370:	9901      	ldr	r1, [sp, #4]
   b5372:	b128      	cbz	r0, b5380 <_GLOBAL__sub_I_SystemMode+0xdc>
   b5374:	4811      	ldr	r0, [pc, #68]	; (b53bc <_GLOBAL__sub_I_SystemMode+0x118>)
   b5376:	f004 fc6f 	bl	b9c58 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b537a:	4620      	mov	r0, r4
   b537c:	f7fe fea1 	bl	b40c2 <__cxa_guard_release>
   b5380:	4b0e      	ldr	r3, [pc, #56]	; (b53bc <_GLOBAL__sub_I_SystemMode+0x118>)
String Header; //Information header
   b5382:	490f      	ldr	r1, [pc, #60]	; (b53c0 <_GLOBAL__sub_I_SystemMode+0x11c>)
   b5384:	480f      	ldr	r0, [pc, #60]	; (b53c4 <_GLOBAL__sub_I_SystemMode+0x120>)
   b5386:	f8c5 346c 	str.w	r3, [r5, #1132]	; 0x46c
   b538a:	b00e      	add	sp, #56	; 0x38
   b538c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
String Header; //Information header
   b5390:	f004 bdcd 	b.w	b9f2e <_ZN6StringC1EPK19__FlashStringHelper>
   b5394:	2003e654 	.word	0x2003e654
   b5398:	ffff0000 	.word	0xffff0000
   b539c:	2003e660 	.word	0x2003e660
   b53a0:	000bc440 	.word	0x000bc440
   b53a4:	000bc584 	.word	0x000bc584
   b53a8:	000bc458 	.word	0x000bc458
   b53ac:	2003e1d0 	.word	0x2003e1d0
   b53b0:	2003dcb0 	.word	0x2003dcb0
   b53b4:	000bc3b8 	.word	0x000bc3b8
   b53b8:	2003dc90 	.word	0x2003dc90
   b53bc:	2003dc94 	.word	0x2003dc94
   b53c0:	000bc2e4 	.word	0x000bc2e4
   b53c4:	2003dca0 	.word	0x2003dca0

000b53c8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   b53c8:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   b53ca:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
   b53cc:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   b53d0:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   b53d2:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   b53d6:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   b53da:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   b53dc:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   b53de:	7382      	strb	r2, [r0, #14]
  _width = width;
   b53e0:	7303      	strb	r3, [r0, #12]
}
   b53e2:	bd30      	pop	{r4, r5, pc}

000b53e4 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b53e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b53e6:	4604      	mov	r4, r0

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b53e8:	8940      	ldrh	r0, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b53ea:	7aa3      	ldrb	r3, [r4, #10]
   b53ec:	f88d 300c 	strb.w	r3, [sp, #12]
   b53f0:	0a00      	lsrs	r0, r0, #8
   b53f2:	f88d 000d 	strb.w	r0, [sp, #13]

  if (_i2cdevice) {
   b53f6:	6820      	ldr	r0, [r4, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b53f8:	460d      	mov	r5, r1
   b53fa:	4616      	mov	r6, r2
  if (_i2cdevice) {
   b53fc:	b140      	cbz	r0, b5410 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2c>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b53fe:	7b63      	ldrb	r3, [r4, #13]
   b5400:	9301      	str	r3, [sp, #4]
   b5402:	ab03      	add	r3, sp, #12
   b5404:	9300      	str	r3, [sp, #0]
   b5406:	2301      	movs	r3, #1
   b5408:	f000 f8e2 	bl	b55d0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   b540c:	b004      	add	sp, #16
   b540e:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   b5410:	6860      	ldr	r0, [r4, #4]
   b5412:	2800      	cmp	r0, #0
   b5414:	d0fa      	beq.n	b540c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b5416:	7a22      	ldrb	r2, [r4, #8]
   b5418:	b922      	cbnz	r2, b5424 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x40>
      addrbuffer[0] &= ~0x80;
   b541a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   b541e:	f88d 300c 	strb.w	r3, [sp, #12]
   b5422:	e003      	b.n	b542c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x48>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b5424:	2a02      	cmp	r2, #2
   b5426:	d009      	beq.n	b543c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x58>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b5428:	2a01      	cmp	r2, #1
   b542a:	d00a      	beq.n	b5442 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5e>
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b542c:	7b63      	ldrb	r3, [r4, #13]
   b542e:	9300      	str	r3, [sp, #0]
   b5430:	4632      	mov	r2, r6
   b5432:	ab03      	add	r3, sp, #12
   b5434:	4629      	mov	r1, r5
   b5436:	f000 f9e8 	bl	b580a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b543a:	e7e7      	b.n	b540c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
      addrbuffer[0] |= 0x80;
   b543c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b5440:	e7ed      	b.n	b541e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x3a>
      addrbuffer[0] &= ~0x80;
   b5442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   b5446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   b544a:	e7e8      	b.n	b541e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x3a>

000b544c <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   b544c:	b4f0      	push	{r4, r5, r6, r7}
   b544e:	460b      	mov	r3, r1
  if (numbytes == 0) {
   b5450:	b902      	cbnz	r2, b5454 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   b5452:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   b5454:	2a04      	cmp	r2, #4
   b5456:	d814      	bhi.n	b5482 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   b5458:	f100 050f 	add.w	r5, r0, #15
   b545c:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   b545e:	1884      	adds	r4, r0, r2
   b5460:	4629      	mov	r1, r5
   b5462:	4284      	cmp	r4, r0
   b5464:	d009      	beq.n	b547a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   b5466:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   b5468:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   b546a:	b927      	cbnz	r7, b5476 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   b546c:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   b546e:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   b5470:	3501      	adds	r5, #1
   b5472:	3c01      	subs	r4, #1
   b5474:	e7f5      	b.n	b5462 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   b5476:	73a6      	strb	r6, [r4, #14]
   b5478:	e7f9      	b.n	b546e <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   b547a:	4620      	mov	r0, r4
}
   b547c:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   b547e:	f7ff bfb1 	b.w	b53e4 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   b5482:	2000      	movs	r0, #0
   b5484:	bcf0      	pop	{r4, r5, r6, r7}
   b5486:	4770      	bx	lr

000b5488 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b5488:	b530      	push	{r4, r5, lr}
   b548a:	460b      	mov	r3, r1
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b548c:	8941      	ldrh	r1, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b548e:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b5490:	b085      	sub	sp, #20
   b5492:	4605      	mov	r5, r0

  if (_i2cdevice) {
   b5494:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b5496:	f88d 400c 	strb.w	r4, [sp, #12]
   b549a:	0a09      	lsrs	r1, r1, #8
   b549c:	f88d 100d 	strb.w	r1, [sp, #13]
  if (_i2cdevice) {
   b54a0:	b140      	cbz	r0, b54b4 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2c>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b54a2:	2100      	movs	r1, #0
   b54a4:	e9cd 2100 	strd	r2, r1, [sp]
   b54a8:	7b6a      	ldrb	r2, [r5, #13]
   b54aa:	a903      	add	r1, sp, #12
   b54ac:	f000 f8e2 	bl	b5674 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   b54b0:	b005      	add	sp, #20
   b54b2:	bd30      	pop	{r4, r5, pc}
  if (_spidevice) {
   b54b4:	6868      	ldr	r0, [r5, #4]
   b54b6:	2800      	cmp	r0, #0
   b54b8:	d0fa      	beq.n	b54b0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x28>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b54ba:	7a29      	ldrb	r1, [r5, #8]
   b54bc:	b921      	cbnz	r1, b54c8 <_ZN23Adafruit_BusIO_Register4readEPhh+0x40>
      addrbuffer[0] |= 0x80;
   b54be:	f064 047f 	orn	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80 | 0x40;
   b54c2:	f88d 400c 	strb.w	r4, [sp, #12]
   b54c6:	e003      	b.n	b54d0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x48>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b54c8:	2902      	cmp	r1, #2
   b54ca:	d009      	beq.n	b54e0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x58>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b54cc:	2901      	cmp	r1, #1
   b54ce:	d00a      	beq.n	b54e6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b54d0:	21ff      	movs	r1, #255	; 0xff
   b54d2:	e9cd 2100 	strd	r2, r1, [sp]
   b54d6:	7b6a      	ldrb	r2, [r5, #13]
   b54d8:	a903      	add	r1, sp, #12
   b54da:	f000 f9c8 	bl	b586e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   b54de:	e7e7      	b.n	b54b0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x28>
      addrbuffer[0] &= ~0x80;
   b54e0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b54e4:	e7ed      	b.n	b54c2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x3a>
      addrbuffer[0] |= 0x80 | 0x40;
   b54e6:	f064 043f 	orn	r4, r4, #63	; 0x3f
   b54ea:	e7ea      	b.n	b54c2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x3a>

000b54ec <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   b54ec:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   b54ee:	f100 050f 	add.w	r5, r0, #15
   b54f2:	7b02      	ldrb	r2, [r0, #12]
   b54f4:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   b54f6:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   b54f8:	f7ff ffc6 	bl	b5488 <_ZN23Adafruit_BusIO_Register4readEPhh>
   b54fc:	b178      	cbz	r0, b551e <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   b54fe:	7b22      	ldrb	r2, [r4, #12]
   b5500:	4629      	mov	r1, r5
   b5502:	4422      	add	r2, r4
  uint32_t value = 0;
   b5504:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   b5506:	42a2      	cmp	r2, r4
   b5508:	d00b      	beq.n	b5522 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   b550a:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   b550c:	7ba0      	ldrb	r0, [r4, #14]
   b550e:	b920      	cbnz	r0, b551a <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   b5510:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   b5512:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   b5514:	3a01      	subs	r2, #1
   b5516:	3101      	adds	r1, #1
   b5518:	e7f5      	b.n	b5506 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   b551a:	7808      	ldrb	r0, [r1, #0]
   b551c:	e7f9      	b.n	b5512 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   b551e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b5522:	bd38      	pop	{r3, r4, r5, pc}

000b5524 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   b5524:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   b5526:	6001      	str	r1, [r0, #0]
  _bits = bits;
   b5528:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   b552a:	7143      	strb	r3, [r0, #5]
}
   b552c:	bd10      	pop	{r4, pc}

000b552e <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   b552e:	b510      	push	{r4, lr}
   b5530:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b5532:	6800      	ldr	r0, [r0, #0]
   b5534:	f7ff ffda 	bl	b54ec <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   b5538:	7922      	ldrb	r2, [r4, #4]
   b553a:	2301      	movs	r3, #1
   b553c:	4093      	lsls	r3, r2
  val >>= _shift;
   b553e:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   b5540:	3b01      	subs	r3, #1
  val >>= _shift;
   b5542:	40d0      	lsrs	r0, r2
}
   b5544:	4018      	ands	r0, r3
   b5546:	bd10      	pop	{r4, pc}

000b5548 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   b5548:	b570      	push	{r4, r5, r6, lr}
   b554a:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b554c:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   b554e:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   b5550:	f7ff ffcc 	bl	b54ec <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   b5554:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   b5556:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   b5558:	2201      	movs	r2, #1
   b555a:	409a      	lsls	r2, r3
   b555c:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   b555e:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   b5562:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   b5566:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   b5568:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   b556a:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   b556e:	4329      	orrs	r1, r5
   b5570:	7b02      	ldrb	r2, [r0, #12]
}
   b5572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   b5576:	f7ff bf69 	b.w	b544c <_ZN23Adafruit_BusIO_Register5writeEmh>

000b557a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b557a:	6042      	str	r2, [r0, #4]
  _begun = false;
   b557c:	2200      	movs	r2, #0
   b557e:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b5580:	2220      	movs	r2, #32
  _addr = addr;
   b5582:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b5584:	60c2      	str	r2, [r0, #12]
#endif
}
   b5586:	4770      	bx	lr

000b5588 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b5588:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b558a:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b558c:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b558e:	b153      	cbz	r3, b55a6 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b5590:	7821      	ldrb	r1, [r4, #0]
   b5592:	6860      	ldr	r0, [r4, #4]
   b5594:	f002 ff4c 	bl	b8430 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b5598:	6860      	ldr	r0, [r4, #4]
   b559a:	f002 ff54 	bl	b8446 <_ZN7TwoWire15endTransmissionEv>
   b559e:	fab0 f080 	clz	r0, r0
   b55a2:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b55a4:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b55a6:	2101      	movs	r1, #1
   b55a8:	f000 f803 	bl	b55b2 <_ZN18Adafruit_I2CDevice5beginEb>
   b55ac:	2800      	cmp	r0, #0
   b55ae:	d1ef      	bne.n	b5590 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b55b0:	e7f8      	b.n	b55a4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b55b2 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b55b2:	b538      	push	{r3, r4, r5, lr}
   b55b4:	4604      	mov	r4, r0
  _wire->begin();
   b55b6:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b55b8:	460d      	mov	r5, r1
  _wire->begin();
   b55ba:	f002 ff07 	bl	b83cc <_ZN7TwoWire5beginEv>
  _begun = true;
   b55be:	2001      	movs	r0, #1
   b55c0:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b55c2:	b125      	cbz	r5, b55ce <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b55c4:	4620      	mov	r0, r4
}
   b55c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b55ca:	f7ff bfdd 	b.w	b5588 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b55ce:	bd38      	pop	{r3, r4, r5, pc}

000b55d0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b55d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b55d4:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b55d8:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b55da:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b55dc:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b55de:	4432      	add	r2, r6
   b55e0:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b55e2:	4604      	mov	r4, r0
   b55e4:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b55e6:	d902      	bls.n	b55ee <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b55e8:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   b55ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b55ee:	7801      	ldrb	r1, [r0, #0]
   b55f0:	6840      	ldr	r0, [r0, #4]
   b55f2:	f002 ff1d 	bl	b8430 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b55f6:	b97e      	cbnz	r6, b5618 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b55f8:	6860      	ldr	r0, [r4, #4]
   b55fa:	6803      	ldr	r3, [r0, #0]
   b55fc:	462a      	mov	r2, r5
   b55fe:	68db      	ldr	r3, [r3, #12]
   b5600:	4641      	mov	r1, r8
   b5602:	4798      	blx	r3
   b5604:	4285      	cmp	r5, r0
   b5606:	d1ef      	bne.n	b55e8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b5608:	6860      	ldr	r0, [r4, #4]
   b560a:	4639      	mov	r1, r7
   b560c:	f002 ff17 	bl	b843e <_ZN7TwoWire15endTransmissionEh>
   b5610:	fab0 f080 	clz	r0, r0
   b5614:	0940      	lsrs	r0, r0, #5
   b5616:	e7e8      	b.n	b55ea <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b5618:	f1b9 0f00 	cmp.w	r9, #0
   b561c:	d0ec      	beq.n	b55f8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b561e:	6860      	ldr	r0, [r4, #4]
   b5620:	6803      	ldr	r3, [r0, #0]
   b5622:	4632      	mov	r2, r6
   b5624:	68db      	ldr	r3, [r3, #12]
   b5626:	4649      	mov	r1, r9
   b5628:	4798      	blx	r3
   b562a:	4286      	cmp	r6, r0
   b562c:	d1dc      	bne.n	b55e8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b562e:	e7e3      	b.n	b55f8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b5630 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b5630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5634:	4615      	mov	r5, r2
  if (len > maxBufferSize()) {
   b5636:	68c2      	ldr	r2, [r0, #12]
   b5638:	42aa      	cmp	r2, r5
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b563a:	4604      	mov	r4, r0
   b563c:	460e      	mov	r6, r1
  if (len > maxBufferSize()) {
   b563e:	d314      	bcc.n	b566a <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
  }

  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   b5640:	7801      	ldrb	r1, [r0, #0]
   b5642:	6840      	ldr	r0, [r0, #4]
   b5644:	b2ea      	uxtb	r2, r5
   b5646:	f002 fede 	bl	b8406 <_ZN7TwoWire11requestFromEhjh>
  if (recv != len) {
   b564a:	4285      	cmp	r5, r0
   b564c:	d10d      	bne.n	b566a <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
   b564e:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   b5650:	fa1f f887 	uxth.w	r8, r7
   b5654:	4545      	cmp	r5, r8
   b5656:	f107 0701 	add.w	r7, r7, #1
   b565a:	d909      	bls.n	b5670 <_ZN18Adafruit_I2CDevice4readEPhjb+0x40>
    buffer[i] = _wire->read();
   b565c:	6860      	ldr	r0, [r4, #4]
   b565e:	6803      	ldr	r3, [r0, #0]
   b5660:	695b      	ldr	r3, [r3, #20]
   b5662:	4798      	blx	r3
   b5664:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   b5668:	e7f2      	b.n	b5650 <_ZN18Adafruit_I2CDevice4readEPhjb+0x20>
    return false;
   b566a:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5670:	2001      	movs	r0, #1
   b5672:	e7fb      	b.n	b566c <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>

000b5674 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   b5674:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5676:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   b5678:	2300      	movs	r3, #0
   b567a:	e9cd 3300 	strd	r3, r3, [sp]
   b567e:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   b5682:	9e06      	ldr	r6, [sp, #24]
   b5684:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   b5686:	f7ff ffa3 	bl	b55d0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   b568a:	b140      	cbz	r0, b569e <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   b568c:	2301      	movs	r3, #1
   b568e:	4632      	mov	r2, r6
   b5690:	4629      	mov	r1, r5
   b5692:	4620      	mov	r0, r4
}
   b5694:	b002      	add	sp, #8
   b5696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   b569a:	f7ff bfc9 	b.w	b5630 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   b569e:	b002      	add	sp, #8
   b56a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b56a4 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b56a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56a8:	4604      	mov	r4, r0
  if (_spi) {
   b56aa:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b56ac:	b085      	sub	sp, #20
   b56ae:	460d      	mov	r5, r1
  if (_spi) {
   b56b0:	b140      	cbz	r0, b56c4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   b56b2:	2300      	movs	r3, #0
   b56b4:	9300      	str	r3, [sp, #0]
   b56b6:	4613      	mov	r3, r2
   b56b8:	460a      	mov	r2, r1
   b56ba:	f004 fb79 	bl	b9db0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   b56be:	b005      	add	sp, #20
   b56c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   b56c4:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b56c6:	68a0      	ldr	r0, [r4, #8]
   b56c8:	4f48      	ldr	r7, [pc, #288]	; (b57ec <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   b56ca:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   b56ce:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b56d0:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   b56d2:	bf0c      	ite	eq
   b56d4:	f04f 0b01 	moveq.w	fp, #1
   b56d8:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b56dc:	ea1b 0f03 	tst.w	fp, r3
   b56e0:	eb01 0302 	add.w	r3, r1, r2
   b56e4:	bf0c      	ite	eq
   b56e6:	f04f 0901 	moveq.w	r9, #1
   b56ea:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b56ee:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   b56f0:	9303      	str	r3, [sp, #12]
   b56f2:	9b03      	ldr	r3, [sp, #12]
   b56f4:	42ab      	cmp	r3, r5
   b56f6:	d0e2      	beq.n	b56be <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   b56f8:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   b56fc:	465e      	mov	r6, fp
    uint8_t reply = 0;
   b56fe:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   b5702:	b117      	cbz	r7, b570a <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5704:	4638      	mov	r0, r7
   b5706:	f002 fb07 	bl	b7d18 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   b570a:	7b63      	ldrb	r3, [r4, #13]
   b570c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   b5710:	d141      	bne.n	b5796 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b5712:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b5716:	1c5a      	adds	r2, r3, #1
   b5718:	d00f      	beq.n	b573a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   b571a:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b571e:	bf14      	ite	ne
   b5720:	2301      	movne	r3, #1
   b5722:	2300      	moveq	r3, #0
   b5724:	454b      	cmp	r3, r9
   b5726:	d008      	beq.n	b573a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   b5728:	6963      	ldr	r3, [r4, #20]
   b572a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b572c:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   b572e:	2900      	cmp	r1, #0
   b5730:	d02c      	beq.n	b578c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   b5732:	4302      	orrs	r2, r0
   b5734:	601a      	str	r2, [r3, #0]
   b5736:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   b573a:	69a1      	ldr	r1, [r4, #24]
   b573c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b573e:	680a      	ldr	r2, [r1, #0]
   b5740:	4313      	orrs	r3, r2
   b5742:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b5744:	b117      	cbz	r7, b574c <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   b5746:	4638      	mov	r0, r7
   b5748:	f002 fae6 	bl	b7d18 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   b574c:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b5750:	3301      	adds	r3, #1
   b5752:	d006      	beq.n	b5762 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   b5754:	69e3      	ldr	r3, [r4, #28]
   b5756:	681a      	ldr	r2, [r3, #0]
   b5758:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b575a:	421a      	tst	r2, r3
            reply |= b;
   b575c:	bf18      	it	ne
   b575e:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   b5762:	69a1      	ldr	r1, [r4, #24]
   b5764:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5766:	680a      	ldr	r2, [r1, #0]
   b5768:	ea22 0303 	bic.w	r3, r2, r3
   b576c:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   b576e:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b5772:	3301      	adds	r3, #1
        buffer[i] = reply;
   b5774:	bf18      	it	ne
   b5776:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   b577a:	7b23      	ldrb	r3, [r4, #12]
   b577c:	2b00      	cmp	r3, #0
   b577e:	d132      	bne.n	b57e6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   b5780:	0076      	lsls	r6, r6, #1
   b5782:	b2f6      	uxtb	r6, r6
   b5784:	2e00      	cmp	r6, #0
   b5786:	d1bc      	bne.n	b5702 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   b5788:	3501      	adds	r5, #1
   b578a:	e7b2      	b.n	b56f2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   b578c:	ea22 0200 	bic.w	r2, r2, r0
   b5790:	601a      	str	r2, [r3, #0]
   b5792:	4689      	mov	r9, r1
   b5794:	e7d1      	b.n	b573a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   b5796:	69a1      	ldr	r1, [r4, #24]
   b5798:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b579a:	680a      	ldr	r2, [r1, #0]
   b579c:	4313      	orrs	r3, r2
   b579e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b57a0:	b117      	cbz	r7, b57a8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   b57a2:	4638      	mov	r0, r7
   b57a4:	f002 fab8 	bl	b7d18 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   b57a8:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b57ac:	3301      	adds	r3, #1
   b57ae:	d008      	beq.n	b57c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   b57b0:	6963      	ldr	r3, [r4, #20]
   b57b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b57b4:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   b57b6:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   b57ba:	bf14      	ite	ne
   b57bc:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   b57be:	438a      	biceq	r2, r1
   b57c0:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   b57c2:	69a1      	ldr	r1, [r4, #24]
   b57c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b57c6:	680a      	ldr	r2, [r1, #0]
   b57c8:	ea22 0303 	bic.w	r3, r2, r3
   b57cc:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   b57ce:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b57d2:	3301      	adds	r3, #1
   b57d4:	d0cb      	beq.n	b576e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   b57d6:	69e3      	ldr	r3, [r4, #28]
   b57d8:	681a      	ldr	r2, [r3, #0]
   b57da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b57dc:	421a      	tst	r2, r3
            reply |= b;
   b57de:	bf18      	it	ne
   b57e0:	ea46 0808 	orrne.w	r8, r6, r8
   b57e4:	e7c3      	b.n	b576e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   b57e6:	0876      	lsrs	r6, r6, #1
   b57e8:	e7cc      	b.n	b5784 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   b57ea:	bf00      	nop
   b57ec:	0007a120 	.word	0x0007a120

000b57f0 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   b57f0:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   b57f2:	2201      	movs	r2, #1
  uint8_t data = send;
   b57f4:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   b57f8:	f10d 0107 	add.w	r1, sp, #7
   b57fc:	f7ff ff52 	bl	b56a4 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   b5800:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b5804:	b003      	add	sp, #12
   b5806:	f85d fb04 	ldr.w	pc, [sp], #4

000b580a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b580a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b580e:	4604      	mov	r4, r0
  if (_spi) {
   b5810:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b5812:	460e      	mov	r6, r1
   b5814:	4617      	mov	r7, r2
   b5816:	461d      	mov	r5, r3
  if (_spi) {
   b5818:	b110      	cbz	r0, b5820 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   b581a:	6861      	ldr	r1, [r4, #4]
   b581c:	f004 fa54 	bl	b9cc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   b5820:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b5824:	2100      	movs	r1, #0
   b5826:	b280      	uxth	r0, r0
   b5828:	f004 ff05 	bl	ba636 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   b582c:	9b06      	ldr	r3, [sp, #24]
   b582e:	eb05 0803 	add.w	r8, r5, r3
   b5832:	4545      	cmp	r5, r8
   b5834:	d108      	bne.n	b5848 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   b5836:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   b5838:	42b7      	cmp	r7, r6
   b583a:	d00b      	beq.n	b5854 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   b583c:	f816 1b01 	ldrb.w	r1, [r6], #1
   b5840:	4620      	mov	r0, r4
   b5842:	f7ff ffd5 	bl	b57f0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   b5846:	e7f7      	b.n	b5838 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   b5848:	f815 1b01 	ldrb.w	r1, [r5], #1
   b584c:	4620      	mov	r0, r4
   b584e:	f7ff ffcf 	bl	b57f0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   b5852:	e7ee      	b.n	b5832 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   b5854:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b5858:	2101      	movs	r1, #1
   b585a:	b280      	uxth	r0, r0
   b585c:	f004 feeb 	bl	ba636 <digitalWrite>

  if (_spi) {
   b5860:	6820      	ldr	r0, [r4, #0]
   b5862:	b108      	cbz	r0, b5868 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   b5864:	f004 fa16 	bl	b9c94 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b5868:	2001      	movs	r0, #1
   b586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b586e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   b586e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5872:	4604      	mov	r4, r0
  if (_spi) {
   b5874:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   b5876:	f89d 801c 	ldrb.w	r8, [sp, #28]
   b587a:	460e      	mov	r6, r1
   b587c:	4617      	mov	r7, r2
   b587e:	461d      	mov	r5, r3
  if (_spi) {
   b5880:	b110      	cbz	r0, b5888 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   b5882:	6861      	ldr	r1, [r4, #4]
   b5884:	f004 fa20 	bl	b9cc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   b5888:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b588c:	2100      	movs	r1, #0
   b588e:	b280      	uxth	r0, r0
   b5890:	f004 fed1 	bl	ba636 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   b5894:	4437      	add	r7, r6
   b5896:	42be      	cmp	r6, r7
   b5898:	d10a      	bne.n	b58b0 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   b589a:	9b06      	ldr	r3, [sp, #24]
   b589c:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   b589e:	42ae      	cmp	r6, r5
   b58a0:	d00c      	beq.n	b58bc <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   b58a2:	4641      	mov	r1, r8
   b58a4:	4620      	mov	r0, r4
   b58a6:	f7ff ffa3 	bl	b57f0 <_ZN18Adafruit_SPIDevice8transferEh>
   b58aa:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   b58ae:	e7f6      	b.n	b589e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   b58b0:	f816 1b01 	ldrb.w	r1, [r6], #1
   b58b4:	4620      	mov	r0, r4
   b58b6:	f7ff ff9b 	bl	b57f0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   b58ba:	e7ec      	b.n	b5896 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   b58bc:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b58c0:	2101      	movs	r1, #1
   b58c2:	b280      	uxth	r0, r0
   b58c4:	f004 feb7 	bl	ba636 <digitalWrite>

  if (_spi) {
   b58c8:	6820      	ldr	r0, [r4, #0]
   b58ca:	b108      	cbz	r0, b58d0 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   b58cc:	f004 f9e2 	bl	b9c94 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   b58d0:	2001      	movs	r0, #1
   b58d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b58d6 <_ZN16Adafruit_MCP9600C1Ev>:
/**************************************************************************/
/*!
    @brief  Instantiates a new MCP9600 class
*/
/**************************************************************************/
Adafruit_MCP9600::Adafruit_MCP9600() { _device_id = 0x40; }
   b58d6:	2340      	movs	r3, #64	; 0x40
   b58d8:	7003      	strb	r3, [r0, #0]
   b58da:	4770      	bx	lr

000b58dc <_ZN16Adafruit_MCP96006enableEb>:
/*!
    @brief  Whether to have the sensor enabled and working or in sleep mode
    @param  flag True to be in awake mode, False for sleep mode
*/
/**************************************************************************/
void Adafruit_MCP9600::enable(bool flag) {
   b58dc:	b513      	push	{r0, r1, r4, lr}
  // define the status bits
  Adafruit_I2CRegisterBits status =
      Adafruit_I2CRegisterBits(_config_reg, 2, 0); // # bits, bit_shift
   b58de:	2300      	movs	r3, #0
void Adafruit_MCP9600::enable(bool flag) {
   b58e0:	460c      	mov	r4, r1
      Adafruit_I2CRegisterBits(_config_reg, 2, 0); // # bits, bit_shift
   b58e2:	2202      	movs	r2, #2
   b58e4:	6881      	ldr	r1, [r0, #8]
   b58e6:	4668      	mov	r0, sp
   b58e8:	f7ff fe1c 	bl	b5524 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  if (!flag) { // sleep mode
   b58ec:	b92c      	cbnz	r4, b58fa <_ZN16Adafruit_MCP96006enableEb+0x1e>
    status.write(0x01);
   b58ee:	2101      	movs	r1, #1
  } else {
    status.write(0x00);
   b58f0:	4668      	mov	r0, sp
   b58f2:	f7ff fe29 	bl	b5548 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  }
}
   b58f6:	b002      	add	sp, #8
   b58f8:	bd10      	pop	{r4, pc}
    status.write(0x00);
   b58fa:	2100      	movs	r1, #0
   b58fc:	e7f8      	b.n	b58f0 <_ZN16Adafruit_MCP96006enableEb+0x14>

000b58fe <_ZN16Adafruit_MCP96005beginEhP7TwoWire>:
boolean Adafruit_MCP9600::begin(uint8_t i2c_addr, TwoWire *theWire) {
   b58fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5900:	4604      	mov	r4, r0
   b5902:	b08b      	sub	sp, #44	; 0x2c
  i2c_dev = new Adafruit_I2CDevice(i2c_addr, theWire);
   b5904:	2010      	movs	r0, #16
boolean Adafruit_MCP9600::begin(uint8_t i2c_addr, TwoWire *theWire) {
   b5906:	e9cd 2102 	strd	r2, r1, [sp, #8]
  i2c_dev = new Adafruit_I2CDevice(i2c_addr, theWire);
   b590a:	f7fe fbc4 	bl	b4096 <_Znwj>
   b590e:	4605      	mov	r5, r0
   b5910:	b118      	cbz	r0, b591a <_ZN16Adafruit_MCP96005beginEhP7TwoWire+0x1c>
   b5912:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b5916:	f7ff fe30 	bl	b557a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b591a:	6065      	str	r5, [r4, #4]
  if (!i2c_dev->begin(false)) { // *dont scan!*
   b591c:	4628      	mov	r0, r5
   b591e:	2100      	movs	r1, #0
   b5920:	f7ff fe47 	bl	b55b2 <_ZN18Adafruit_I2CDevice5beginEb>
   b5924:	4605      	mov	r5, r0
   b5926:	b330      	cbz	r0, b5976 <_ZN16Adafruit_MCP96005beginEhP7TwoWire+0x78>
      Adafruit_I2CRegister(i2c_dev, MCP9600_DEVICEID, 2, MSBFIRST);
   b5928:	2701      	movs	r7, #1
   b592a:	2302      	movs	r3, #2
   b592c:	6861      	ldr	r1, [r4, #4]
   b592e:	2220      	movs	r2, #32
   b5930:	e9cd 7700 	strd	r7, r7, [sp]
   b5934:	a804      	add	r0, sp, #16
   b5936:	f7ff fd47 	bl	b53c8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if ((id_reg.read() >> 8) != _device_id) {
   b593a:	a804      	add	r0, sp, #16
   b593c:	f7ff fdd6 	bl	b54ec <_ZN23Adafruit_BusIO_Register4readEv>
   b5940:	7823      	ldrb	r3, [r4, #0]
   b5942:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
   b5946:	d119      	bne.n	b597c <_ZN16Adafruit_MCP96005beginEhP7TwoWire+0x7e>
  _config_reg = new Adafruit_I2CRegister(i2c_dev, MCP9600_DEVICECONFIG);
   b5948:	2018      	movs	r0, #24
   b594a:	f7fe fba4 	bl	b4096 <_Znwj>
   b594e:	4606      	mov	r6, r0
   b5950:	b138      	cbz	r0, b5962 <_ZN16Adafruit_MCP96005beginEhP7TwoWire+0x64>
   b5952:	2300      	movs	r3, #0
   b5954:	9300      	str	r3, [sp, #0]
   b5956:	6861      	ldr	r1, [r4, #4]
   b5958:	9701      	str	r7, [sp, #4]
   b595a:	463b      	mov	r3, r7
   b595c:	2206      	movs	r2, #6
   b595e:	f7ff fd33 	bl	b53c8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  _config_reg->write(0x80);
   b5962:	2180      	movs	r1, #128	; 0x80
  _config_reg = new Adafruit_I2CRegister(i2c_dev, MCP9600_DEVICECONFIG);
   b5964:	60a6      	str	r6, [r4, #8]
  _config_reg->write(0x80);
   b5966:	2200      	movs	r2, #0
   b5968:	4630      	mov	r0, r6
   b596a:	f7ff fd6f 	bl	b544c <_ZN23Adafruit_BusIO_Register5writeEmh>
  enable(true);
   b596e:	2101      	movs	r1, #1
   b5970:	4620      	mov	r0, r4
   b5972:	f7ff ffb3 	bl	b58dc <_ZN16Adafruit_MCP96006enableEb>
}
   b5976:	4628      	mov	r0, r5
   b5978:	b00b      	add	sp, #44	; 0x2c
   b597a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
   b597c:	2500      	movs	r5, #0
   b597e:	e7fa      	b.n	b5976 <_ZN16Adafruit_MCP96005beginEhP7TwoWire+0x78>

000b5980 <_ZN16Adafruit_MCP96007enabledEv>:
/*!
    @brief  Whether the sensor is enabled and working or in sleep mode
    @returns True if in awake mode, False if in sleep mode
*/
/**************************************************************************/
bool Adafruit_MCP9600::enabled(void) {
   b5980:	b507      	push	{r0, r1, r2, lr}
  // define the status bits
  Adafruit_I2CRegisterBits status =
      Adafruit_I2CRegisterBits(_config_reg, 2, 0); // # bits, bit_shift
   b5982:	2300      	movs	r3, #0
   b5984:	6881      	ldr	r1, [r0, #8]
   b5986:	2202      	movs	r2, #2
   b5988:	4668      	mov	r0, sp
   b598a:	f7ff fdcb 	bl	b5524 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return !status.read();
   b598e:	4668      	mov	r0, sp
   b5990:	f7ff fdcd 	bl	b552e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
   b5994:	fab0 f080 	clz	r0, r0
   b5998:	0940      	lsrs	r0, r0, #5
   b599a:	b003      	add	sp, #12
   b599c:	f85d fb04 	ldr.w	pc, [sp], #4

000b59a0 <_ZN16Adafruit_MCP960016readThermocoupleEv>:
float Adafruit_MCP9600::readThermocouple(void) {
   b59a0:	b510      	push	{r4, lr}
   b59a2:	b088      	sub	sp, #32
   b59a4:	4604      	mov	r4, r0
  if (!enabled()) {
   b59a6:	f7ff ffeb 	bl	b5980 <_ZN16Adafruit_MCP96007enabledEv>
   b59aa:	b190      	cbz	r0, b59d2 <_ZN16Adafruit_MCP960016readThermocoupleEv+0x32>
      Adafruit_I2CRegister(i2c_dev, MCP9600_HOTJUNCTION, 2, MSBFIRST);
   b59ac:	2301      	movs	r3, #1
   b59ae:	e9cd 3300 	strd	r3, r3, [sp]
   b59b2:	6861      	ldr	r1, [r4, #4]
   b59b4:	2302      	movs	r3, #2
   b59b6:	2200      	movs	r2, #0
   b59b8:	a802      	add	r0, sp, #8
   b59ba:	f7ff fd05 	bl	b53c8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  int16_t therm = therm_reg.read();
   b59be:	a802      	add	r0, sp, #8
   b59c0:	f7ff fd94 	bl	b54ec <_ZN23Adafruit_BusIO_Register4readEv>
  float temp = therm;
   b59c4:	b203      	sxth	r3, r0
   b59c6:	ee00 3a10 	vmov	s0, r3
  temp *= 0.0625; // 0.0625*C per LSB!
   b59ca:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
}
   b59ce:	b008      	add	sp, #32
   b59d0:	bd10      	pop	{r4, pc}
    return NAN;
   b59d2:	ed9f 0a01 	vldr	s0, [pc, #4]	; b59d8 <_ZN16Adafruit_MCP960016readThermocoupleEv+0x38>
   b59d6:	e7fa      	b.n	b59ce <_ZN16Adafruit_MCP960016readThermocoupleEv+0x2e>
   b59d8:	7fc00000 	.word	0x7fc00000

000b59dc <_ZN16Adafruit_MCP960016setADCresolutionE11_resolution>:
    @param  resolution Can be MCP9600_ADCRESOLUTION_18,
    MCP9600_ADCRESOLUTION_16, MCP9600_ADCRESOLUTION_14,
    or MCP9600_ADCRESOLUTION_12.
*/
/**************************************************************************/
void Adafruit_MCP9600::setADCresolution(MCP9600_ADCResolution resolution) {
   b59dc:	b513      	push	{r0, r1, r4, lr}
  // define the resolution bits
  Adafruit_I2CRegisterBits res =
      Adafruit_I2CRegisterBits(_config_reg, 2, 5); // # bits, bit_shift
   b59de:	2305      	movs	r3, #5
void Adafruit_MCP9600::setADCresolution(MCP9600_ADCResolution resolution) {
   b59e0:	460c      	mov	r4, r1
      Adafruit_I2CRegisterBits(_config_reg, 2, 5); // # bits, bit_shift
   b59e2:	2202      	movs	r2, #2
   b59e4:	6881      	ldr	r1, [r0, #8]
   b59e6:	4668      	mov	r0, sp
   b59e8:	f7ff fd9c 	bl	b5524 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  res.write(resolution);
   b59ec:	4621      	mov	r1, r4
   b59ee:	4668      	mov	r0, sp
   b59f0:	f7ff fdaa 	bl	b5548 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b59f4:	b002      	add	sp, #8
   b59f6:	bd10      	pop	{r4, pc}

000b59f8 <_ZN16Adafruit_MCP960016getADCresolutionEv>:
    @returns The reslution: MCP9600_ADCRESOLUTION_18,
    MCP9600_ADCRESOLUTION_16, MCP9600_ADCRESOLUTION_14,
    or MCP9600_ADCRESOLUTION_12.
*/
/**************************************************************************/
MCP9600_ADCResolution Adafruit_MCP9600::getADCresolution(void) {
   b59f8:	b507      	push	{r0, r1, r2, lr}
  // define the resolution bits
  Adafruit_I2CRegisterBits res =
      Adafruit_I2CRegisterBits(_config_reg, 2, 5); // # bits, bit_shift
   b59fa:	2305      	movs	r3, #5
   b59fc:	6881      	ldr	r1, [r0, #8]
   b59fe:	2202      	movs	r2, #2
   b5a00:	4668      	mov	r0, sp
   b5a02:	f7ff fd8f 	bl	b5524 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return (MCP9600_ADCResolution)res.read();
   b5a06:	4668      	mov	r0, sp
   b5a08:	f7ff fd91 	bl	b552e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
   b5a0c:	b2c0      	uxtb	r0, r0
   b5a0e:	b003      	add	sp, #12
   b5a10:	f85d fb04 	ldr.w	pc, [sp], #4

000b5a14 <_ZN16Adafruit_MCP96007readADCEv>:
/*!
    @brief  Read the raw ADC voltage, say for self calculating a temperature
    @returns The 32-bit signed value from the ADC DATA register
*/
/**************************************************************************/
int32_t Adafruit_MCP9600::readADC(void) {
   b5a14:	b500      	push	{lr}
  // define the register
  Adafruit_I2CRegister adc =
      Adafruit_I2CRegister(i2c_dev, MCP9600_RAWDATAADC, 3, MSBFIRST);
   b5a16:	2301      	movs	r3, #1
int32_t Adafruit_MCP9600::readADC(void) {
   b5a18:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, MCP9600_RAWDATAADC, 3, MSBFIRST);
   b5a1a:	e9cd 3300 	strd	r3, r3, [sp]
   b5a1e:	2303      	movs	r3, #3
   b5a20:	6841      	ldr	r1, [r0, #4]
   b5a22:	461a      	mov	r2, r3
   b5a24:	a802      	add	r0, sp, #8
   b5a26:	f7ff fccf 	bl	b53c8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  uint32_t reading = adc.read();
   b5a2a:	a802      	add	r0, sp, #8
   b5a2c:	f7ff fd5e 	bl	b54ec <_ZN23Adafruit_BusIO_Register4readEv>
  // extend 24 bits to 32
  if (reading & 0x800000) {
   b5a30:	0203      	lsls	r3, r0, #8
    reading |= 0xFF000000;
   b5a32:	bf48      	it	mi
   b5a34:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000
  }
  return reading;
}
   b5a38:	b009      	add	sp, #36	; 0x24
   b5a3a:	f85d fb04 	ldr.w	pc, [sp], #4

000b5a3e <_ZN16Adafruit_MCP960019getThermocoupleTypeEv>:
    @returns The selected type: MCP9600_TYPE_K, MCP9600_TYPE_J,
    MCP9600_TYPE_T, MCP9600_TYPE_N, MCP9600_TYPE_S, MCP9600_TYPE_E,
    MCP9600_TYPE_B or MCP9600_TYPE_R
*/
/**************************************************************************/
MCP9600_ThemocoupleType Adafruit_MCP9600::getThermocoupleType(void) {
   b5a3e:	b500      	push	{lr}
  // define the register
  Adafruit_I2CRegister sensorconfig =
      Adafruit_I2CRegister(i2c_dev, MCP9600_SENSORCONFIG, 1, MSBFIRST);
   b5a40:	2301      	movs	r3, #1
MCP9600_ThemocoupleType Adafruit_MCP9600::getThermocoupleType(void) {
   b5a42:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_I2CRegister(i2c_dev, MCP9600_SENSORCONFIG, 1, MSBFIRST);
   b5a44:	e9cd 3300 	strd	r3, r3, [sp]
   b5a48:	2205      	movs	r2, #5
   b5a4a:	6841      	ldr	r1, [r0, #4]
   b5a4c:	a804      	add	r0, sp, #16
   b5a4e:	f7ff fcbb 	bl	b53c8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits type =
      Adafruit_I2CRegisterBits(&sensorconfig, 3, 4); // # bits, bit_shift
   b5a52:	2304      	movs	r3, #4
   b5a54:	2203      	movs	r2, #3
   b5a56:	a904      	add	r1, sp, #16
   b5a58:	a802      	add	r0, sp, #8
   b5a5a:	f7ff fd63 	bl	b5524 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return (MCP9600_ThemocoupleType)type.read();
   b5a5e:	a802      	add	r0, sp, #8
   b5a60:	f7ff fd65 	bl	b552e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
   b5a64:	b2c0      	uxtb	r0, r0
   b5a66:	b00b      	add	sp, #44	; 0x2c
   b5a68:	f85d fb04 	ldr.w	pc, [sp], #4

000b5a6c <_ZN16Adafruit_MCP960019setThermocoupleTypeE10_themotype>:
    @param thermotype The desired type: MCP9600_TYPE_K, MCP9600_TYPE_J,
    MCP9600_TYPE_T, MCP9600_TYPE_N, MCP9600_TYPE_S, MCP9600_TYPE_E,
    MCP9600_TYPE_B or MCP9600_TYPE_R
*/
/**************************************************************************/
void Adafruit_MCP9600::setThermocoupleType(MCP9600_ThemocoupleType thermotype) {
   b5a6c:	b510      	push	{r4, lr}
  // define the register
  Adafruit_I2CRegister sensorconfig =
      Adafruit_I2CRegister(i2c_dev, MCP9600_SENSORCONFIG, 1, MSBFIRST);
   b5a6e:	2301      	movs	r3, #1
void Adafruit_MCP9600::setThermocoupleType(MCP9600_ThemocoupleType thermotype) {
   b5a70:	b08a      	sub	sp, #40	; 0x28
      Adafruit_I2CRegister(i2c_dev, MCP9600_SENSORCONFIG, 1, MSBFIRST);
   b5a72:	e9cd 3300 	strd	r3, r3, [sp]
void Adafruit_MCP9600::setThermocoupleType(MCP9600_ThemocoupleType thermotype) {
   b5a76:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, MCP9600_SENSORCONFIG, 1, MSBFIRST);
   b5a78:	2205      	movs	r2, #5
   b5a7a:	6841      	ldr	r1, [r0, #4]
   b5a7c:	a804      	add	r0, sp, #16
   b5a7e:	f7ff fca3 	bl	b53c8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits type =
      Adafruit_I2CRegisterBits(&sensorconfig, 3, 4); // # bits, bit_shift
   b5a82:	2304      	movs	r3, #4
   b5a84:	2203      	movs	r2, #3
   b5a86:	a904      	add	r1, sp, #16
   b5a88:	a802      	add	r0, sp, #8
   b5a8a:	f7ff fd4b 	bl	b5524 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  type.write(thermotype);
   b5a8e:	4621      	mov	r1, r4
   b5a90:	a802      	add	r0, sp, #8
   b5a92:	f7ff fd59 	bl	b5548 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b5a96:	b00a      	add	sp, #40	; 0x28
   b5a98:	bd10      	pop	{r4, pc}

000b5a9a <_ZN16Adafruit_MCP960020getFilterCoefficientEv>:
/*!
    @brief   The desired filter coefficient getter
    @returns How many readings we will be averaging, can be from 0-7
*/
/**************************************************************************/
uint8_t Adafruit_MCP9600::getFilterCoefficient(void) {
   b5a9a:	b500      	push	{lr}
  // define the register
  Adafruit_I2CRegister sensorconfig =
      Adafruit_I2CRegister(i2c_dev, MCP9600_SENSORCONFIG, 1, MSBFIRST);
   b5a9c:	2301      	movs	r3, #1
uint8_t Adafruit_MCP9600::getFilterCoefficient(void) {
   b5a9e:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_I2CRegister(i2c_dev, MCP9600_SENSORCONFIG, 1, MSBFIRST);
   b5aa0:	e9cd 3300 	strd	r3, r3, [sp]
   b5aa4:	2205      	movs	r2, #5
   b5aa6:	6841      	ldr	r1, [r0, #4]
   b5aa8:	a804      	add	r0, sp, #16
   b5aaa:	f7ff fc8d 	bl	b53c8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits filter =
      Adafruit_I2CRegisterBits(&sensorconfig, 3, 0); // # bits, bit_shift
   b5aae:	2300      	movs	r3, #0
   b5ab0:	2203      	movs	r2, #3
   b5ab2:	a904      	add	r1, sp, #16
   b5ab4:	a802      	add	r0, sp, #8
   b5ab6:	f7ff fd35 	bl	b5524 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return filter.read();
   b5aba:	a802      	add	r0, sp, #8
   b5abc:	f7ff fd37 	bl	b552e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
   b5ac0:	b2c0      	uxtb	r0, r0
   b5ac2:	b00b      	add	sp, #44	; 0x2c
   b5ac4:	f85d fb04 	ldr.w	pc, [sp], #4

000b5ac8 <_ZN16Adafruit_MCP960020setFilterCoefficientEh>:
/*!
    @brief   The desired filter coefficient setter
    @param filtercount How many readings we will be averaging, can be from 0-7
*/
/**************************************************************************/
void Adafruit_MCP9600::setFilterCoefficient(uint8_t filtercount) {
   b5ac8:	b510      	push	{r4, lr}
  // define the register
  Adafruit_I2CRegister sensorconfig =
      Adafruit_I2CRegister(i2c_dev, MCP9600_SENSORCONFIG, 1, MSBFIRST);
   b5aca:	2301      	movs	r3, #1
void Adafruit_MCP9600::setFilterCoefficient(uint8_t filtercount) {
   b5acc:	b08a      	sub	sp, #40	; 0x28
      Adafruit_I2CRegister(i2c_dev, MCP9600_SENSORCONFIG, 1, MSBFIRST);
   b5ace:	e9cd 3300 	strd	r3, r3, [sp]
void Adafruit_MCP9600::setFilterCoefficient(uint8_t filtercount) {
   b5ad2:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, MCP9600_SENSORCONFIG, 1, MSBFIRST);
   b5ad4:	2205      	movs	r2, #5
   b5ad6:	6841      	ldr	r1, [r0, #4]
   b5ad8:	a804      	add	r0, sp, #16
   b5ada:	f7ff fc75 	bl	b53c8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits filter =
      Adafruit_I2CRegisterBits(&sensorconfig, 3, 0); // # bits, bit_shift
   b5ade:	2300      	movs	r3, #0
   b5ae0:	2203      	movs	r2, #3
   b5ae2:	a904      	add	r1, sp, #16
   b5ae4:	a802      	add	r0, sp, #8
   b5ae6:	f7ff fd1d 	bl	b5524 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  filter.write(filtercount);
   b5aea:	4621      	mov	r1, r4
   b5aec:	a802      	add	r0, sp, #8
   b5aee:	f7ff fd2b 	bl	b5548 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b5af2:	b00a      	add	sp, #40	; 0x28
   b5af4:	bd10      	pop	{r4, pc}
	...

000b5af8 <_ZN16Adafruit_MCP960019getAlertTemperatureEh>:
    @brief  Getter for alert temperature setting
    @param  alert Which alert output we're getting, can be 1 to 4
    @return Floating point temperature in Centigrade
*/
/**************************************************************************/
float Adafruit_MCP9600::getAlertTemperature(uint8_t alert) {
   b5af8:	b500      	push	{lr}
  if ((alert < 1) || (alert > 4))
   b5afa:	1e4b      	subs	r3, r1, #1
   b5afc:	2b03      	cmp	r3, #3
float Adafruit_MCP9600::getAlertTemperature(uint8_t alert) {
   b5afe:	b089      	sub	sp, #36	; 0x24
  if ((alert < 1) || (alert > 4))
   b5b00:	d814      	bhi.n	b5b2c <_ZN16Adafruit_MCP960019getAlertTemperatureEh+0x34>
    return NAN; // invalid
  // define the register
  Adafruit_I2CRegister alerttemp = Adafruit_I2CRegister(
      i2c_dev, MCP9600_ALERTLIMIT_1 + alert - 1, 2, MSBFIRST);
   b5b02:	2301      	movs	r3, #1
   b5b04:	e9cd 3300 	strd	r3, r3, [sp]
   b5b08:	310f      	adds	r1, #15
   b5b0a:	2302      	movs	r3, #2
   b5b0c:	b2ca      	uxtb	r2, r1
   b5b0e:	6841      	ldr	r1, [r0, #4]
   b5b10:	a802      	add	r0, sp, #8
   b5b12:	f7ff fc59 	bl	b53c8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  // read a signed 16 bit value
  int16_t therm = alerttemp.read();
   b5b16:	a802      	add	r0, sp, #8
   b5b18:	f7ff fce8 	bl	b54ec <_ZN23Adafruit_BusIO_Register4readEv>

  // convert to floating and shift to celsius
  float temp = therm;
   b5b1c:	b203      	sxth	r3, r0
   b5b1e:	ee00 3a10 	vmov	s0, r3
  temp *= 0.0625; // 0.0625*C per LSB!
   b5b22:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
  return temp;
}
   b5b26:	b009      	add	sp, #36	; 0x24
   b5b28:	f85d fb04 	ldr.w	pc, [sp], #4
    return NAN; // invalid
   b5b2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; b5b34 <_ZN16Adafruit_MCP960019getAlertTemperatureEh+0x3c>
   b5b30:	e7f9      	b.n	b5b26 <_ZN16Adafruit_MCP960019getAlertTemperatureEh+0x2e>
   b5b32:	bf00      	nop
   b5b34:	7fc00000 	.word	0x7fc00000

000b5b38 <_ZN16Adafruit_MCP960019setAlertTemperatureEhf>:
    @brief  Setter for alert temperature setting
    @param  alert Which alert output we're getting, can be 1 to 4
    @param  temp  Floating point temperature in Centigrade
*/
/**************************************************************************/
void Adafruit_MCP9600::setAlertTemperature(uint8_t alert, float temp) {
   b5b38:	b510      	push	{r4, lr}
  if ((alert < 1) || (alert > 4))
   b5b3a:	1e4b      	subs	r3, r1, #1
   b5b3c:	2b03      	cmp	r3, #3
void Adafruit_MCP9600::setAlertTemperature(uint8_t alert, float temp) {
   b5b3e:	ee10 4a10 	vmov	r4, s0
   b5b42:	b088      	sub	sp, #32
  if ((alert < 1) || (alert > 4))
   b5b44:	d817      	bhi.n	b5b76 <_ZN16Adafruit_MCP960019setAlertTemperatureEhf+0x3e>
    return; // invalid

  // define the register
  Adafruit_I2CRegister alerttemp = Adafruit_I2CRegister(
      i2c_dev, MCP9600_ALERTLIMIT_1 + alert - 1, 2, MSBFIRST);
   b5b46:	2301      	movs	r3, #1
   b5b48:	e9cd 3300 	strd	r3, r3, [sp]
   b5b4c:	310f      	adds	r1, #15
   b5b4e:	b2ca      	uxtb	r2, r1
   b5b50:	2302      	movs	r3, #2
   b5b52:	6841      	ldr	r1, [r0, #4]
   b5b54:	a802      	add	r0, sp, #8
   b5b56:	f7ff fc37 	bl	b53c8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  int16_t therm = temp / 0.0625; // 0.0625*C per LSB!
   b5b5a:	4620      	mov	r0, r4
   b5b5c:	f005 fb20 	bl	bb1a0 <__aeabi_f2d>
   b5b60:	2200      	movs	r2, #0
   b5b62:	4b06      	ldr	r3, [pc, #24]	; (b5b7c <_ZN16Adafruit_MCP960019setAlertTemperatureEhf+0x44>)
   b5b64:	f005 fb74 	bl	bb250 <__aeabi_dmul>
   b5b68:	f005 fe22 	bl	bb7b0 <__aeabi_d2iz>
  alerttemp.write(therm);
   b5b6c:	2200      	movs	r2, #0
   b5b6e:	b201      	sxth	r1, r0
   b5b70:	a802      	add	r0, sp, #8
   b5b72:	f7ff fc6b 	bl	b544c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b5b76:	b008      	add	sp, #32
   b5b78:	bd10      	pop	{r4, pc}
   b5b7a:	bf00      	nop
   b5b7c:	40300000 	.word	0x40300000

000b5b80 <_ZN16Adafruit_MCP960014configureAlertEhbbbbb>:
    or comparator mode (false)
*/
/**************************************************************************/
void Adafruit_MCP9600::configureAlert(uint8_t alert, bool enabled, bool rising,
                                      bool alertColdJunction, bool activeHigh,
                                      bool interruptMode) {
   b5b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5b84:	461e      	mov	r6, r3
   b5b86:	b089      	sub	sp, #36	; 0x24
  if ((alert < 1) || (alert > 4))
   b5b88:	1e4b      	subs	r3, r1, #1
   b5b8a:	2b03      	cmp	r3, #3
                                      bool interruptMode) {
   b5b8c:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
   b5b90:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
   b5b94:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   b5b98:	4614      	mov	r4, r2
  if ((alert < 1) || (alert > 4))
   b5b9a:	d81d      	bhi.n	b5bd8 <_ZN16Adafruit_MCP960014configureAlertEhbbbbb+0x58>
    return; // invalid
  // define the register
  Adafruit_I2CRegister alertconfig = Adafruit_I2CRegister(
      i2c_dev, MCP9600_ALERTCONFIG_1 + alert - 1, 1, MSBFIRST);
   b5b9c:	2301      	movs	r3, #1
   b5b9e:	e9cd 3300 	strd	r3, r3, [sp]
   b5ba2:	1dca      	adds	r2, r1, #7
   b5ba4:	b2d2      	uxtb	r2, r2
   b5ba6:	6841      	ldr	r1, [r0, #4]
   b5ba8:	a802      	add	r0, sp, #8
   b5baa:	f7ff fc0d 	bl	b53c8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  uint8_t c = 0;
   b5bae:	4621      	mov	r1, r4

  if (enabled) {
    c |= 0x1;
  }
  if (interruptMode) {
   b5bb0:	f1b9 0f00 	cmp.w	r9, #0
   b5bb4:	d001      	beq.n	b5bba <_ZN16Adafruit_MCP960014configureAlertEhbbbbb+0x3a>
    c |= 0x2;
   b5bb6:	f044 0102 	orr.w	r1, r4, #2
  }
  if (activeHigh) {
   b5bba:	f1b8 0f00 	cmp.w	r8, #0
   b5bbe:	d001      	beq.n	b5bc4 <_ZN16Adafruit_MCP960014configureAlertEhbbbbb+0x44>
    c |= 0x4;
   b5bc0:	f041 0104 	orr.w	r1, r1, #4
  }
  if (rising) {
   b5bc4:	b10e      	cbz	r6, b5bca <_ZN16Adafruit_MCP960014configureAlertEhbbbbb+0x4a>
    c |= 0x8;
   b5bc6:	f041 0108 	orr.w	r1, r1, #8
  }
  if (alertColdJunction) {
   b5bca:	b10f      	cbz	r7, b5bd0 <_ZN16Adafruit_MCP960014configureAlertEhbbbbb+0x50>
    c |= 0x10;
   b5bcc:	f041 0110 	orr.w	r1, r1, #16
  }
  alertconfig.write(c);
   b5bd0:	2200      	movs	r2, #0
   b5bd2:	a802      	add	r0, sp, #8
   b5bd4:	f7ff fc3a 	bl	b544c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b5bd8:	b009      	add	sp, #36	; 0x24
   b5bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5bde <_ZL6conv2dPKc>:
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    uint8_t v = 0;
    if ('0' <= *p && *p <= '9')
   b5bde:	7803      	ldrb	r3, [r0, #0]
        v = *p - '0';
    return 10 * v + *++p - '0';
   b5be0:	7840      	ldrb	r0, [r0, #1]
    if ('0' <= *p && *p <= '9')
   b5be2:	3b30      	subs	r3, #48	; 0x30
   b5be4:	b2db      	uxtb	r3, r3
    uint8_t v = 0;
   b5be6:	2b0a      	cmp	r3, #10
   b5be8:	bf28      	it	cs
   b5bea:	2300      	movcs	r3, #0
    return 10 * v + *++p - '0';
   b5bec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5bf0:	3830      	subs	r0, #48	; 0x30
   b5bf2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
   b5bf6:	b2c0      	uxtb	r0, r0
   b5bf8:	4770      	bx	lr
	...

000b5bfc <_ZN8DateTimeC1Em>:
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970
   b5bfc:	4b21      	ldr	r3, [pc, #132]	; (b5c84 <_ZN8DateTimeC1Em+0x88>)
DateTime::DateTime (uint32_t t) {
   b5bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970
   b5c00:	440b      	add	r3, r1
    ss = t % 60;
   b5c02:	243c      	movs	r4, #60	; 0x3c
   b5c04:	fbb3 f1f4 	udiv	r1, r3, r4
   b5c08:	fb04 3311 	mls	r3, r4, r1, r3
    mm = t % 60;
   b5c0c:	fbb1 f2f4 	udiv	r2, r1, r4
   b5c10:	fb04 1112 	mls	r1, r4, r2, r1
   b5c14:	7101      	strb	r1, [r0, #4]
    hh = t % 24;
   b5c16:	2118      	movs	r1, #24
    ss = t % 60;
   b5c18:	7143      	strb	r3, [r0, #5]
    hh = t % 24;
   b5c1a:	fbb2 f3f1 	udiv	r3, r2, r1
   b5c1e:	fb01 2213 	mls	r2, r1, r3, r2
   b5c22:	70c2      	strb	r2, [r0, #3]
    for (yOff = 0; ; ++yOff) {
   b5c24:	2200      	movs	r2, #0
    uint16_t days = t / 24;
   b5c26:	b29b      	uxth	r3, r3
    for (yOff = 0; ; ++yOff) {
   b5c28:	7002      	strb	r2, [r0, #0]
        if (days < 365 + leap)
   b5c2a:	f240 166d 	movw	r6, #365	; 0x16d
        days -= 365 + leap;
   b5c2e:	f64f 6493 	movw	r4, #65171	; 0xfe93
        leap = yOff % 4 == 0;
   b5c32:	7802      	ldrb	r2, [r0, #0]
   b5c34:	f012 0503 	ands.w	r5, r2, #3
        if (days < 365 + leap)
   b5c38:	bf0b      	itete	eq
   b5c3a:	4637      	moveq	r7, r6
   b5c3c:	f44f 77b6 	movne.w	r7, #364	; 0x16c
   b5c40:	2101      	moveq	r1, #1
   b5c42:	2100      	movne	r1, #0
   b5c44:	429f      	cmp	r7, r3
   b5c46:	da05      	bge.n	b5c54 <_ZN8DateTimeC1Em+0x58>
        days -= 365 + leap;
   b5c48:	1a61      	subs	r1, r4, r1
   b5c4a:	440b      	add	r3, r1
    for (yOff = 0; ; ++yOff) {
   b5c4c:	3201      	adds	r2, #1
        days -= 365 + leap;
   b5c4e:	b29b      	uxth	r3, r3
    for (yOff = 0; ; ++yOff) {
   b5c50:	7002      	strb	r2, [r0, #0]
        leap = yOff % 4 == 0;
   b5c52:	e7ee      	b.n	b5c32 <_ZN8DateTimeC1Em+0x36>
    for (m = 1; ; ++m) {
   b5c54:	2201      	movs	r2, #1
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
   b5c56:	4e0c      	ldr	r6, [pc, #48]	; (b5c88 <_ZN8DateTimeC1Em+0x8c>)
    for (m = 1; ; ++m) {
   b5c58:	7042      	strb	r2, [r0, #1]
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
   b5c5a:	7841      	ldrb	r1, [r0, #1]
   b5c5c:	1872      	adds	r2, r6, r1
   b5c5e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
        if (leap && m == 2)
   b5c62:	b91d      	cbnz	r5, b5c6c <_ZN8DateTimeC1Em+0x70>
   b5c64:	2902      	cmp	r1, #2
            ++daysPerMonth;
   b5c66:	bf04      	itt	eq
   b5c68:	3201      	addeq	r2, #1
   b5c6a:	b2d2      	uxtbeq	r2, r2
        if (days < daysPerMonth)
   b5c6c:	429a      	cmp	r2, r3
   b5c6e:	b294      	uxth	r4, r2
   b5c70:	d804      	bhi.n	b5c7c <_ZN8DateTimeC1Em+0x80>
        days -= daysPerMonth;
   b5c72:	1b1b      	subs	r3, r3, r4
    for (m = 1; ; ++m) {
   b5c74:	3101      	adds	r1, #1
        days -= daysPerMonth;
   b5c76:	b29b      	uxth	r3, r3
    for (m = 1; ; ++m) {
   b5c78:	7041      	strb	r1, [r0, #1]
    }
   b5c7a:	e7ee      	b.n	b5c5a <_ZN8DateTimeC1Em+0x5e>
    d = days + 1;
   b5c7c:	3301      	adds	r3, #1
   b5c7e:	7083      	strb	r3, [r0, #2]
}
   b5c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5c82:	bf00      	nop
   b5c84:	c792bc80 	.word	0xc792bc80
   b5c88:	000bc468 	.word	0x000bc468

000b5c8c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
}

// A convenient constructor for using "the compiler's time":
// This version will save RAM by using PROGMEM to store it by using the F macro.
//   DateTime now (F(__DATE__), F(__TIME__));
DateTime::DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time) {
   b5c8c:	b530      	push	{r4, r5, lr}
   b5c8e:	460d      	mov	r5, r1
   b5c90:	b085      	sub	sp, #20
   b5c92:	4604      	mov	r4, r0
    // sample input: date = "Dec 26 2009", time = "12:34:56"
    char buff[11];
    memcpy_P(buff, date, 11);
   b5c94:	6808      	ldr	r0, [r1, #0]
   b5c96:	6849      	ldr	r1, [r1, #4]
   b5c98:	ab01      	add	r3, sp, #4
   b5c9a:	c303      	stmia	r3!, {r0, r1}
   b5c9c:	8928      	ldrh	r0, [r5, #8]
   b5c9e:	7aa9      	ldrb	r1, [r5, #10]
   b5ca0:	8018      	strh	r0, [r3, #0]
   b5ca2:	7099      	strb	r1, [r3, #2]
    yOff = conv2d(buff + 9);
   b5ca4:	f10d 000d 	add.w	r0, sp, #13
   b5ca8:	f7ff ff99 	bl	b5bde <_ZL6conv2dPKc>
   b5cac:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5cb0:	7020      	strb	r0, [r4, #0]
    // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
    switch (buff[0]) {
   b5cb2:	3b41      	subs	r3, #65	; 0x41
   b5cb4:	2b12      	cmp	r3, #18
   b5cb6:	d816      	bhi.n	b5ce6 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x5a>
   b5cb8:	e8df f003 	tbb	[pc, r3]
   b5cbc:	46151532 	.word	0x46151532
   b5cc0:	15153015 	.word	0x15153015
   b5cc4:	15150a15 	.word	0x15150a15
   b5cc8:	15424439 	.word	0x15424439
   b5ccc:	1515      	.short	0x1515
   b5cce:	40          	.byte	0x40
   b5ccf:	00          	.byte	0x00
        case 'J': m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7); break;
   b5cd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b5cd4:	2b61      	cmp	r3, #97	; 0x61
   b5cd6:	d01f      	beq.n	b5d18 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x8c>
   b5cd8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b5cdc:	2b6e      	cmp	r3, #110	; 0x6e
   b5cde:	bf0c      	ite	eq
   b5ce0:	2306      	moveq	r3, #6
   b5ce2:	2307      	movne	r3, #7
        case 'A': m = buff[2] == 'r' ? 4 : 8; break;
        case 'M': m = buff[2] == 'r' ? 3 : 5; break;
        case 'S': m = 9; break;
        case 'O': m = 10; break;
        case 'N': m = 11; break;
        case 'D': m = 12; break;
   b5ce4:	7063      	strb	r3, [r4, #1]
    }
    d = conv2d(buff + 4);
   b5ce6:	a802      	add	r0, sp, #8
   b5ce8:	f7ff ff79 	bl	b5bde <_ZL6conv2dPKc>
   b5cec:	70a0      	strb	r0, [r4, #2]
    memcpy_P(buff, time, 8);
   b5cee:	6810      	ldr	r0, [r2, #0]
   b5cf0:	6851      	ldr	r1, [r2, #4]
   b5cf2:	ab01      	add	r3, sp, #4
   b5cf4:	c303      	stmia	r3!, {r0, r1}
    hh = conv2d(buff);
   b5cf6:	a801      	add	r0, sp, #4
   b5cf8:	f7ff ff71 	bl	b5bde <_ZL6conv2dPKc>
   b5cfc:	70e0      	strb	r0, [r4, #3]
    mm = conv2d(buff + 3);
   b5cfe:	f10d 0007 	add.w	r0, sp, #7
   b5d02:	f7ff ff6c 	bl	b5bde <_ZL6conv2dPKc>
   b5d06:	7120      	strb	r0, [r4, #4]
    ss = conv2d(buff + 6);
   b5d08:	f10d 000a 	add.w	r0, sp, #10
   b5d0c:	f7ff ff67 	bl	b5bde <_ZL6conv2dPKc>
   b5d10:	7160      	strb	r0, [r4, #5]
}
   b5d12:	4620      	mov	r0, r4
   b5d14:	b005      	add	sp, #20
   b5d16:	bd30      	pop	{r4, r5, pc}
        case 'J': m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7); break;
   b5d18:	2301      	movs	r3, #1
   b5d1a:	e7e3      	b.n	b5ce4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
        case 'F': m = 2; break;
   b5d1c:	2302      	movs	r3, #2
   b5d1e:	e7e1      	b.n	b5ce4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
        case 'A': m = buff[2] == 'r' ? 4 : 8; break;
   b5d20:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b5d24:	2b72      	cmp	r3, #114	; 0x72
   b5d26:	bf0c      	ite	eq
   b5d28:	2304      	moveq	r3, #4
   b5d2a:	2308      	movne	r3, #8
   b5d2c:	e7da      	b.n	b5ce4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
        case 'M': m = buff[2] == 'r' ? 3 : 5; break;
   b5d2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b5d32:	2b72      	cmp	r3, #114	; 0x72
   b5d34:	bf0c      	ite	eq
   b5d36:	2303      	moveq	r3, #3
   b5d38:	2305      	movne	r3, #5
   b5d3a:	e7d3      	b.n	b5ce4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
        case 'S': m = 9; break;
   b5d3c:	2309      	movs	r3, #9
   b5d3e:	e7d1      	b.n	b5ce4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
        case 'O': m = 10; break;
   b5d40:	230a      	movs	r3, #10
   b5d42:	e7cf      	b.n	b5ce4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
        case 'N': m = 11; break;
   b5d44:	230b      	movs	r3, #11
   b5d46:	e7cd      	b.n	b5ce4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
        case 'D': m = 12; break;
   b5d48:	230c      	movs	r3, #12
   b5d4a:	e7cb      	b.n	b5ce4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>

000b5d4c <_ZN10RTC_DS13075beginEv>:
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
   b5d4c:	b508      	push	{r3, lr}
  Wire.begin();
   b5d4e:	f004 fcd5 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5d52:	f002 fb3b 	bl	b83cc <_ZN7TwoWire5beginEv>
  return true;
}
   b5d56:	2001      	movs	r0, #1
   b5d58:	bd08      	pop	{r3, pc}

000b5d5a <_ZN11RTC_PCF85235beginEv>:
   b5d5a:	f7ff bff7 	b.w	b5d4c <_ZN10RTC_DS13075beginEv>

000b5d5e <_ZN11RTC_PCF852311initializedEv>:
boolean RTC_PCF8523::begin(void) {
  Wire.begin();
  return true;
}

boolean RTC_PCF8523::initialized(void) {
   b5d5e:	b508      	push	{r3, lr}
  Wire.beginTransmission(PCF8523_ADDRESS);
   b5d60:	f004 fccc 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5d64:	2168      	movs	r1, #104	; 0x68
   b5d66:	f002 fb67 	bl	b8438 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
   b5d6a:	f004 fcc7 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5d6e:	6803      	ldr	r3, [r0, #0]
   b5d70:	2102      	movs	r1, #2
   b5d72:	689b      	ldr	r3, [r3, #8]
   b5d74:	4798      	blx	r3
  Wire.endTransmission();
   b5d76:	f004 fcc1 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5d7a:	f002 fb64 	bl	b8446 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 1);
   b5d7e:	f004 fcbd 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5d82:	2201      	movs	r2, #1
   b5d84:	2168      	movs	r1, #104	; 0x68
   b5d86:	f002 fb50 	bl	b842a <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = Wire._I2C_READ();
   b5d8a:	f004 fcb7 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5d8e:	6803      	ldr	r3, [r0, #0]
   b5d90:	695b      	ldr	r3, [r3, #20]
   b5d92:	4798      	blx	r3
  return ((ss & 0xE0) != 0xE0);
   b5d94:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
}
   b5d98:	38e0      	subs	r0, #224	; 0xe0
   b5d9a:	bf18      	it	ne
   b5d9c:	2001      	movne	r0, #1
   b5d9e:	bd08      	pop	{r3, pc}

000b5da0 <_ZN11RTC_PCF85236adjustERK8DateTime>:

void RTC_PCF8523::adjust(const DateTime& dt) {
   b5da0:	b538      	push	{r3, r4, r5, lr}
   b5da2:	460d      	mov	r5, r1
  Wire.beginTransmission(PCF8523_ADDRESS);
   b5da4:	f004 fcaa 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5da8:	2168      	movs	r1, #104	; 0x68
   b5daa:	f002 fb45 	bl	b8438 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)3); // start at location 3
   b5dae:	f004 fca5 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5db2:	6803      	ldr	r3, [r0, #0]
   b5db4:	2103      	movs	r1, #3
   b5db6:	689b      	ldr	r3, [r3, #8]
   b5db8:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   b5dba:	f004 fc9f 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5dbe:	7969      	ldrb	r1, [r5, #5]
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   b5dc0:	240a      	movs	r4, #10
   b5dc2:	fbb1 f3f4 	udiv	r3, r1, r4
   b5dc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5dca:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   b5dce:	6803      	ldr	r3, [r0, #0]
   b5dd0:	b2c9      	uxtb	r1, r1
   b5dd2:	689b      	ldr	r3, [r3, #8]
   b5dd4:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   b5dd6:	f004 fc91 	bl	ba6fc <_Z19__fetch_global_Wirev>
    uint8_t minute() const      { return mm; }
   b5dda:	7929      	ldrb	r1, [r5, #4]
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   b5ddc:	fbb1 f3f4 	udiv	r3, r1, r4
   b5de0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5de4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   b5de8:	6803      	ldr	r3, [r0, #0]
   b5dea:	b2c9      	uxtb	r1, r1
   b5dec:	689b      	ldr	r3, [r3, #8]
   b5dee:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   b5df0:	f004 fc84 	bl	ba6fc <_Z19__fetch_global_Wirev>
    uint8_t hour() const        { return hh; }
   b5df4:	78e9      	ldrb	r1, [r5, #3]
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   b5df6:	fbb1 f3f4 	udiv	r3, r1, r4
   b5dfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5dfe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   b5e02:	6803      	ldr	r3, [r0, #0]
   b5e04:	b2c9      	uxtb	r1, r1
   b5e06:	689b      	ldr	r3, [r3, #8]
   b5e08:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   b5e0a:	f004 fc77 	bl	ba6fc <_Z19__fetch_global_Wirev>
    uint8_t day() const         { return d; }
   b5e0e:	78a9      	ldrb	r1, [r5, #2]
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   b5e10:	fbb1 f3f4 	udiv	r3, r1, r4
   b5e14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5e18:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   b5e1c:	6803      	ldr	r3, [r0, #0]
   b5e1e:	b2c9      	uxtb	r1, r1
   b5e20:	689b      	ldr	r3, [r3, #8]
   b5e22:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(0)); // skip weekdays
   b5e24:	f004 fc6a 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5e28:	6803      	ldr	r3, [r0, #0]
   b5e2a:	2100      	movs	r1, #0
   b5e2c:	689b      	ldr	r3, [r3, #8]
   b5e2e:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   b5e30:	f004 fc64 	bl	ba6fc <_Z19__fetch_global_Wirev>
    uint8_t month() const       { return m; }
   b5e34:	7869      	ldrb	r1, [r5, #1]
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   b5e36:	fbb1 f3f4 	udiv	r3, r1, r4
   b5e3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5e3e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   b5e42:	6803      	ldr	r3, [r0, #0]
   b5e44:	b2c9      	uxtb	r1, r1
   b5e46:	689b      	ldr	r3, [r3, #8]
   b5e48:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
   b5e4a:	f004 fc57 	bl	ba6fc <_Z19__fetch_global_Wirev>
    uint16_t year() const       { return 2000 + yOff; }
   b5e4e:	7829      	ldrb	r1, [r5, #0]
   b5e50:	6803      	ldr	r3, [r0, #0]
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   b5e52:	fbb1 f4f4 	udiv	r4, r1, r4
   b5e56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   b5e5a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
   b5e5e:	689b      	ldr	r3, [r3, #8]
   b5e60:	b2c9      	uxtb	r1, r1
   b5e62:	4798      	blx	r3
  Wire.endTransmission();
   b5e64:	f004 fc4a 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5e68:	f002 faed 	bl	b8446 <_ZN7TwoWire15endTransmissionEv>

  // set to battery switchover mode
  Wire.beginTransmission(PCF8523_ADDRESS);
   b5e6c:	f004 fc46 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5e70:	2168      	movs	r1, #104	; 0x68
   b5e72:	f002 fae1 	bl	b8438 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
   b5e76:	f004 fc41 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5e7a:	6803      	ldr	r3, [r0, #0]
   b5e7c:	2102      	movs	r1, #2
   b5e7e:	689b      	ldr	r3, [r3, #8]
   b5e80:	4798      	blx	r3
  Wire._I2C_WRITE((byte)0x00);
   b5e82:	f004 fc3b 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5e86:	6803      	ldr	r3, [r0, #0]
   b5e88:	2100      	movs	r1, #0
   b5e8a:	689b      	ldr	r3, [r3, #8]
   b5e8c:	4798      	blx	r3
  Wire.endTransmission();
   b5e8e:	f004 fc35 	bl	ba6fc <_Z19__fetch_global_Wirev>
}
   b5e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();
   b5e96:	f002 bad6 	b.w	b8446 <_ZN7TwoWire15endTransmissionEv>

000b5e9a <_ZN11RTC_PCF85233nowEv>:

DateTime RTC_PCF8523::now() {
   b5e9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5e9e:	4604      	mov	r4, r0
  Wire.beginTransmission(PCF8523_ADDRESS);
   b5ea0:	f004 fc2c 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5ea4:	2168      	movs	r1, #104	; 0x68
   b5ea6:	f002 fac7 	bl	b8438 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)3);	
   b5eaa:	f004 fc27 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5eae:	6803      	ldr	r3, [r0, #0]
   b5eb0:	2103      	movs	r1, #3
   b5eb2:	689b      	ldr	r3, [r3, #8]
   b5eb4:	4798      	blx	r3
  Wire.endTransmission();
   b5eb6:	f004 fc21 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5eba:	f002 fac4 	bl	b8446 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 7);
   b5ebe:	f004 fc1d 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5ec2:	2207      	movs	r2, #7
   b5ec4:	2168      	movs	r1, #104	; 0x68
   b5ec6:	f002 fab0 	bl	b842a <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   b5eca:	f004 fc17 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5ece:	6803      	ldr	r3, [r0, #0]
   b5ed0:	695b      	ldr	r3, [r3, #20]
   b5ed2:	4798      	blx	r3
   b5ed4:	f000 097f 	and.w	r9, r0, #127	; 0x7f
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b5ed8:	f3c0 1002 	ubfx	r0, r0, #4, #3
   b5edc:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   b5ee0:	eb09 0040 	add.w	r0, r9, r0, lsl #1
   b5ee4:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   b5ee8:	f004 fc08 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5eec:	6803      	ldr	r3, [r0, #0]
   b5eee:	695b      	ldr	r3, [r3, #20]
   b5ef0:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b5ef2:	f3c0 1503 	ubfx	r5, r0, #4, #4
   b5ef6:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
   b5efa:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   b5efe:	f000 05ff 	and.w	r5, r0, #255	; 0xff
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   b5f02:	f004 fbfb 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5f06:	6803      	ldr	r3, [r0, #0]
   b5f08:	695b      	ldr	r3, [r3, #20]
   b5f0a:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b5f0c:	f3c0 1603 	ubfx	r6, r0, #4, #4
   b5f10:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
   b5f14:	eb00 0046 	add.w	r0, r0, r6, lsl #1
   b5f18:	f000 06ff 	and.w	r6, r0, #255	; 0xff
  uint8_t d = bcd2bin(Wire._I2C_READ());
   b5f1c:	f004 fbee 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5f20:	6803      	ldr	r3, [r0, #0]
   b5f22:	695b      	ldr	r3, [r3, #20]
   b5f24:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b5f26:	f3c0 1703 	ubfx	r7, r0, #4, #4
   b5f2a:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
   b5f2e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
   b5f32:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  Wire._I2C_READ();  // skip 'weekdays'
   b5f36:	f004 fbe1 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5f3a:	6803      	ldr	r3, [r0, #0]
   b5f3c:	695b      	ldr	r3, [r3, #20]
   b5f3e:	4798      	blx	r3
  uint8_t m = bcd2bin(Wire._I2C_READ());
   b5f40:	f004 fbdc 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5f44:	6803      	ldr	r3, [r0, #0]
   b5f46:	695b      	ldr	r3, [r3, #20]
   b5f48:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b5f4a:	f3c0 1803 	ubfx	r8, r0, #4, #4
   b5f4e:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
   b5f52:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   b5f56:	f000 08ff 	and.w	r8, r0, #255	; 0xff
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   b5f5a:	f004 fbcf 	bl	ba6fc <_Z19__fetch_global_Wirev>
   b5f5e:	6803      	ldr	r3, [r0, #0]
   b5f60:	695b      	ldr	r3, [r3, #20]
   b5f62:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b5f64:	f3c0 1303 	ubfx	r3, r0, #4, #4
   b5f68:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b5f6c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    yOff = year;
   b5f70:	7020      	strb	r0, [r4, #0]
    m = month;
   b5f72:	f884 8001 	strb.w	r8, [r4, #1]
    d = day;
   b5f76:	70a7      	strb	r7, [r4, #2]
    hh = hour;
   b5f78:	70e6      	strb	r6, [r4, #3]
    mm = min;
   b5f7a:	7125      	strb	r5, [r4, #4]
    ss = sec;
   b5f7c:	f884 9005 	strb.w	r9, [r4, #5]
  
  return DateTime (y, m, d, hh, mm, ss);
}
   b5f80:	4620      	mov	r0, r4
   b5f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5f86 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b5f86:	b538      	push	{r3, r4, r5, lr}
   b5f88:	4604      	mov	r4, r0
   b5f8a:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b5f8c:	2224      	movs	r2, #36	; 0x24
   b5f8e:	2100      	movs	r1, #0
   b5f90:	f005 fe8c 	bl	bbcac <memset>

  m_vol = vol;
   b5f94:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartSector() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b5f96:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b5f98:	2b10      	cmp	r3, #16
   b5f9a:	d003      	beq.n	b5fa4 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b5f9c:	2b20      	cmp	r3, #32
   b5f9e:	d006      	beq.n	b5fae <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b5fa0:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b5fa2:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b5fa4:	2320      	movs	r3, #32
  m_flags = F_READ;
   b5fa6:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b5fa8:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5faa:	70a0      	strb	r0, [r4, #2]
  return true;
   b5fac:	e7f9      	b.n	b5fa2 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b5fae:	2340      	movs	r3, #64	; 0x40
   b5fb0:	e7f9      	b.n	b5fa6 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b5fb2 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b5fb2:	b510      	push	{r4, lr}
   b5fb4:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5fb6:	3024      	adds	r0, #36	; 0x24
   b5fb8:	f001 f9c4 	bl	b7344 <_ZN8FatCache4syncEv>
   b5fbc:	b128      	cbz	r0, b5fca <_ZN9FatVolume9cacheSyncEv+0x18>
   b5fbe:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b5fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5fc6:	f001 b9bd 	b.w	b7344 <_ZN8FatCache4syncEv>
  }
   b5fca:	bd10      	pop	{r4, pc}

000b5fcc <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b5fcc:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5fce:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b5fd0:	f043 0304 	orr.w	r3, r3, #4
   b5fd4:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5fd6:	f100 0210 	add.w	r2, r0, #16
   b5fda:	6880      	ldr	r0, [r0, #8]
   b5fdc:	f001 ba68 	b.w	b74b0 <_ZN9FatVolume15allocateClusterEmPm>

000b5fe0 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b5fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b5fe4:	7801      	ldrb	r1, [r0, #0]
   b5fe6:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b5fea:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b5fec:	d003      	beq.n	b5ff6 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b5fee:	2600      	movs	r6, #0
}
   b5ff0:	4630      	mov	r0, r6
   b5ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b5ff6:	6942      	ldr	r2, [r0, #20]
   b5ff8:	4b17      	ldr	r3, [pc, #92]	; (b6058 <_ZN7FatFile13addDirClusterEv+0x78>)
   b5ffa:	429a      	cmp	r2, r3
   b5ffc:	d2f7      	bcs.n	b5fee <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b5ffe:	f7ff ffe5 	bl	b5fcc <_ZN7FatFile10addClusterEv>
   b6002:	4606      	mov	r6, r0
   b6004:	2800      	cmp	r0, #0
   b6006:	d0f2      	beq.n	b5fee <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b6008:	6921      	ldr	r1, [r4, #16]
   b600a:	68a0      	ldr	r0, [r4, #8]
   b600c:	f001 f9e5 	bl	b73da <_ZNK9FatVolume17clusterFirstBlockEm>
   b6010:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b6012:	68a0      	ldr	r0, [r4, #8]
   b6014:	2205      	movs	r2, #5
   b6016:	4639      	mov	r1, r7
   b6018:	3024      	adds	r0, #36	; 0x24
   b601a:	f001 f9bb 	bl	b7394 <_ZN8FatCache4readEmh>
  if (!pc) {
   b601e:	4680      	mov	r8, r0
   b6020:	2800      	cmp	r0, #0
   b6022:	d0e4      	beq.n	b5fee <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6024:	4629      	mov	r1, r5
   b6026:	f44f 7200 	mov.w	r2, #512	; 0x200
   b602a:	f005 fe3f 	bl	bbcac <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b602e:	2501      	movs	r5, #1
   b6030:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b6032:	791a      	ldrb	r2, [r3, #4]
   b6034:	42aa      	cmp	r2, r5
   b6036:	d909      	bls.n	b604c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6038:	6818      	ldr	r0, [r3, #0]
   b603a:	4642      	mov	r2, r8
   b603c:	19e9      	adds	r1, r5, r7
   b603e:	f001 fd62 	bl	b7b06 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b6042:	2800      	cmp	r0, #0
   b6044:	d0d3      	beq.n	b5fee <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6046:	3501      	adds	r5, #1
   b6048:	b2ed      	uxtb	r5, r5
   b604a:	e7f1      	b.n	b6030 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b604c:	6963      	ldr	r3, [r4, #20]
   b604e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b6052:	6163      	str	r3, [r4, #20]
  return true;
   b6054:	e7cc      	b.n	b5ff0 <_ZN7FatFile13addDirClusterEv+0x10>
   b6056:	bf00      	nop
   b6058:	001ffe00 	.word	0x001ffe00

000b605c <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b605c:	b510      	push	{r4, lr}
   b605e:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b6060:	6880      	ldr	r0, [r0, #8]
   b6062:	460a      	mov	r2, r1
   b6064:	3024      	adds	r0, #36	; 0x24
   b6066:	69a1      	ldr	r1, [r4, #24]
   b6068:	f001 f994 	bl	b7394 <_ZN8FatCache4readEmh>
  if (!pc) {
   b606c:	b120      	cbz	r0, b6078 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b606e:	88a3      	ldrh	r3, [r4, #4]
   b6070:	f003 030f 	and.w	r3, r3, #15
   b6074:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6078:	bd10      	pop	{r4, pc}

000b607a <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b607a:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b607c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b607e:	4604      	mov	r4, r0
   b6080:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b6082:	2608      	movs	r6, #8
  uint8_t j = 0;
   b6084:	4618      	mov	r0, r3
      name[j++] = '.';
   b6086:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b6088:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b608c:	2a20      	cmp	r2, #32
   b608e:	d018      	beq.n	b60c2 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b6090:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b6092:	bf02      	ittt	eq
   b6094:	540f      	strbeq	r7, [r1, r0]
   b6096:	1c42      	addeq	r2, r0, #1
   b6098:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b609a:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b609c:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b60a0:	bf08      	it	eq
   b60a2:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b60a4:	f1bc 0f19 	cmp.w	ip, #25
   b60a8:	d806      	bhi.n	b60b8 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b60aa:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b60ae:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b60b2:	bf1c      	itt	ne
   b60b4:	3220      	addne	r2, #32
   b60b6:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b60b8:	f100 0c01 	add.w	ip, r0, #1
   b60bc:	540a      	strb	r2, [r1, r0]
   b60be:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b60c2:	3301      	adds	r3, #1
   b60c4:	b2db      	uxtb	r3, r3
   b60c6:	2b0b      	cmp	r3, #11
   b60c8:	d1de      	bne.n	b6088 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b60ca:	2300      	movs	r3, #0
   b60cc:	540b      	strb	r3, [r1, r0]
}
   b60ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b60d0 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b60d0:	7803      	ldrb	r3, [r0, #0]
   b60d2:	b90b      	cbnz	r3, b60d8 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b60d4:	f7ff bf57 	b.w	b5f86 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b60d8:	2000      	movs	r0, #0
   b60da:	4770      	bx	lr

000b60dc <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b60dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b60e0:	7803      	ldrb	r3, [r0, #0]
   b60e2:	4604      	mov	r4, r0
   b60e4:	4688      	mov	r8, r1
   b60e6:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b60e8:	2b00      	cmp	r3, #0
   b60ea:	d05d      	beq.n	b61a8 <_ZN7FatFile4readEPvj+0xcc>
   b60ec:	7882      	ldrb	r2, [r0, #2]
   b60ee:	07d1      	lsls	r1, r2, #31
   b60f0:	d55a      	bpl.n	b61a8 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b60f2:	071a      	lsls	r2, r3, #28
   b60f4:	d52d      	bpl.n	b6152 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b60f6:	69c3      	ldr	r3, [r0, #28]
   b60f8:	6942      	ldr	r2, [r0, #20]
   b60fa:	1a9b      	subs	r3, r3, r2
   b60fc:	429d      	cmp	r5, r3
   b60fe:	bf28      	it	cs
   b6100:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6102:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6104:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6108:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b610c:	2e00      	cmp	r6, #0
   b610e:	f000 808f 	beq.w	b6230 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6112:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6114:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6116:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b6118:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b611a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b611e:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b6122:	d51f      	bpl.n	b6164 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6124:	6a00      	ldr	r0, [r0, #32]
   b6126:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6128:	68a0      	ldr	r0, [r4, #8]
   b612a:	f1ba 0f00 	cmp.w	sl, #0
   b612e:	d142      	bne.n	b61b6 <_ZN7FatFile4readEPvj+0xda>
   b6130:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6134:	d33f      	bcc.n	b61b6 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b6136:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6138:	4299      	cmp	r1, r3
   b613a:	d03c      	beq.n	b61b6 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b613c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6140:	d252      	bcs.n	b61e8 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b6142:	6800      	ldr	r0, [r0, #0]
   b6144:	4642      	mov	r2, r8
   b6146:	f001 fc55 	bl	b79f4 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b614a:	b368      	cbz	r0, b61a8 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b614c:	f44f 7700 	mov.w	r7, #512	; 0x200
   b6150:	e044      	b.n	b61dc <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b6152:	069b      	lsls	r3, r3, #26
   b6154:	d5d5      	bpl.n	b6102 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6156:	6883      	ldr	r3, [r0, #8]
   b6158:	891a      	ldrh	r2, [r3, #8]
   b615a:	6943      	ldr	r3, [r0, #20]
   b615c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b6160:	b29b      	uxth	r3, r3
   b6162:	e7cb      	b.n	b60fc <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count,
                       uint32_t* firstCluster, uint32_t startCluster = 0);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b6164:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6168:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b616c:	f1ba 0f00 	cmp.w	sl, #0
   b6170:	d108      	bne.n	b6184 <_ZN7FatFile4readEPvj+0xa8>
   b6172:	f1b9 0f00 	cmp.w	r9, #0
   b6176:	d105      	bne.n	b6184 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6178:	b95b      	cbnz	r3, b6192 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b617a:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b617c:	bf4c      	ite	mi
   b617e:	6a03      	ldrmi	r3, [r0, #32]
   b6180:	6a23      	ldrpl	r3, [r4, #32]
   b6182:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6184:	6921      	ldr	r1, [r4, #16]
   b6186:	68a0      	ldr	r0, [r4, #8]
   b6188:	f001 f927 	bl	b73da <_ZNK9FatVolume17clusterFirstBlockEm>
   b618c:	eb09 0100 	add.w	r1, r9, r0
   b6190:	e7ca      	b.n	b6128 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6192:	6921      	ldr	r1, [r4, #16]
   b6194:	465a      	mov	r2, fp
   b6196:	f001 f926 	bl	b73e6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b619a:	2800      	cmp	r0, #0
   b619c:	db04      	blt.n	b61a8 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b619e:	d1f1      	bne.n	b6184 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b61a0:	7823      	ldrb	r3, [r4, #0]
   b61a2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b61a6:	d143      	bne.n	b6230 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b61a8:	7863      	ldrb	r3, [r4, #1]
   b61aa:	f043 0302 	orr.w	r3, r3, #2
   b61ae:	7063      	strb	r3, [r4, #1]
  return -1;
   b61b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b61b4:	e03d      	b.n	b6232 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b61b6:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b61ba:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b61bc:	f04f 0200 	mov.w	r2, #0
   b61c0:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b61c4:	bf28      	it	cs
   b61c6:	4637      	movcs	r7, r6
   b61c8:	f001 f8e4 	bl	b7394 <_ZN8FatCache4readEmh>
      if (!pc) {
   b61cc:	2800      	cmp	r0, #0
   b61ce:	d0eb      	beq.n	b61a8 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b61d0:	eb00 010a 	add.w	r1, r0, sl
   b61d4:	463a      	mov	r2, r7
   b61d6:	4640      	mov	r0, r8
   b61d8:	f005 fd40 	bl	bbc5c <memcpy>
    m_curPosition += n;
   b61dc:	6963      	ldr	r3, [r4, #20]
   b61de:	443b      	add	r3, r7
    dst += n;
   b61e0:	44b8      	add	r8, r7
    m_curPosition += n;
   b61e2:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b61e4:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b61e6:	e791      	b.n	b610c <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b61e8:	7822      	ldrb	r2, [r4, #0]
   b61ea:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b61ec:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b61f0:	d406      	bmi.n	b6200 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b61f2:	7902      	ldrb	r2, [r0, #4]
   b61f4:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b61f8:	b2d2      	uxtb	r2, r2
   b61fa:	4592      	cmp	sl, r2
   b61fc:	bf28      	it	cs
   b61fe:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6200:	4299      	cmp	r1, r3
      n = 512*nb;
   b6202:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6206:	d208      	bcs.n	b621a <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b6208:	68a0      	ldr	r0, [r4, #8]
   b620a:	4653      	mov	r3, sl
   b620c:	6800      	ldr	r0, [r0, #0]
   b620e:	4642      	mov	r2, r8
   b6210:	f001 fc38 	bl	b7a84 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6214:	2800      	cmp	r0, #0
   b6216:	d1e1      	bne.n	b61dc <_ZN7FatFile4readEPvj+0x100>
   b6218:	e7c6      	b.n	b61a8 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b621a:	4453      	add	r3, sl
   b621c:	428b      	cmp	r3, r1
   b621e:	d9f3      	bls.n	b6208 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b6220:	3024      	adds	r0, #36	; 0x24
   b6222:	9101      	str	r1, [sp, #4]
   b6224:	f001 f88e 	bl	b7344 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6228:	9901      	ldr	r1, [sp, #4]
   b622a:	2800      	cmp	r0, #0
   b622c:	d1ec      	bne.n	b6208 <_ZN7FatFile4readEPvj+0x12c>
   b622e:	e7bb      	b.n	b61a8 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6230:	1ba8      	subs	r0, r5, r6
}
   b6232:	b003      	add	sp, #12
   b6234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6238 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6238:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b623a:	2201      	movs	r2, #1
   b623c:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6240:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6244:	4604      	mov	r4, r0
   b6246:	f7ff ff49 	bl	b60dc <_ZN7FatFile4readEPvj>
   b624a:	2801      	cmp	r0, #1
   b624c:	bf0a      	itet	eq
   b624e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b6252:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6256:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b625a:	b002      	add	sp, #8
   b625c:	bd70      	pop	{r4, r5, r6, pc}

000b625e <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b625e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6260:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b6262:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6266:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6268:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b626c:	d000      	beq.n	b6270 <_ZN7FatFile12readDirCacheEb+0x12>
   b626e:	b999      	cbnz	r1, b6298 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b6270:	2201      	movs	r2, #1
   b6272:	f10d 0107 	add.w	r1, sp, #7
   b6276:	4620      	mov	r0, r4
   b6278:	f7ff ff30 	bl	b60dc <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b627c:	b240      	sxtb	r0, r0
   b627e:	2801      	cmp	r0, #1
   b6280:	d002      	beq.n	b6288 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b6282:	2000      	movs	r0, #0
}
   b6284:	b003      	add	sp, #12
   b6286:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6288:	6963      	ldr	r3, [r4, #20]
   b628a:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b628c:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b628e:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b6290:	3030      	adds	r0, #48	; 0x30
   b6292:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6296:	e7f5      	b.n	b6284 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6298:	3320      	adds	r3, #32
   b629a:	e7f7      	b.n	b628c <_ZN7FatFile12readDirCacheEb+0x2e>

000b629c <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b629c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b62a0:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b62a2:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b62a4:	4604      	mov	r4, r0
   b62a6:	460d      	mov	r5, r1
  if (!isOpen()) {
   b62a8:	b162      	cbz	r2, b62c4 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b62aa:	6940      	ldr	r0, [r0, #20]
   b62ac:	4288      	cmp	r0, r1
   b62ae:	d002      	beq.n	b62b6 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b62b0:	b919      	cbnz	r1, b62ba <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b62b2:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b62b4:	6165      	str	r5, [r4, #20]
    return true;
   b62b6:	2001      	movs	r0, #1
   b62b8:	e006      	b.n	b62c8 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b62ba:	0716      	lsls	r6, r2, #28
   b62bc:	d506      	bpl.n	b62cc <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b62be:	69e3      	ldr	r3, [r4, #28]
   b62c0:	428b      	cmp	r3, r1
   b62c2:	d20b      	bcs.n	b62dc <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b62c4:	6127      	str	r7, [r4, #16]
  return false;
   b62c6:	2000      	movs	r0, #0
}
   b62c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b62cc:	0691      	lsls	r1, r2, #26
   b62ce:	d505      	bpl.n	b62dc <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b62d0:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b62d2:	891b      	ldrh	r3, [r3, #8]
   b62d4:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b62d8:	d9ec      	bls.n	b62b4 <_ZN7FatFile7seekSetEm+0x18>
   b62da:	e7f3      	b.n	b62c4 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b62dc:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b62e0:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b62e4:	1e43      	subs	r3, r0, #1
   b62e6:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b62ea:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b62ec:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b62ee:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b62f0:	42b3      	cmp	r3, r6
   b62f2:	d800      	bhi.n	b62f6 <_ZN7FatFile7seekSetEm+0x5a>
   b62f4:	b998      	cbnz	r0, b631e <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b62f6:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b62f8:	bf4c      	ite	mi
   b62fa:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b62fe:	6a23      	ldrpl	r3, [r4, #32]
   b6300:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6302:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b6306:	2e00      	cmp	r6, #0
   b6308:	d0d4      	beq.n	b62b4 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b630a:	6921      	ldr	r1, [r4, #16]
   b630c:	68a0      	ldr	r0, [r4, #8]
   b630e:	4642      	mov	r2, r8
   b6310:	f001 f869 	bl	b73e6 <_ZN9FatVolume6fatGetEmPm>
   b6314:	2800      	cmp	r0, #0
   b6316:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b631a:	dcf4      	bgt.n	b6306 <_ZN7FatFile7seekSetEm+0x6a>
   b631c:	e7d2      	b.n	b62c4 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b631e:	1af6      	subs	r6, r6, r3
   b6320:	e7ef      	b.n	b6302 <_ZN7FatFile7seekSetEm+0x66>

000b6322 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b6322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6324:	460f      	mov	r7, r1
   b6326:	4604      	mov	r4, r0
   b6328:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b632a:	2100      	movs	r1, #0
   b632c:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b632e:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6330:	f005 fcbc 	bl	bbcac <memset>
  m_vol = dirFile->m_vol;
   b6334:	68b8      	ldr	r0, [r7, #8]
   b6336:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6338:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b633a:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b633e:	6a3b      	ldr	r3, [r7, #32]
   b6340:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b6342:	016a      	lsls	r2, r5, #5
   b6344:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6348:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b634c:	071f      	lsls	r7, r3, #28
   b634e:	d444      	bmi.n	b63da <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6350:	f003 0317 	and.w	r3, r3, #23
   b6354:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6356:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b635a:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b635e:	bf04      	itt	eq
   b6360:	f043 0308 	orreq.w	r3, r3, #8
   b6364:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6366:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b636a:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b636c:	f006 0303 	and.w	r3, r6, #3
   b6370:	2b01      	cmp	r3, #1
   b6372:	d02c      	beq.n	b63ce <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6374:	2b02      	cmp	r3, #2
   b6376:	d028      	beq.n	b63ca <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6378:	bb7b      	cbnz	r3, b63da <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b637a:	0571      	lsls	r1, r6, #21
   b637c:	d42d      	bmi.n	b63da <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b637e:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b6380:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b6382:	78a1      	ldrb	r1, [r4, #2]
   b6384:	078b      	lsls	r3, r1, #30
   b6386:	d504      	bpl.n	b6392 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6388:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b638a:	06df      	lsls	r7, r3, #27
   b638c:	d425      	bmi.n	b63da <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b638e:	07dd      	lsls	r5, r3, #31
   b6390:	d423      	bmi.n	b63da <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b6392:	11b3      	asrs	r3, r6, #6
   b6394:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6398:	f006 0508 	and.w	r5, r6, #8
   b639c:	432b      	orrs	r3, r5
   b639e:	430b      	orrs	r3, r1
   b63a0:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b63a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b63a4:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b63a6:	1883      	adds	r3, r0, r2
   b63a8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b63ac:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b63b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b63b4:	0572      	lsls	r2, r6, #21
   b63b6:	d513      	bpl.n	b63e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b63b8:	b959      	cbnz	r1, b63d2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b63ba:	78a3      	ldrb	r3, [r4, #2]
   b63bc:	f043 0304 	orr.w	r3, r3, #4
   b63c0:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b63c2:	0473      	lsls	r3, r6, #17
   b63c4:	d410      	bmi.n	b63e8 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b63c6:	2001      	movs	r0, #1
}
   b63c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b63ca:	2303      	movs	r3, #3
   b63cc:	e7d8      	b.n	b6380 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b63ce:	2302      	movs	r3, #2
   b63d0:	e7d6      	b.n	b6380 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b63d2:	f001 f8a8 	bl	b7526 <_ZN9FatVolume9freeChainEm>
   b63d6:	2800      	cmp	r0, #0
   b63d8:	d1ef      	bne.n	b63ba <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b63da:	2000      	movs	r0, #0
   b63dc:	7020      	strb	r0, [r4, #0]
  return false;
   b63de:	e7f3      	b.n	b63c8 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b63e0:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b63e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b63e4:	61e3      	str	r3, [r4, #28]
   b63e6:	e7ec      	b.n	b63c2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b63e8:	69e1      	ldr	r1, [r4, #28]
   b63ea:	4620      	mov	r0, r4
   b63ec:	f7ff ff56 	bl	b629c <_ZN7FatFile7seekSetEm>
   b63f0:	2800      	cmp	r0, #0
   b63f2:	d1e8      	bne.n	b63c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b63f4:	e7f1      	b.n	b63da <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b63f6 <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b63f6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b63fa:	7803      	ldrb	r3, [r0, #0]
   b63fc:	4607      	mov	r7, r0
   b63fe:	460d      	mov	r5, r1
   b6400:	4692      	mov	sl, r2
    || (dirFile->curPosition() & 0X1F)) {
   b6402:	bb5b      	cbnz	r3, b645c <_ZN7FatFile8openNextEPS_i+0x66>
  if (isOpen() || !dirFile || !dirFile->isDir() 
   b6404:	b351      	cbz	r1, b645c <_ZN7FatFile8openNextEPS_i+0x66>
   b6406:	780b      	ldrb	r3, [r1, #0]
   b6408:	f013 0f70 	tst.w	r3, #112	; 0x70
   b640c:	d026      	beq.n	b645c <_ZN7FatFile8openNextEPS_i+0x66>
    || (dirFile->curPosition() & 0X1F)) {
   b640e:	694c      	ldr	r4, [r1, #20]
   b6410:	f014 041f 	ands.w	r4, r4, #31
   b6414:	d122      	bne.n	b645c <_ZN7FatFile8openNextEPS_i+0x66>
   b6416:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b6418:	2100      	movs	r1, #0
   b641a:	4628      	mov	r0, r5
    return m_curPosition;
   b641c:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b6420:	f7ff ff1d 	bl	b625e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6424:	b1d0      	cbz	r0, b645c <_ZN7FatFile8openNextEPS_i+0x66>
    if (dir->name[0] == DIR_NAME_FREE) {
   b6426:	7806      	ldrb	r6, [r0, #0]
   b6428:	b1c6      	cbz	r6, b645c <_ZN7FatFile8openNextEPS_i+0x66>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b642a:	2e2e      	cmp	r6, #46	; 0x2e
   b642c:	d010      	beq.n	b6450 <_ZN7FatFile8openNextEPS_i+0x5a>
   b642e:	2ee5      	cmp	r6, #229	; 0xe5
   b6430:	d00e      	beq.n	b6450 <_ZN7FatFile8openNextEPS_i+0x5a>
   b6432:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6434:	071a      	lsls	r2, r3, #28
   b6436:	d413      	bmi.n	b6460 <_ZN7FatFile8openNextEPS_i+0x6a>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b6438:	b964      	cbnz	r4, b6454 <_ZN7FatFile8openNextEPS_i+0x5e>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b643a:	9400      	str	r4, [sp, #0]
   b643c:	4653      	mov	r3, sl
   b643e:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b6442:	4629      	mov	r1, r5
   b6444:	4638      	mov	r0, r7
   b6446:	f7ff ff6c 	bl	b6322 <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b644a:	b002      	add	sp, #8
   b644c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b6450:	2400      	movs	r4, #0
   b6452:	e7e1      	b.n	b6418 <_ZN7FatFile8openNextEPS_i+0x22>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b6454:	f000 fa68 	bl	b6928 <_ZN7FatFile11lfnChecksumEPh>
   b6458:	4540      	cmp	r0, r8
   b645a:	d0ee      	beq.n	b643a <_ZN7FatFile8openNextEPS_i+0x44>
  return false;
   b645c:	2000      	movs	r0, #0
   b645e:	e7f4      	b.n	b644a <_ZN7FatFile8openNextEPS_i+0x54>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6460:	2b0f      	cmp	r3, #15
   b6462:	d1f5      	bne.n	b6450 <_ZN7FatFile8openNextEPS_i+0x5a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b6464:	0673      	lsls	r3, r6, #25
   b6466:	d5d7      	bpl.n	b6418 <_ZN7FatFile8openNextEPS_i+0x22>
        chksum = ldir->chksum;
   b6468:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b646c:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b6470:	e7d2      	b.n	b6418 <_ZN7FatFile8openNextEPS_i+0x22>
	...

000b6474 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b6474:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b6476:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b6478:	4604      	mov	r4, r0
  if (!isOpen()) {
   b647a:	b90b      	cbnz	r3, b6480 <_ZN7FatFile4syncEv+0xc>
    return true;
   b647c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b647e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b6480:	7883      	ldrb	r3, [r0, #2]
   b6482:	075a      	lsls	r2, r3, #29
   b6484:	d523      	bpl.n	b64ce <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b6486:	2101      	movs	r1, #1
   b6488:	f7ff fde8 	bl	b605c <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b648c:	4605      	mov	r5, r0
   b648e:	b928      	cbnz	r0, b649c <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b6490:	7863      	ldrb	r3, [r4, #1]
   b6492:	f043 0301 	orr.w	r3, r3, #1
   b6496:	7063      	strb	r3, [r4, #1]
  return false;
   b6498:	2000      	movs	r0, #0
   b649a:	e7f0      	b.n	b647e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b649c:	7803      	ldrb	r3, [r0, #0]
   b649e:	2be5      	cmp	r3, #229	; 0xe5
   b64a0:	d0f6      	beq.n	b6490 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b64a2:	7823      	ldrb	r3, [r4, #0]
   b64a4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b64a6:	bf44      	itt	mi
   b64a8:	69e3      	ldrmi	r3, [r4, #28]
   b64aa:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b64ac:	6a23      	ldr	r3, [r4, #32]
   b64ae:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b64b0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b64b2:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b64b4:	4b09      	ldr	r3, [pc, #36]	; (b64dc <_ZN7FatFile4syncEv+0x68>)
   b64b6:	681b      	ldr	r3, [r3, #0]
   b64b8:	b12b      	cbz	r3, b64c6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b64ba:	f100 0116 	add.w	r1, r0, #22
   b64be:	3018      	adds	r0, #24
   b64c0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b64c2:	8b2b      	ldrh	r3, [r5, #24]
   b64c4:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b64c6:	78a3      	ldrb	r3, [r4, #2]
   b64c8:	f023 0304 	bic.w	r3, r3, #4
   b64cc:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b64ce:	68a0      	ldr	r0, [r4, #8]
   b64d0:	f7ff fd6f 	bl	b5fb2 <_ZN9FatVolume9cacheSyncEv>
   b64d4:	2800      	cmp	r0, #0
   b64d6:	d0db      	beq.n	b6490 <_ZN7FatFile4syncEv+0x1c>
   b64d8:	e7d0      	b.n	b647c <_ZN7FatFile4syncEv+0x8>
   b64da:	bf00      	nop
   b64dc:	2003e684 	.word	0x2003e684

000b64e0 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b64e0:	b510      	push	{r4, lr}
   b64e2:	4604      	mov	r4, r0
  bool rtn = sync();
   b64e4:	f7ff ffc6 	bl	b6474 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b64e8:	2300      	movs	r3, #0
   b64ea:	7023      	strb	r3, [r4, #0]
}
   b64ec:	bd10      	pop	{r4, pc}

000b64ee <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b64ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   b64f0:	b093      	sub	sp, #76	; 0x4c
   b64f2:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b64f4:	2300      	movs	r3, #0
   b64f6:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile || !dirFile->isDir()) {
   b64f8:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b64fa:	9201      	str	r2, [sp, #4]
   b64fc:	4606      	mov	r6, r0
   b64fe:	460c      	mov	r4, r1
  if (isOpen() || !dirFile || !dirFile->isDir()) {
   b6500:	b113      	cbz	r3, b6508 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b6502:	2000      	movs	r0, #0
}
   b6504:	b013      	add	sp, #76	; 0x4c
   b6506:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile || !dirFile->isDir()) {
   b6508:	2900      	cmp	r1, #0
   b650a:	d0fa      	beq.n	b6502 <_ZN7FatFile4openEPS_PKci+0x14>
   b650c:	780b      	ldrb	r3, [r1, #0]
   b650e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6512:	d0f6      	beq.n	b6502 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6514:	7813      	ldrb	r3, [r2, #0]
   b6516:	2b2f      	cmp	r3, #47	; 0x2f
   b6518:	d112      	bne.n	b6540 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   b651a:	9a01      	ldr	r2, [sp, #4]
   b651c:	7813      	ldrb	r3, [r2, #0]
   b651e:	2b2f      	cmp	r3, #47	; 0x2f
   b6520:	d102      	bne.n	b6528 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   b6522:	3201      	adds	r2, #1
   b6524:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b6526:	e7f8      	b.n	b651a <_ZN7FatFile4openEPS_PKci+0x2c>
      return openRoot(dirFile->m_vol);
   b6528:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b652a:	b91b      	cbnz	r3, b6534 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   b652c:	4630      	mov	r0, r6
   b652e:	f7ff fdcf 	bl	b60d0 <_ZN7FatFile8openRootEP9FatVolume>
   b6532:	e7e7      	b.n	b6504 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6534:	a809      	add	r0, sp, #36	; 0x24
   b6536:	f7ff fd26 	bl	b5f86 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b653a:	2800      	cmp	r0, #0
   b653c:	d0e1      	beq.n	b6502 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b653e:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6540:	9801      	ldr	r0, [sp, #4]
   b6542:	aa01      	add	r2, sp, #4
   b6544:	a903      	add	r1, sp, #12
   b6546:	f000 fa15 	bl	b6974 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b654a:	2800      	cmp	r0, #0
   b654c:	d0d9      	beq.n	b6502 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b654e:	9b01      	ldr	r3, [sp, #4]
   b6550:	781b      	ldrb	r3, [r3, #0]
   b6552:	b19b      	cbz	r3, b657c <_ZN7FatFile4openEPS_PKci+0x8e>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6554:	2300      	movs	r3, #0
   b6556:	aa03      	add	r2, sp, #12
   b6558:	4621      	mov	r1, r4
   b655a:	4630      	mov	r0, r6
   b655c:	f000 fbec 	bl	b6d38 <_ZN7FatFile4openEPS_P7fname_ti>
   b6560:	2800      	cmp	r0, #0
   b6562:	d0ce      	beq.n	b6502 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6564:	4635      	mov	r5, r6
   b6566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6568:	ac09      	add	r4, sp, #36	; 0x24
   b656a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b656c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b656e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6570:	682b      	ldr	r3, [r5, #0]
   b6572:	6023      	str	r3, [r4, #0]
    close();
   b6574:	4630      	mov	r0, r6
   b6576:	f7ff ffb3 	bl	b64e0 <_ZN7FatFile5closeEv>
  while (1) {
   b657a:	e7e0      	b.n	b653e <_ZN7FatFile4openEPS_PKci+0x50>
  return open(dirFile, &fname, oflag);
   b657c:	463b      	mov	r3, r7
   b657e:	aa03      	add	r2, sp, #12
   b6580:	4621      	mov	r1, r4
   b6582:	4630      	mov	r0, r6
   b6584:	f000 fbd8 	bl	b6d38 <_ZN7FatFile4openEPS_P7fname_ti>
   b6588:	e7bc      	b.n	b6504 <_ZN7FatFile4openEPS_PKci+0x16>

000b658a <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b658a:	b500      	push	{lr}
   b658c:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b658e:	2300      	movs	r3, #0
   b6590:	460a      	mov	r2, r1
   b6592:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b6594:	4601      	mov	r1, r0
   b6596:	2301      	movs	r3, #1
   b6598:	a801      	add	r0, sp, #4
   b659a:	f7ff ffa8 	bl	b64ee <_ZN7FatFile4openEPS_PKci>
   b659e:	b110      	cbz	r0, b65a6 <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b65a0:	a801      	add	r0, sp, #4
   b65a2:	f000 fb14 	bl	b6bce <_ZN7FatFile6removeEv>
}
   b65a6:	b00b      	add	sp, #44	; 0x2c
   b65a8:	f85d fb04 	ldr.w	pc, [sp], #4

000b65ac <_ZN7FatFile8dirEntryEP14directoryEntry>:
bool FatFile::dirEntry(dir_t* dst) {
   b65ac:	b570      	push	{r4, r5, r6, lr}
   b65ae:	4606      	mov	r6, r0
   b65b0:	460c      	mov	r4, r1
  if (!sync()) {
   b65b2:	f7ff ff5f 	bl	b6474 <_ZN7FatFile4syncEv>
   b65b6:	4605      	mov	r5, r0
   b65b8:	b910      	cbnz	r0, b65c0 <_ZN7FatFile8dirEntryEP14directoryEntry+0x14>
  return false;
   b65ba:	2500      	movs	r5, #0
}
   b65bc:	4628      	mov	r0, r5
   b65be:	bd70      	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b65c0:	2100      	movs	r1, #0
   b65c2:	4630      	mov	r0, r6
   b65c4:	f7ff fd4a 	bl	b605c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b65c8:	4603      	mov	r3, r0
   b65ca:	2800      	cmp	r0, #0
   b65cc:	d0f5      	beq.n	b65ba <_ZN7FatFile8dirEntryEP14directoryEntry+0xe>
  memcpy(dst, dir, sizeof(dir_t));
   b65ce:	4621      	mov	r1, r4
   b65d0:	f100 0220 	add.w	r2, r0, #32
   b65d4:	f853 0b04 	ldr.w	r0, [r3], #4
   b65d8:	f841 0b04 	str.w	r0, [r1], #4
   b65dc:	4293      	cmp	r3, r2
   b65de:	d1f9      	bne.n	b65d4 <_ZN7FatFile8dirEntryEP14directoryEntry+0x28>
   b65e0:	e7ec      	b.n	b65bc <_ZN7FatFile8dirEntryEP14directoryEntry+0x10>

000b65e2 <_ZN7FatFile5mkdirEPS_P7fname_t>:
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   b65e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b65e4:	4604      	mov	r4, r0
   b65e6:	b089      	sub	sp, #36	; 0x24
  if (!parent || !parent->isDir()) {
   b65e8:	460e      	mov	r6, r1
   b65ea:	b911      	cbnz	r1, b65f2 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  return false;
   b65ec:	2000      	movs	r0, #0
}
   b65ee:	b009      	add	sp, #36	; 0x24
   b65f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!parent || !parent->isDir()) {
   b65f2:	780b      	ldrb	r3, [r1, #0]
   b65f4:	f013 0f70 	tst.w	r3, #112	; 0x70
   b65f8:	d0f8      	beq.n	b65ec <_ZN7FatFile5mkdirEPS_P7fname_t+0xa>
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
   b65fa:	f640 2302 	movw	r3, #2562	; 0xa02
   b65fe:	f000 fb9b 	bl	b6d38 <_ZN7FatFile4openEPS_P7fname_ti>
   b6602:	2800      	cmp	r0, #0
   b6604:	d0f2      	beq.n	b65ec <_ZN7FatFile5mkdirEPS_P7fname_t+0xa>
  m_flags = F_READ;
   b6606:	2701      	movs	r7, #1
  m_attr = FILE_ATTR_SUBDIR;
   b6608:	2510      	movs	r5, #16
  m_flags = F_READ;
   b660a:	70a7      	strb	r7, [r4, #2]
  m_attr = FILE_ATTR_SUBDIR;
   b660c:	7025      	strb	r5, [r4, #0]
  if (!addDirCluster()) {
   b660e:	4620      	mov	r0, r4
   b6610:	f7ff fce6 	bl	b5fe0 <_ZN7FatFile13addDirClusterEv>
   b6614:	2800      	cmp	r0, #0
   b6616:	d0e9      	beq.n	b65ec <_ZN7FatFile5mkdirEPS_P7fname_t+0xa>
  m_firstCluster = m_curCluster;
   b6618:	6923      	ldr	r3, [r4, #16]
   b661a:	6223      	str	r3, [r4, #32]
    seekSet(0);
   b661c:	2100      	movs	r1, #0
   b661e:	4620      	mov	r0, r4
   b6620:	f7ff fe3c 	bl	b629c <_ZN7FatFile7seekSetEm>
  if (!sync()) {
   b6624:	4620      	mov	r0, r4
   b6626:	f7ff ff25 	bl	b6474 <_ZN7FatFile4syncEv>
   b662a:	2800      	cmp	r0, #0
   b662c:	d0de      	beq.n	b65ec <_ZN7FatFile5mkdirEPS_P7fname_t+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b662e:	4639      	mov	r1, r7
   b6630:	4620      	mov	r0, r4
   b6632:	f7ff fd13 	bl	b605c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b6636:	2800      	cmp	r0, #0
   b6638:	d0d8      	beq.n	b65ec <_ZN7FatFile5mkdirEPS_P7fname_t+0xa>
  memcpy(&dot, dir, sizeof(dot));
   b663a:	466a      	mov	r2, sp
  dir->attributes = DIR_ATT_DIRECTORY;
   b663c:	72c5      	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
   b663e:	4603      	mov	r3, r0
   b6640:	f100 0c20 	add.w	ip, r0, #32
   b6644:	4615      	mov	r5, r2
   b6646:	6818      	ldr	r0, [r3, #0]
   b6648:	6859      	ldr	r1, [r3, #4]
   b664a:	4617      	mov	r7, r2
   b664c:	c703      	stmia	r7!, {r0, r1}
   b664e:	3308      	adds	r3, #8
   b6650:	4563      	cmp	r3, ip
   b6652:	463a      	mov	r2, r7
   b6654:	d1f7      	bne.n	b6646 <_ZN7FatFile5mkdirEPS_P7fname_t+0x64>
    dot.name[i] = ' ';
   b6656:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  block = m_vol->clusterFirstBlock(m_firstCluster);
   b665a:	6a21      	ldr	r1, [r4, #32]
   b665c:	68a0      	ldr	r0, [r4, #8]
    dot.name[i] = ' ';
   b665e:	f8cd 3001 	str.w	r3, [sp, #1]
   b6662:	f8cd 3005 	str.w	r3, [sp, #5]
   b6666:	f8ad 3009 	strh.w	r3, [sp, #9]
  block = m_vol->clusterFirstBlock(m_firstCluster);
   b666a:	f000 feb6 	bl	b73da <_ZNK9FatVolume17clusterFirstBlockEm>
   b666e:	4601      	mov	r1, r0
    return m_cache.read(blockNumber, options);
   b6670:	68a0      	ldr	r0, [r4, #8]
   b6672:	2201      	movs	r2, #1
   b6674:	3024      	adds	r0, #36	; 0x24
   b6676:	f000 fe8d 	bl	b7394 <_ZN8FatCache4readEmh>
  if (!pc) {
   b667a:	4603      	mov	r3, r0
   b667c:	2800      	cmp	r0, #0
   b667e:	d0b5      	beq.n	b65ec <_ZN7FatFile5mkdirEPS_P7fname_t+0xa>
  memcpy(&pc->dir[0], &dot, sizeof(dot));
   b6680:	222e      	movs	r2, #46	; 0x2e
   b6682:	f88d 2000 	strb.w	r2, [sp]
   b6686:	46ac      	mov	ip, r5
   b6688:	4607      	mov	r7, r0
   b668a:	f10d 0e20 	add.w	lr, sp, #32
   b668e:	4662      	mov	r2, ip
   b6690:	ca03      	ldmia	r2!, {r0, r1}
   b6692:	4572      	cmp	r2, lr
   b6694:	6038      	str	r0, [r7, #0]
   b6696:	6079      	str	r1, [r7, #4]
   b6698:	4694      	mov	ip, r2
   b669a:	f107 0708 	add.w	r7, r7, #8
   b669e:	d1f6      	bne.n	b668e <_ZN7FatFile5mkdirEPS_P7fname_t+0xac>
  dot.name[1] = '.';
   b66a0:	222e      	movs	r2, #46	; 0x2e
   b66a2:	f88d 2001 	strb.w	r2, [sp, #1]
  dot.firstClusterLow = parent->m_firstCluster & 0XFFFF;
   b66a6:	6a32      	ldr	r2, [r6, #32]
   b66a8:	f8ad 201a 	strh.w	r2, [sp, #26]
  dot.firstClusterHigh = parent->m_firstCluster >> 16;
   b66ac:	0c11      	lsrs	r1, r2, #16
   b66ae:	f8ad 1014 	strh.w	r1, [sp, #20]
  memcpy(&pc->dir[1], &dot, sizeof(dot));
   b66b2:	462a      	mov	r2, r5
   b66b4:	3320      	adds	r3, #32
   b66b6:	ae08      	add	r6, sp, #32
   b66b8:	4615      	mov	r5, r2
   b66ba:	cd03      	ldmia	r5!, {r0, r1}
   b66bc:	42b5      	cmp	r5, r6
   b66be:	6018      	str	r0, [r3, #0]
   b66c0:	6059      	str	r1, [r3, #4]
   b66c2:	462a      	mov	r2, r5
   b66c4:	f103 0308 	add.w	r3, r3, #8
   b66c8:	d1f6      	bne.n	b66b8 <_ZN7FatFile5mkdirEPS_P7fname_t+0xd6>
  return m_vol->cacheSync();
   b66ca:	68a0      	ldr	r0, [r4, #8]
   b66cc:	f7ff fc71 	bl	b5fb2 <_ZN9FatVolume9cacheSyncEv>
   b66d0:	e78d      	b.n	b65ee <_ZN7FatFile5mkdirEPS_P7fname_t+0xc>

000b66d2 <_ZN7FatFile5mkdirEPS_PKcb>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   b66d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b66d4:	b093      	sub	sp, #76	; 0x4c
   b66d6:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b66d8:	2300      	movs	r3, #0
   b66da:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !parent || !parent->isDir()) {
   b66dc:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   b66de:	9201      	str	r2, [sp, #4]
   b66e0:	4606      	mov	r6, r0
   b66e2:	460c      	mov	r4, r1
  if (isOpen() || !parent || !parent->isDir()) {
   b66e4:	b113      	cbz	r3, b66ec <_ZN7FatFile5mkdirEPS_PKcb+0x1a>
  return false;
   b66e6:	2000      	movs	r0, #0
}
   b66e8:	b013      	add	sp, #76	; 0x4c
   b66ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent || !parent->isDir()) {
   b66ec:	2900      	cmp	r1, #0
   b66ee:	d0fa      	beq.n	b66e6 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
   b66f0:	780b      	ldrb	r3, [r1, #0]
   b66f2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b66f6:	d0f6      	beq.n	b66e6 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  if (isDirSeparator(*path)) {
   b66f8:	7813      	ldrb	r3, [r2, #0]
   b66fa:	2b2f      	cmp	r3, #47	; 0x2f
   b66fc:	d10d      	bne.n	b671a <_ZN7FatFile5mkdirEPS_PKcb+0x48>
    while (isDirSeparator(*path)) {
   b66fe:	9a01      	ldr	r2, [sp, #4]
   b6700:	7813      	ldrb	r3, [r2, #0]
   b6702:	2b2f      	cmp	r3, #47	; 0x2f
   b6704:	d102      	bne.n	b670c <_ZN7FatFile5mkdirEPS_PKcb+0x3a>
      path++;
   b6706:	3201      	adds	r2, #1
   b6708:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b670a:	e7f8      	b.n	b66fe <_ZN7FatFile5mkdirEPS_PKcb+0x2c>
    return m_attr;
   b670c:	68a1      	ldr	r1, [r4, #8]
   b670e:	a809      	add	r0, sp, #36	; 0x24
   b6710:	f7ff fc39 	bl	b5f86 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(parent->m_vol)) {
   b6714:	2800      	cmp	r0, #0
   b6716:	d0e6      	beq.n	b66e6 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    parent = &tmpDir;
   b6718:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b671a:	9801      	ldr	r0, [sp, #4]
   b671c:	aa01      	add	r2, sp, #4
   b671e:	a903      	add	r1, sp, #12
   b6720:	f000 f928 	bl	b6974 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b6724:	2800      	cmp	r0, #0
   b6726:	d0de      	beq.n	b66e6 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    if (!*path) {
   b6728:	9b01      	ldr	r3, [sp, #4]
   b672a:	781b      	ldrb	r3, [r3, #0]
   b672c:	b1e3      	cbz	r3, b6768 <_ZN7FatFile5mkdirEPS_PKcb+0x96>
    if (!open(parent, &fname, O_RDONLY)) {
   b672e:	2300      	movs	r3, #0
   b6730:	aa03      	add	r2, sp, #12
   b6732:	4621      	mov	r1, r4
   b6734:	4630      	mov	r0, r6
   b6736:	f000 faff 	bl	b6d38 <_ZN7FatFile4openEPS_P7fname_ti>
   b673a:	b158      	cbz	r0, b6754 <_ZN7FatFile5mkdirEPS_PKcb+0x82>
    tmpDir = *this;
   b673c:	4635      	mov	r5, r6
   b673e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6740:	ac09      	add	r4, sp, #36	; 0x24
   b6742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6748:	682b      	ldr	r3, [r5, #0]
   b674a:	6023      	str	r3, [r4, #0]
    close();
   b674c:	4630      	mov	r0, r6
   b674e:	f7ff fec7 	bl	b64e0 <_ZN7FatFile5closeEv>
  while (1) {
   b6752:	e7e1      	b.n	b6718 <_ZN7FatFile5mkdirEPS_PKcb+0x46>
      if (!pFlag || !mkdir(parent, &fname)) {
   b6754:	2f00      	cmp	r7, #0
   b6756:	d0c6      	beq.n	b66e6 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
   b6758:	aa03      	add	r2, sp, #12
   b675a:	4621      	mov	r1, r4
   b675c:	4630      	mov	r0, r6
   b675e:	f7ff ff40 	bl	b65e2 <_ZN7FatFile5mkdirEPS_P7fname_t>
   b6762:	2800      	cmp	r0, #0
   b6764:	d1ea      	bne.n	b673c <_ZN7FatFile5mkdirEPS_PKcb+0x6a>
   b6766:	e7be      	b.n	b66e6 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  return mkdir(parent, &fname);
   b6768:	aa03      	add	r2, sp, #12
   b676a:	4621      	mov	r1, r4
   b676c:	4630      	mov	r0, r6
   b676e:	f7ff ff38 	bl	b65e2 <_ZN7FatFile5mkdirEPS_P7fname_t>
   b6772:	e7b9      	b.n	b66e8 <_ZN7FatFile5mkdirEPS_PKcb+0x16>

000b6774 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6778:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b677a:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b677c:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b677e:	4604      	mov	r4, r0
   b6780:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6782:	d55b      	bpl.n	b683c <_ZN7FatFile5writeEPKvj+0xc8>
   b6784:	7883      	ldrb	r3, [r0, #2]
   b6786:	079a      	lsls	r2, r3, #30
   b6788:	d558      	bpl.n	b683c <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b678a:	071b      	lsls	r3, r3, #28
   b678c:	d451      	bmi.n	b6832 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b678e:	6963      	ldr	r3, [r4, #20]
   b6790:	43db      	mvns	r3, r3
   b6792:	42bb      	cmp	r3, r7
   b6794:	d352      	bcc.n	b683c <_ZN7FatFile5writeEPKvj+0xc8>
   b6796:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6798:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b679c:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b679e:	f1b8 0f00 	cmp.w	r8, #0
   b67a2:	f000 8091 	beq.w	b68c8 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b67a6:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b67a8:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b67aa:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b67ae:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b67b2:	d10e      	bne.n	b67d2 <_ZN7FatFile5writeEPKvj+0x5e>
   b67b4:	b96d      	cbnz	r5, b67d2 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b67b6:	6921      	ldr	r1, [r4, #16]
   b67b8:	2900      	cmp	r1, #0
   b67ba:	d046      	beq.n	b684a <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b67bc:	4652      	mov	r2, sl
   b67be:	f000 fe12 	bl	b73e6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b67c2:	2800      	cmp	r0, #0
   b67c4:	db3a      	blt.n	b683c <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b67c6:	d104      	bne.n	b67d2 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b67c8:	4620      	mov	r0, r4
   b67ca:	f7ff fbff 	bl	b5fcc <_ZN7FatFile10addClusterEv>
   b67ce:	2800      	cmp	r0, #0
   b67d0:	d034      	beq.n	b683c <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b67d2:	6921      	ldr	r1, [r4, #16]
   b67d4:	68a0      	ldr	r0, [r4, #8]
   b67d6:	f000 fe00 	bl	b73da <_ZNK9FatVolume17clusterFirstBlockEm>
   b67da:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b67dc:	68a0      	ldr	r0, [r4, #8]
   b67de:	b915      	cbnz	r5, b67e6 <_ZN7FatFile5writeEPKvj+0x72>
   b67e0:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b67e4:	d23f      	bcs.n	b6866 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b67e6:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b67ea:	4546      	cmp	r6, r8
   b67ec:	bf28      	it	cs
   b67ee:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b67f0:	2d00      	cmp	r5, #0
   b67f2:	d136      	bne.n	b6862 <_ZN7FatFile5writeEPKvj+0xee>
   b67f4:	6962      	ldr	r2, [r4, #20]
   b67f6:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b67f8:	429a      	cmp	r2, r3
   b67fa:	bf34      	ite	cc
   b67fc:	2201      	movcc	r2, #1
   b67fe:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6800:	3024      	adds	r0, #36	; 0x24
   b6802:	f000 fdc7 	bl	b7394 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6806:	b1c8      	cbz	r0, b683c <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6808:	4428      	add	r0, r5
   b680a:	4632      	mov	r2, r6
   b680c:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b680e:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6810:	f005 fa24 	bl	bbc5c <memcpy>
      if (512 == (n + blockOffset)) {
   b6814:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6818:	d104      	bne.n	b6824 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b681a:	68a0      	ldr	r0, [r4, #8]
   b681c:	3024      	adds	r0, #36	; 0x24
   b681e:	f000 fd91 	bl	b7344 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b6822:	b158      	cbz	r0, b683c <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6824:	6963      	ldr	r3, [r4, #20]
   b6826:	4433      	add	r3, r6
   b6828:	6163      	str	r3, [r4, #20]
    src += n;
   b682a:	44b1      	add	r9, r6
    nToWrite -= n;
   b682c:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6830:	e7b4      	b.n	b679c <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6832:	69c1      	ldr	r1, [r0, #28]
   b6834:	f7ff fd32 	bl	b629c <_ZN7FatFile7seekSetEm>
   b6838:	2800      	cmp	r0, #0
   b683a:	d1a8      	bne.n	b678e <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b683c:	7863      	ldrb	r3, [r4, #1]
   b683e:	f043 0301 	orr.w	r3, r3, #1
   b6842:	7063      	strb	r3, [r4, #1]
  return -1;
   b6844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6848:	e050      	b.n	b68ec <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b684a:	6a23      	ldr	r3, [r4, #32]
   b684c:	b93b      	cbnz	r3, b685e <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b684e:	4620      	mov	r0, r4
   b6850:	f7ff fbbc 	bl	b5fcc <_ZN7FatFile10addClusterEv>
   b6854:	2800      	cmp	r0, #0
   b6856:	d0f1      	beq.n	b683c <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6858:	6923      	ldr	r3, [r4, #16]
   b685a:	6223      	str	r3, [r4, #32]
   b685c:	e7b9      	b.n	b67d2 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b685e:	6123      	str	r3, [r4, #16]
   b6860:	e7b7      	b.n	b67d2 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b6862:	2201      	movs	r2, #1
   b6864:	e7cc      	b.n	b6800 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b6866:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b686a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b686c:	d31b      	bcc.n	b68a6 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b686e:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6872:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6876:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6878:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b687c:	4573      	cmp	r3, lr
   b687e:	bf28      	it	cs
   b6880:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6882:	4291      	cmp	r1, r2
      n = 512*nb;
   b6884:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6888:	d307      	bcc.n	b689a <_ZN7FatFile5writeEPKvj+0x126>
   b688a:	441a      	add	r2, r3
   b688c:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b688e:	bf82      	ittt	hi
   b6890:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b6894:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6898:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b689a:	68a5      	ldr	r5, [r4, #8]
   b689c:	464a      	mov	r2, r9
   b689e:	6828      	ldr	r0, [r5, #0]
   b68a0:	f001 f9a7 	bl	b7bf2 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b68a4:	e7bd      	b.n	b6822 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b68a6:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b68a8:	bf02      	ittt	eq
   b68aa:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b68ae:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b68b2:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b68b4:	68a3      	ldr	r3, [r4, #8]
   b68b6:	464a      	mov	r2, r9
   b68b8:	6818      	ldr	r0, [r3, #0]
   b68ba:	f001 f924 	bl	b7b06 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b68be:	2800      	cmp	r0, #0
   b68c0:	d0bc      	beq.n	b683c <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b68c2:	f44f 7600 	mov.w	r6, #512	; 0x200
   b68c6:	e7ad      	b.n	b6824 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b68c8:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b68ca:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b68cc:	42b2      	cmp	r2, r6
   b68ce:	d204      	bcs.n	b68da <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b68d0:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b68d2:	f043 0304 	orr.w	r3, r3, #4
   b68d6:	70a3      	strb	r3, [r4, #2]
   b68d8:	e003      	b.n	b68e2 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b68da:	4a08      	ldr	r2, [pc, #32]	; (b68fc <_ZN7FatFile5writeEPKvj+0x188>)
   b68dc:	6812      	ldr	r2, [r2, #0]
   b68de:	2a00      	cmp	r2, #0
   b68e0:	d1f7      	bne.n	b68d2 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b68e2:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b68e6:	2b00      	cmp	r3, #0
   b68e8:	db02      	blt.n	b68f0 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b68ea:	4638      	mov	r0, r7
}
   b68ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b68f0:	4620      	mov	r0, r4
   b68f2:	f7ff fdbf 	bl	b6474 <_ZN7FatFile4syncEv>
   b68f6:	2800      	cmp	r0, #0
   b68f8:	d1f7      	bne.n	b68ea <_ZN7FatFile5writeEPKvj+0x176>
   b68fa:	e79f      	b.n	b683c <_ZN7FatFile5writeEPKvj+0xc8>
   b68fc:	2003e684 	.word	0x2003e684

000b6900 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b6900:	2904      	cmp	r1, #4
   b6902:	d804      	bhi.n	b690e <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6904:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6908:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b690c:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b690e:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6910:	bf9b      	ittet	ls
   b6912:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b6916:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b691a:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b691c:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b691e:	bf84      	itt	hi
   b6920:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6924:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b6926:	4770      	bx	lr

000b6928 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6928:	1e41      	subs	r1, r0, #1
   b692a:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b692e:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6930:	0842      	lsrs	r2, r0, #1
   b6932:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b6936:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b693a:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b693e:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6940:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6942:	d1f5      	bne.n	b6930 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b6944:	4770      	bx	lr

000b6946 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b6946:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6948:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b694a:	4604      	mov	r4, r0
   b694c:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b694e:	b923      	cbnz	r3, b695a <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b6950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b6954:	6889      	ldr	r1, [r1, #8]
   b6956:	f7ff bbbb 	b.w	b60d0 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b695a:	2224      	movs	r2, #36	; 0x24
   b695c:	2100      	movs	r1, #0
   b695e:	f005 f9a5 	bl	bbcac <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b6962:	2310      	movs	r3, #16
  m_flags = F_READ;
   b6964:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b6966:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6968:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b696a:	68ab      	ldr	r3, [r5, #8]
   b696c:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b696e:	68eb      	ldr	r3, [r5, #12]
   b6970:	6223      	str	r3, [r4, #32]
}
   b6972:	bd38      	pop	{r3, r4, r5, pc}

000b6974 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b6974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6978:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b697a:	f810 3b01 	ldrb.w	r3, [r0], #1
   b697e:	2b20      	cmp	r3, #32
   b6980:	d0fa      	beq.n	b6978 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6982:	4d6a      	ldr	r5, [pc, #424]	; (b6b2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b6984:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b6986:	2400      	movs	r4, #0
    c = path[len];
   b6988:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b698a:	b1c3      	cbz	r3, b69be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b698c:	2b2f      	cmp	r3, #47	; 0x2f
   b698e:	d016      	beq.n	b69be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6990:	2b5c      	cmp	r3, #92	; 0x5c
   b6992:	d102      	bne.n	b699a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b6994:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b6996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b699a:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b699e:	b2c0      	uxtb	r0, r0
   b69a0:	281d      	cmp	r0, #29
   b69a2:	d803      	bhi.n	b69ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b69a4:	fa25 f000 	lsr.w	r0, r5, r0
   b69a8:	07c0      	lsls	r0, r0, #31
   b69aa:	d4f3      	bmi.n	b6994 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b69ac:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b69b0:	283c      	cmp	r0, #60	; 0x3c
   b69b2:	d0ef      	beq.n	b6994 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b69b4:	3b20      	subs	r3, #32
   b69b6:	2b5e      	cmp	r3, #94	; 0x5e
   b69b8:	d8ec      	bhi.n	b6994 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b69ba:	3401      	adds	r4, #1
    c = path[len];
   b69bc:	e7e4      	b.n	b6988 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b69be:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b69c0:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b69c2:	4607      	mov	r7, r0
   b69c4:	f810 5b01 	ldrb.w	r5, [r0], #1
   b69c8:	2d20      	cmp	r5, #32
   b69ca:	d0fa      	beq.n	b69c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b69cc:	2d2f      	cmp	r5, #47	; 0x2f
   b69ce:	d0f8      	beq.n	b69c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b69d0:	6017      	str	r7, [r2, #0]
  while (len) {
   b69d2:	b14c      	cbz	r4, b69e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b69d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b69d8:	2a2e      	cmp	r2, #46	; 0x2e
   b69da:	d001      	beq.n	b69e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b69dc:	2a20      	cmp	r2, #32
   b69de:	d101      	bne.n	b69e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b69e0:	3c01      	subs	r4, #1
  while (len) {
   b69e2:	e7f6      	b.n	b69d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b69e4:	2cff      	cmp	r4, #255	; 0xff
   b69e6:	dcd5      	bgt.n	b6994 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b69e8:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b69ec:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b69f0:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b69f2:	f8c1 300d 	str.w	r3, [r1, #13]
   b69f6:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b69f8:	f04f 0800 	mov.w	r8, #0
   b69fc:	f816 3008 	ldrb.w	r3, [r6, r8]
   b6a00:	2b2e      	cmp	r3, #46	; 0x2e
   b6a02:	d001      	beq.n	b6a08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b6a04:	2b20      	cmp	r3, #32
   b6a06:	d102      	bne.n	b6a0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b6a08:	f108 0801 	add.w	r8, r8, #1
   b6a0c:	e7f6      	b.n	b69fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b6a0e:	fab8 f088 	clz	r0, r8
   b6a12:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6a14:	1e65      	subs	r5, r4, #1
   b6a16:	1c6b      	adds	r3, r5, #1
   b6a18:	d002      	beq.n	b6a20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b6a1a:	5d73      	ldrb	r3, [r6, r5]
   b6a1c:	2b2e      	cmp	r3, #46	; 0x2e
   b6a1e:	d114      	bne.n	b6a4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6a20:	f04f 0900 	mov.w	r9, #0
   b6a24:	2707      	movs	r7, #7
   b6a26:	464a      	mov	r2, r9
   b6a28:	46ca      	mov	sl, r9
   b6a2a:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6a2e:	45a0      	cmp	r8, r4
   b6a30:	da68      	bge.n	b6b04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b6a32:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b6a36:	2b20      	cmp	r3, #32
   b6a38:	d003      	beq.n	b6a42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6a3a:	2b2e      	cmp	r3, #46	; 0x2e
   b6a3c:	d107      	bne.n	b6a4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6a3e:	45a8      	cmp	r8, r5
   b6a40:	d012      	beq.n	b6a68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b6a42:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b6a44:	f108 0801 	add.w	r8, r8, #1
   b6a48:	e7f1      	b.n	b6a2e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6a4a:	3d01      	subs	r5, #1
   b6a4c:	e7e3      	b.n	b6a16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6a4e:	2b22      	cmp	r3, #34	; 0x22
   b6a50:	d008      	beq.n	b6a64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b6a52:	2b7c      	cmp	r3, #124	; 0x7c
   b6a54:	d006      	beq.n	b6a64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b6a56:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6a5a:	f1bc 0f05 	cmp.w	ip, #5
   b6a5e:	d80a      	bhi.n	b6a76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6a60:	2b2d      	cmp	r3, #45	; 0x2d
   b6a62:	d012      	beq.n	b6a8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6a64:	45a8      	cmp	r8, r5
   b6a66:	d15b      	bne.n	b6b20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6a68:	2f0a      	cmp	r7, #10
   b6a6a:	d04a      	beq.n	b6b02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6a6c:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6a6e:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6a70:	f04f 0e10 	mov.w	lr, #16
   b6a74:	e7e6      	b.n	b6a44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b6a76:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6a7a:	f1bc 0f05 	cmp.w	ip, #5
   b6a7e:	d9f1      	bls.n	b6a64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6a80:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6a84:	f1bc 0f02 	cmp.w	ip, #2
   b6a88:	d9ec      	bls.n	b6a64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6a8a:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6a8e:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6a92:	d8e7      	bhi.n	b6a64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6a94:	45a8      	cmp	r8, r5
   b6a96:	d0e7      	beq.n	b6a68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6a98:	42ba      	cmp	r2, r7
   b6a9a:	d830      	bhi.n	b6afe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6a9c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6aa0:	f1bc 0f19 	cmp.w	ip, #25
   b6aa4:	d81a      	bhi.n	b6adc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b6aa6:	3b20      	subs	r3, #32
        lc |= bit;
   b6aa8:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6aac:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6aae:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b6ab2:	f102 0c01 	add.w	ip, r2, #1
   b6ab6:	fa5f fc8c 	uxtb.w	ip, ip
   b6aba:	440a      	add	r2, r1
      if (i < 7) {
   b6abc:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b6ac0:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b6ac2:	d801      	bhi.n	b6ac8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b6ac4:	f881 c00c 	strb.w	ip, [r1, #12]
   b6ac8:	4662      	mov	r2, ip
   b6aca:	e7bb      	b.n	b6a44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b6acc:	45a8      	cmp	r8, r5
   b6ace:	dc18      	bgt.n	b6b02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b6ad0:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b6ad2:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6ad4:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6ad6:	f04f 0e10 	mov.w	lr, #16
   b6ada:	e7b2      	b.n	b6a42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b6adc:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b6ae0:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b6ae4:	bf98      	it	ls
   b6ae6:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b6aea:	e7e2      	b.n	b6ab2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b6aec:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b6aee:	2001      	movs	r0, #1
   b6af0:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b6af2:	4419      	add	r1, r3
   b6af4:	237e      	movs	r3, #126	; 0x7e
   b6af6:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b6af8:	2331      	movs	r3, #49	; 0x31
   b6afa:	738b      	strb	r3, [r1, #14]
   b6afc:	e74b      	b.n	b6996 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b6afe:	2f0a      	cmp	r7, #10
   b6b00:	d1e4      	bne.n	b6acc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b6b02:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b6b04:	7b4b      	ldrb	r3, [r1, #13]
   b6b06:	2b20      	cmp	r3, #32
   b6b08:	f43f af44 	beq.w	b6994 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b6b0c:	2800      	cmp	r0, #0
   b6b0e:	d0ed      	beq.n	b6aec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b6b10:	ea1a 0f09 	tst.w	sl, r9
   b6b14:	bf18      	it	ne
   b6b16:	f04f 0902 	movne.w	r9, #2
   b6b1a:	f881 9000 	strb.w	r9, [r1]
   b6b1e:	e73a      	b.n	b6996 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b6b20:	42ba      	cmp	r2, r7
   b6b22:	d8ec      	bhi.n	b6afe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b6b24:	2000      	movs	r0, #0
      c = '_';
   b6b26:	235f      	movs	r3, #95	; 0x5f
   b6b28:	e7c3      	b.n	b6ab2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b6b2a:	bf00      	nop
   b6b2c:	31000101 	.word	0x31000101

000b6b30 <_ZN7FatFile9printNameEP5Print>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printName(print_t* pr) {
   b6b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6b34:	b08e      	sub	sp, #56	; 0x38
  size_t n = 0;
  uint16_t u;
  uint8_t buf[13];
  uint8_t i;

  if (!isLFN()) {
   b6b36:	78c3      	ldrb	r3, [r0, #3]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6b38:	2400      	movs	r4, #0
size_t FatFile::printName(print_t* pr) {
   b6b3a:	4605      	mov	r5, r0
   b6b3c:	4688      	mov	r8, r1
   b6b3e:	9405      	str	r4, [sp, #20]
  if (!isLFN()) {
   b6b40:	b933      	cbnz	r3, b6b50 <_ZN7FatFile9printNameEP5Print+0x20>
    return printSFN(pr);
   b6b42:	f000 fbee 	bl	b7322 <_ZN7FatFile8printSFNEP5Print>
   b6b46:	4604      	mov	r4, r0
  }
  return n;

fail:
  return 0;
}
   b6b48:	4620      	mov	r0, r4
   b6b4a:	b00e      	add	sp, #56	; 0x38
   b6b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!dirFile.openCluster(this)) {
   b6b50:	4601      	mov	r1, r0
   b6b52:	a805      	add	r0, sp, #20
   b6b54:	f7ff fef7 	bl	b6946 <_ZN7FatFile11openClusterEPS_>
   b6b58:	2800      	cmp	r0, #0
   b6b5a:	d036      	beq.n	b6bca <_ZN7FatFile9printNameEP5Print+0x9a>
   b6b5c:	2701      	movs	r7, #1
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b6b5e:	78eb      	ldrb	r3, [r5, #3]
   b6b60:	fa5f f987 	uxtb.w	r9, r7
   b6b64:	454b      	cmp	r3, r9
   b6b66:	d3ef      	bcc.n	b6b48 <_ZN7FatFile9printNameEP5Print+0x18>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b6b68:	88a9      	ldrh	r1, [r5, #4]
   b6b6a:	1bc9      	subs	r1, r1, r7
   b6b6c:	0149      	lsls	r1, r1, #5
   b6b6e:	a805      	add	r0, sp, #20
   b6b70:	f7ff fb94 	bl	b629c <_ZN7FatFile7seekSetEm>
   b6b74:	b348      	cbz	r0, b6bca <_ZN7FatFile9printNameEP5Print+0x9a>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b6b76:	2100      	movs	r1, #0
   b6b78:	a805      	add	r0, sp, #20
   b6b7a:	f7ff fb70 	bl	b625e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6b7e:	4606      	mov	r6, r0
   b6b80:	b318      	cbz	r0, b6bca <_ZN7FatFile9printNameEP5Print+0x9a>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b6b82:	7ac3      	ldrb	r3, [r0, #11]
   b6b84:	2b0f      	cmp	r3, #15
   b6b86:	d120      	bne.n	b6bca <_ZN7FatFile9printNameEP5Print+0x9a>
   b6b88:	7803      	ldrb	r3, [r0, #0]
   b6b8a:	f003 031f 	and.w	r3, r3, #31
   b6b8e:	454b      	cmp	r3, r9
   b6b90:	d11b      	bne.n	b6bca <_ZN7FatFile9printNameEP5Print+0x9a>
   b6b92:	f10d 0a04 	add.w	sl, sp, #4
    for (i = 0; i < 13; i++) {
   b6b96:	2200      	movs	r2, #0
   b6b98:	46d1      	mov	r9, sl
      u = lfnGetChar(ldir, i);
   b6b9a:	4611      	mov	r1, r2
   b6b9c:	4630      	mov	r0, r6
   b6b9e:	f7ff feaf 	bl	b6900 <_ZL10lfnGetCharP18longDirectoryEntryh>
      if (u == 0) {
   b6ba2:	b150      	cbz	r0, b6bba <_ZN7FatFile9printNameEP5Print+0x8a>
    for (i = 0; i < 13; i++) {
   b6ba4:	3201      	adds	r2, #1
   b6ba6:	287f      	cmp	r0, #127	; 0x7f
   b6ba8:	b2d2      	uxtb	r2, r2
   b6baa:	bf28      	it	cs
   b6bac:	203f      	movcs	r0, #63	; 0x3f
   b6bae:	2a0d      	cmp	r2, #13
      buf[i] = u < 0X7F ? u : '?';
   b6bb0:	f80a 0b01 	strb.w	r0, [sl], #1
      n++;
   b6bb4:	f104 0401 	add.w	r4, r4, #1
    for (i = 0; i < 13; i++) {
   b6bb8:	d1ef      	bne.n	b6b9a <_ZN7FatFile9printNameEP5Print+0x6a>
    pr->write(buf, i);
   b6bba:	f8d8 3000 	ldr.w	r3, [r8]
   b6bbe:	4649      	mov	r1, r9
   b6bc0:	68db      	ldr	r3, [r3, #12]
   b6bc2:	4640      	mov	r0, r8
   b6bc4:	4798      	blx	r3
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b6bc6:	3701      	adds	r7, #1
   b6bc8:	e7c9      	b.n	b6b5e <_ZN7FatFile9printNameEP5Print+0x2e>
  return 0;
   b6bca:	2400      	movs	r4, #0
   b6bcc:	e7bc      	b.n	b6b48 <_ZN7FatFile9printNameEP5Print+0x18>

000b6bce <_ZN7FatFile6removeEv>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b6bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6bd2:	b08a      	sub	sp, #40	; 0x28
   b6bd4:	2300      	movs	r3, #0
   b6bd6:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6bd8:	7803      	ldrb	r3, [r0, #0]
   b6bda:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b6bdc:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6bde:	d50a      	bpl.n	b6bf6 <_ZN7FatFile6removeEv+0x28>
   b6be0:	7883      	ldrb	r3, [r0, #2]
   b6be2:	079a      	lsls	r2, r3, #30
   b6be4:	d507      	bpl.n	b6bf6 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b6be6:	6a01      	ldr	r1, [r0, #32]
   b6be8:	b939      	cbnz	r1, b6bfa <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b6bea:	2101      	movs	r1, #1
   b6bec:	4620      	mov	r0, r4
   b6bee:	f7ff fa35 	bl	b605c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b6bf2:	4605      	mov	r5, r0
   b6bf4:	b938      	cbnz	r0, b6c06 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b6bf6:	2000      	movs	r0, #0
   b6bf8:	e048      	b.n	b6c8c <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b6bfa:	6880      	ldr	r0, [r0, #8]
   b6bfc:	f000 fc93 	bl	b7526 <_ZN9FatVolume9freeChainEm>
   b6c00:	2800      	cmp	r0, #0
   b6c02:	d1f2      	bne.n	b6bea <_ZN7FatFile6removeEv+0x1c>
   b6c04:	e7f7      	b.n	b6bf6 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b6c06:	f7ff fe8f 	bl	b6928 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b6c0a:	27e5      	movs	r7, #229	; 0xe5
   b6c0c:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b6c0e:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b6c10:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b6c12:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b6c14:	68a0      	ldr	r0, [r4, #8]
   b6c16:	f7ff f9cc 	bl	b5fb2 <_ZN9FatVolume9cacheSyncEv>
   b6c1a:	2800      	cmp	r0, #0
   b6c1c:	d0eb      	beq.n	b6bf6 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b6c1e:	78e3      	ldrb	r3, [r4, #3]
   b6c20:	2b00      	cmp	r3, #0
   b6c22:	d033      	beq.n	b6c8c <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b6c24:	4621      	mov	r1, r4
   b6c26:	a801      	add	r0, sp, #4
   b6c28:	f7ff fe8d 	bl	b6946 <_ZN7FatFile11openClusterEPS_>
   b6c2c:	2800      	cmp	r0, #0
   b6c2e:	d0e2      	beq.n	b6bf6 <_ZN7FatFile6removeEv+0x28>
   b6c30:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b6c32:	78e3      	ldrb	r3, [r4, #3]
   b6c34:	fa5f f885 	uxtb.w	r8, r5
   b6c38:	4543      	cmp	r3, r8
   b6c3a:	d3dc      	bcc.n	b6bf6 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b6c3c:	88a1      	ldrh	r1, [r4, #4]
   b6c3e:	1b49      	subs	r1, r1, r5
   b6c40:	0149      	lsls	r1, r1, #5
   b6c42:	a801      	add	r0, sp, #4
   b6c44:	f7ff fb2a 	bl	b629c <_ZN7FatFile7seekSetEm>
   b6c48:	2800      	cmp	r0, #0
   b6c4a:	d0d4      	beq.n	b6bf6 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b6c4c:	2100      	movs	r1, #0
   b6c4e:	a801      	add	r0, sp, #4
   b6c50:	f7ff fb05 	bl	b625e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6c54:	2800      	cmp	r0, #0
   b6c56:	d0ce      	beq.n	b6bf6 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b6c58:	7ac3      	ldrb	r3, [r0, #11]
   b6c5a:	2b0f      	cmp	r3, #15
   b6c5c:	d1cb      	bne.n	b6bf6 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b6c5e:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b6c60:	f002 031f 	and.w	r3, r2, #31
   b6c64:	4543      	cmp	r3, r8
   b6c66:	d1c6      	bne.n	b6bf6 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b6c68:	7b43      	ldrb	r3, [r0, #13]
   b6c6a:	42b3      	cmp	r3, r6
   b6c6c:	d1c3      	bne.n	b6bf6 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b6c6e:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b6c70:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6c72:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b6c76:	f043 0301 	orr.w	r3, r3, #1
   b6c7a:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b6c7e:	0653      	lsls	r3, r2, #25
   b6c80:	f105 0501 	add.w	r5, r5, #1
   b6c84:	d5d5      	bpl.n	b6c32 <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b6c86:	68a0      	ldr	r0, [r4, #8]
   b6c88:	f7ff f993 	bl	b5fb2 <_ZN9FatVolume9cacheSyncEv>
}
   b6c8c:	b00a      	add	sp, #40	; 0x28
   b6c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6c92 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6c92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b6c96:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6c9a:	4606      	mov	r6, r0
   b6c9c:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6c9e:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6ca0:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6ca2:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b6ca6:	6861      	ldr	r1, [r4, #4]
   b6ca8:	68a2      	ldr	r2, [r4, #8]
   b6caa:	186b      	adds	r3, r5, r1
   b6cac:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6cae:	4411      	add	r1, r2
   b6cb0:	4291      	cmp	r1, r2
   b6cb2:	d006      	beq.n	b6cc2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b6cb4:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6cb8:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6cbc:	4043      	eors	r3, r0
   b6cbe:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6cc0:	e7f6      	b.n	b6cb0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6cc2:	f1b9 0f03 	cmp.w	r9, #3
   b6cc6:	bf28      	it	cs
   b6cc8:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6ccc:	f109 0204 	add.w	r2, r9, #4
   b6cd0:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6cd2:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6cd6:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6cd8:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6cda:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6cdc:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6cde:	bf94      	ite	ls
   b6ce0:	3130      	addls	r1, #48	; 0x30
   b6ce2:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6ce4:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6ce6:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b6ce8:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6cec:	d1f1      	bne.n	b6cd2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6cee:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6cf2:	2100      	movs	r1, #0
   b6cf4:	735f      	strb	r7, [r3, #13]
   b6cf6:	4630      	mov	r0, r6
   b6cf8:	f7ff fad0 	bl	b629c <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b6cfc:	2101      	movs	r1, #1
   b6cfe:	4630      	mov	r0, r6
   b6d00:	f7ff faad 	bl	b625e <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b6d04:	4601      	mov	r1, r0
   b6d06:	b928      	cbnz	r0, b6d14 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b6d08:	7870      	ldrb	r0, [r6, #1]
   b6d0a:	fab0 f080 	clz	r0, r0
   b6d0e:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b6d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b6d14:	7803      	ldrb	r3, [r0, #0]
   b6d16:	b16b      	cbz	r3, b6d34 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6d18:	7ac3      	ldrb	r3, [r0, #11]
   b6d1a:	071b      	lsls	r3, r3, #28
   b6d1c:	d4ee      	bmi.n	b6cfc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b6d1e:	220b      	movs	r2, #11
   b6d20:	4640      	mov	r0, r8
   b6d22:	f004 ff8b 	bl	bbc3c <memcmp>
   b6d26:	2800      	cmp	r0, #0
   b6d28:	d1e8      	bne.n	b6cfc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b6d2a:	3501      	adds	r5, #1
   b6d2c:	b2ad      	uxth	r5, r5
   b6d2e:	2d64      	cmp	r5, #100	; 0x64
   b6d30:	d1b9      	bne.n	b6ca6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b6d32:	e7ed      	b.n	b6d10 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b6d34:	2001      	movs	r0, #1
   b6d36:	e7eb      	b.n	b6d10 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>

000b6d38 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d3c:	ed2d 8b02 	vpush	{d8}
   b6d40:	b08b      	sub	sp, #44	; 0x2c
   b6d42:	4617      	mov	r7, r2
   b6d44:	9007      	str	r0, [sp, #28]
   b6d46:	9306      	str	r3, [sp, #24]
  if (!dirFile || !dirFile->isDir() || isOpen()) {
   b6d48:	460c      	mov	r4, r1
   b6d4a:	b929      	cbnz	r1, b6d58 <_ZN7FatFile4openEPS_P7fname_ti+0x20>
  return false;
   b6d4c:	2000      	movs	r0, #0
}
   b6d4e:	b00b      	add	sp, #44	; 0x2c
   b6d50:	ecbd 8b02 	vpop	{d8}
   b6d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile || !dirFile->isDir() || isOpen()) {
   b6d58:	780b      	ldrb	r3, [r1, #0]
   b6d5a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6d5e:	d0f5      	beq.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>
    return m_attr;
   b6d60:	9b07      	ldr	r3, [sp, #28]
   b6d62:	781b      	ldrb	r3, [r3, #0]
   b6d64:	2b00      	cmp	r3, #0
   b6d66:	d1f1      	bne.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>
  size_t len = fname->len;
   b6d68:	6853      	ldr	r3, [r2, #4]
   b6d6a:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b6d6c:	7813      	ldrb	r3, [r2, #0]
   b6d6e:	079d      	lsls	r5, r3, #30
   b6d70:	bf1f      	itttt	ne
   b6d72:	9b05      	ldrne	r3, [sp, #20]
   b6d74:	330c      	addne	r3, #12
   b6d76:	220d      	movne	r2, #13
   b6d78:	fbb3 f3f2 	udivne	r3, r3, r2
   b6d7c:	bf1a      	itte	ne
   b6d7e:	3301      	addne	r3, #1
   b6d80:	b2db      	uxtbne	r3, r3
   b6d82:	2301      	moveq	r3, #1
    seekSet(0);
   b6d84:	2100      	movs	r1, #0
   b6d86:	4620      	mov	r0, r4
   b6d88:	9303      	str	r3, [sp, #12]
   b6d8a:	f7ff fa87 	bl	b629c <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6d8e:	f107 030d 	add.w	r3, r7, #13
  }
   b6d92:	f04f 0b00 	mov.w	fp, #0
   b6d96:	ee08 3a10 	vmov	s16, r3
   b6d9a:	46da      	mov	sl, fp
   b6d9c:	465d      	mov	r5, fp
   b6d9e:	465e      	mov	r6, fp
   b6da0:	f8cd b010 	str.w	fp, [sp, #16]
   b6da4:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b6da6:	6963      	ldr	r3, [r4, #20]
    dir = dirFile->readDirCache(true);
   b6da8:	2101      	movs	r1, #1
   b6daa:	4620      	mov	r0, r4
    curIndex = dirFile->m_curPosition/32;
   b6dac:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b6db0:	f7ff fa55 	bl	b625e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6db4:	4603      	mov	r3, r0
   b6db6:	2800      	cmp	r0, #0
   b6db8:	d171      	bne.n	b6e9e <_ZN7FatFile4openEPS_P7fname_ti+0x166>
      if (dirFile->getError()) {
   b6dba:	7863      	ldrb	r3, [r4, #1]
   b6dbc:	2b00      	cmp	r3, #0
   b6dbe:	d1c5      	bne.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6dc0:	9b06      	ldr	r3, [sp, #24]
   b6dc2:	059a      	lsls	r2, r3, #22
   b6dc4:	d5c2      	bpl.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b6dc6:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6dca:	3b01      	subs	r3, #1
   b6dcc:	2b01      	cmp	r3, #1
   b6dce:	d8bd      	bhi.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>
  if (freeFound == 0) {
   b6dd0:	9b04      	ldr	r3, [sp, #16]
   b6dd2:	2d00      	cmp	r5, #0
   b6dd4:	bf08      	it	eq
   b6dd6:	4643      	moveq	r3, r8
   b6dd8:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b6dda:	9b03      	ldr	r3, [sp, #12]
   b6ddc:	429d      	cmp	r5, r3
   b6dde:	f0c0 80f1 	bcc.w	b6fc4 <_ZN7FatFile4openEPS_P7fname_ti+0x28c>
  if (fnameFound) {
   b6de2:	f1b9 0f00 	cmp.w	r9, #0
   b6de6:	f040 810a 	bne.w	b6ffe <_ZN7FatFile4openEPS_P7fname_ti+0x2c6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6dea:	9b04      	ldr	r3, [sp, #16]
   b6dec:	4620      	mov	r0, r4
   b6dee:	0159      	lsls	r1, r3, #5
   b6df0:	f7ff fa54 	bl	b629c <_ZN7FatFile7seekSetEm>
   b6df4:	2800      	cmp	r0, #0
   b6df6:	d0a9      	beq.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>
  lfnOrd = freeNeed - 1;
   b6df8:	9b03      	ldr	r3, [sp, #12]
   b6dfa:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b6dfe:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6e02:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6e04:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b6e08:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6e0c:	2e00      	cmp	r6, #0
   b6e0e:	f000 810d 	beq.w	b702c <_ZN7FatFile4openEPS_P7fname_ti+0x2f4>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6e12:	2100      	movs	r1, #0
   b6e14:	4620      	mov	r0, r4
   b6e16:	f7ff fa22 	bl	b625e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6e1a:	4605      	mov	r5, r0
   b6e1c:	2800      	cmp	r0, #0
   b6e1e:	d095      	beq.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>
    dirFile->m_vol->cacheDirty();
   b6e20:	68a2      	ldr	r2, [r4, #8]
   b6e22:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b6e26:	454e      	cmp	r6, r9
   b6e28:	f043 0301 	orr.w	r3, r3, #1
   b6e2c:	bf0c      	ite	eq
   b6e2e:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b6e32:	46b3      	movne	fp, r6
   b6e34:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b6e38:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6e3c:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b6e40:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6e44:	f107 000d 	add.w	r0, r7, #13
   b6e48:	f7ff fd6e 	bl	b6928 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6e4c:	f885 a01a 	strb.w	sl, [r5, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6e50:	7368      	strb	r0, [r5, #13]
    ldir->mustBeZero = 0;
   b6e52:	f885 a01b 	strb.w	sl, [r5, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6e56:	f00b 031f 	and.w	r3, fp, #31
   b6e5a:	220d      	movs	r2, #13
   b6e5c:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6e5e:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6e62:	4353      	muls	r3, r2
   b6e64:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6e66:	9905      	ldr	r1, [sp, #20]
   b6e68:	4299      	cmp	r1, r3
   b6e6a:	f240 80d0 	bls.w	b700e <_ZN7FatFile4openEPS_P7fname_ti+0x2d6>
   b6e6e:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b6e72:	2a04      	cmp	r2, #4
   b6e74:	fa5f fe82 	uxtb.w	lr, r2
   b6e78:	f102 0001 	add.w	r0, r2, #1
   b6e7c:	f200 80cd 	bhi.w	b701a <_ZN7FatFile4openEPS_P7fname_ti+0x2e2>
    ldir->name1[i] = c;
   b6e80:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   b6e84:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b6e88:	280d      	cmp	r0, #13
   b6e8a:	f103 0301 	add.w	r3, r3, #1
   b6e8e:	4602      	mov	r2, r0
   b6e90:	d1e9      	bne.n	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x12e>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6e92:	3e01      	subs	r6, #1
   b6e94:	b2f6      	uxtb	r6, r6
   b6e96:	e7b9      	b.n	b6e0c <_ZN7FatFile4openEPS_P7fname_ti+0xd4>
        fnameFound = true;
   b6e98:	f04f 0901 	mov.w	r9, #1
   b6e9c:	e783      	b.n	b6da6 <_ZN7FatFile4openEPS_P7fname_ti+0x6e>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6e9e:	7802      	ldrb	r2, [r0, #0]
   b6ea0:	2ae5      	cmp	r2, #229	; 0xe5
   b6ea2:	d000      	beq.n	b6ea6 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
   b6ea4:	b97a      	cbnz	r2, b6ec6 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
    curIndex = dirFile->m_curPosition/32;
   b6ea6:	9904      	ldr	r1, [sp, #16]
   b6ea8:	2d00      	cmp	r5, #0
   b6eaa:	bf08      	it	eq
   b6eac:	4641      	moveq	r1, r8
   b6eae:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b6eb0:	9903      	ldr	r1, [sp, #12]
   b6eb2:	428d      	cmp	r5, r1
        freeFound++;
   b6eb4:	bf3c      	itt	cc
   b6eb6:	3501      	addcc	r5, #1
   b6eb8:	b2ed      	uxtbcc	r5, r5
      if (dir->name[0] == DIR_NAME_FREE) {
   b6eba:	2a00      	cmp	r2, #0
   b6ebc:	d080      	beq.n	b6dc0 <_ZN7FatFile4openEPS_P7fname_ti+0x88>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6ebe:	2ae5      	cmp	r2, #229	; 0xe5
   b6ec0:	d105      	bne.n	b6ece <_ZN7FatFile4openEPS_P7fname_ti+0x196>
      lfnOrd = 0;
   b6ec2:	2600      	movs	r6, #0
   b6ec4:	e76f      	b.n	b6da6 <_ZN7FatFile4openEPS_P7fname_ti+0x6e>
        freeFound = 0;
   b6ec6:	9903      	ldr	r1, [sp, #12]
   b6ec8:	428d      	cmp	r5, r1
   b6eca:	bf38      	it	cc
   b6ecc:	2500      	movcc	r5, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6ece:	2a2e      	cmp	r2, #46	; 0x2e
   b6ed0:	d0f7      	beq.n	b6ec2 <_ZN7FatFile4openEPS_P7fname_ti+0x18a>
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6ed2:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6ed4:	290f      	cmp	r1, #15
   b6ed6:	d14a      	bne.n	b6f6e <_ZN7FatFile4openEPS_P7fname_ti+0x236>
      if (!lfnOrd) {
   b6ed8:	bb16      	cbnz	r6, b6f20 <_ZN7FatFile4openEPS_P7fname_ti+0x1e8>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6eda:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6ede:	f43f af62 	beq.w	b6da6 <_ZN7FatFile4openEPS_P7fname_ti+0x6e>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6ee2:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b6ee6:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6eea:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6eec:	220d      	movs	r2, #13
   b6eee:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b6ef2:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b6ef6:	9a05      	ldr	r2, [sp, #20]
   b6ef8:	4542      	cmp	r2, r8
   b6efa:	d9e2      	bls.n	b6ec2 <_ZN7FatFile4openEPS_P7fname_ti+0x18a>
   b6efc:	eba2 0208 	sub.w	r2, r2, r8
   b6f00:	9208      	str	r2, [sp, #32]
   b6f02:	2200      	movs	r2, #0
   b6f04:	eb02 0108 	add.w	r1, r2, r8
   b6f08:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6f0a:	4618      	mov	r0, r3
   b6f0c:	b2d1      	uxtb	r1, r2
   b6f0e:	f7ff fcf7 	bl	b6900 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b6f12:	9908      	ldr	r1, [sp, #32]
   b6f14:	428a      	cmp	r2, r1
   b6f16:	d10d      	bne.n	b6f34 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
            lfnOrd = 0;
   b6f18:	2800      	cmp	r0, #0
   b6f1a:	bf18      	it	ne
   b6f1c:	2600      	movne	r6, #0
   b6f1e:	e742      	b.n	b6da6 <_ZN7FatFile4openEPS_P7fname_ti+0x6e>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6f20:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b6f24:	fa5f fa8a 	uxtb.w	sl, sl
   b6f28:	4552      	cmp	r2, sl
   b6f2a:	d1ca      	bne.n	b6ec2 <_ZN7FatFile4openEPS_P7fname_ti+0x18a>
   b6f2c:	7b5a      	ldrb	r2, [r3, #13]
   b6f2e:	455a      	cmp	r2, fp
   b6f30:	d0dc      	beq.n	b6eec <_ZN7FatFile4openEPS_P7fname_ti+0x1b4>
   b6f32:	e7c6      	b.n	b6ec2 <_ZN7FatFile4openEPS_P7fname_ti+0x18a>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6f34:	28ff      	cmp	r0, #255	; 0xff
   b6f36:	d8c4      	bhi.n	b6ec2 <_ZN7FatFile4openEPS_P7fname_ti+0x18a>
   b6f38:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6f3c:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b6f40:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6f42:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6f44:	bf9c      	itt	ls
   b6f46:	f10e 0020 	addls.w	r0, lr, #32
   b6f4a:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6f4e:	4608      	mov	r0, r1
   b6f50:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6f52:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6f54:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b6f58:	f1bc 0f19 	cmp.w	ip, #25
   b6f5c:	bf9c      	itt	ls
   b6f5e:	3120      	addls	r1, #32
   b6f60:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6f62:	4571      	cmp	r1, lr
   b6f64:	d1ad      	bne.n	b6ec2 <_ZN7FatFile4openEPS_P7fname_ti+0x18a>
      for (uint8_t i = 0; i < 13; i++) {
   b6f66:	3201      	adds	r2, #1
   b6f68:	2a0d      	cmp	r2, #13
   b6f6a:	d1cb      	bne.n	b6f04 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
   b6f6c:	e71b      	b.n	b6da6 <_ZN7FatFile4openEPS_P7fname_ti+0x6e>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6f6e:	0708      	lsls	r0, r1, #28
   b6f70:	d4a7      	bmi.n	b6ec2 <_ZN7FatFile4openEPS_P7fname_ti+0x18a>
      if (lfnOrd) {
   b6f72:	b15e      	cbz	r6, b6f8c <_ZN7FatFile4openEPS_P7fname_ti+0x254>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b6f74:	f1ba 0f01 	cmp.w	sl, #1
   b6f78:	f47f aee8 	bne.w	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>
   b6f7c:	4618      	mov	r0, r3
   b6f7e:	f7ff fcd3 	bl	b6928 <_ZN7FatFile11lfnChecksumEPh>
   b6f82:	4558      	cmp	r0, fp
   b6f84:	f47f aee2 	bne.w	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>
   b6f88:	46b1      	mov	r9, r6
   b6f8a:	e00e      	b.n	b6faa <_ZN7FatFile4openEPS_P7fname_ti+0x272>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6f8c:	ee18 1a10 	vmov	r1, s16
   b6f90:	220b      	movs	r2, #11
   b6f92:	4618      	mov	r0, r3
   b6f94:	f004 fe52 	bl	bbc3c <memcmp>
   b6f98:	2800      	cmp	r0, #0
   b6f9a:	f47f af04 	bne.w	b6da6 <_ZN7FatFile4openEPS_P7fname_ti+0x6e>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6f9e:	f897 9000 	ldrb.w	r9, [r7]
   b6fa2:	f019 0901 	ands.w	r9, r9, #1
   b6fa6:	f47f af77 	bne.w	b6e98 <_ZN7FatFile4openEPS_P7fname_ti+0x160>
  if (oflag & O_EXCL) {
   b6faa:	9b06      	ldr	r3, [sp, #24]
   b6fac:	0519      	lsls	r1, r3, #20
   b6fae:	f53f aecd 	bmi.w	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b6fb2:	9b06      	ldr	r3, [sp, #24]
   b6fb4:	9807      	ldr	r0, [sp, #28]
   b6fb6:	f8cd 9000 	str.w	r9, [sp]
   b6fba:	4642      	mov	r2, r8
   b6fbc:	4621      	mov	r1, r4
   b6fbe:	f7ff f9b0 	bl	b6322 <_ZN7FatFile15openCachedEntryEPS_tih>
   b6fc2:	e6c4      	b.n	b6d4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    dir = dirFile->readDirCache();
   b6fc4:	2100      	movs	r1, #0
   b6fc6:	4620      	mov	r0, r4
   b6fc8:	f7ff f949 	bl	b625e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6fcc:	b9a0      	cbnz	r0, b6ff8 <_ZN7FatFile4openEPS_P7fname_ti+0x2c0>
      if (dirFile->getError()) {
   b6fce:	7863      	ldrb	r3, [r4, #1]
   b6fd0:	2b00      	cmp	r3, #0
   b6fd2:	f47f aebb 	bne.w	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>
    if (!dirFile->addDirCluster()) {
   b6fd6:	4620      	mov	r0, r4
   b6fd8:	f7ff f802 	bl	b5fe0 <_ZN7FatFile13addDirClusterEv>
   b6fdc:	2800      	cmp	r0, #0
   b6fde:	f43f aeb5 	beq.w	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>
    return m_blocksPerCluster;
   b6fe2:	68a3      	ldr	r3, [r4, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b6fe4:	791b      	ldrb	r3, [r3, #4]
   b6fe6:	2b01      	cmp	r3, #1
   b6fe8:	f63f aefb 	bhi.w	b6de2 <_ZN7FatFile4openEPS_P7fname_ti+0xaa>
  while (freeFound < freeNeed) {
   b6fec:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6fee:	3510      	adds	r5, #16
   b6ff0:	b2ed      	uxtb	r5, r5
  while (freeFound < freeNeed) {
   b6ff2:	42ab      	cmp	r3, r5
   b6ff4:	d8ef      	bhi.n	b6fd6 <_ZN7FatFile4openEPS_P7fname_ti+0x29e>
   b6ff6:	e6f4      	b.n	b6de2 <_ZN7FatFile4openEPS_P7fname_ti+0xaa>
    freeFound++;
   b6ff8:	3501      	adds	r5, #1
   b6ffa:	b2ed      	uxtb	r5, r5
  while (freeFound < freeNeed) {
   b6ffc:	e6ed      	b.n	b6dda <_ZN7FatFile4openEPS_P7fname_ti+0xa2>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6ffe:	4639      	mov	r1, r7
   b7000:	4620      	mov	r0, r4
   b7002:	f7ff fe46 	bl	b6c92 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b7006:	2800      	cmp	r0, #0
   b7008:	f47f aeef 	bne.w	b6dea <_ZN7FatFile4openEPS_P7fname_ti+0xb2>
   b700c:	e69e      	b.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b700e:	bf14      	ite	ne
   b7010:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b7014:	2100      	moveq	r1, #0
   b7016:	b289      	uxth	r1, r1
   b7018:	e72b      	b.n	b6e72 <_ZN7FatFile4openEPS_P7fname_ti+0x13a>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b701a:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b701e:	bf94      	ite	ls
   b7020:	eb05 0242 	addls.w	r2, r5, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b7024:	eb05 0240 	addhi.w	r2, r5, r0, lsl #1
   b7028:	8091      	strh	r1, [r2, #4]
   b702a:	e72d      	b.n	b6e88 <_ZN7FatFile4openEPS_P7fname_ti+0x150>
  dir = dirFile->readDirCache();
   b702c:	4631      	mov	r1, r6
   b702e:	4620      	mov	r0, r4
  curIndex = dirFile->m_curPosition/32;
   b7030:	f8d4 8014 	ldr.w	r8, [r4, #20]
  dir = dirFile->readDirCache();
   b7034:	f7ff f913 	bl	b625e <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b7038:	4605      	mov	r5, r0
   b703a:	2800      	cmp	r0, #0
   b703c:	f43f ae86 	beq.w	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x14>
  memset(dir, 0, sizeof(dir_t));
   b7040:	2220      	movs	r2, #32
   b7042:	4631      	mov	r1, r6
   b7044:	f004 fe32 	bl	bbcac <memset>
  memcpy(dir->name, fname->sfn, 11);
   b7048:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b704c:	602b      	str	r3, [r5, #0]
   b704e:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b7052:	606b      	str	r3, [r5, #4]
   b7054:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b7058:	812b      	strh	r3, [r5, #8]
   b705a:	7dfb      	ldrb	r3, [r7, #23]
   b705c:	72ab      	strb	r3, [r5, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b705e:	783b      	ldrb	r3, [r7, #0]
   b7060:	f003 0318 	and.w	r3, r3, #24
   b7064:	732b      	strb	r3, [r5, #12]
  if (m_dateTime) {
   b7066:	4b0f      	ldr	r3, [pc, #60]	; (b70a4 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b7068:	681b      	ldr	r3, [r3, #0]
   b706a:	b19b      	cbz	r3, b7094 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b706c:	f105 010e 	add.w	r1, r5, #14
   b7070:	f105 0010 	add.w	r0, r5, #16
   b7074:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7076:	8a2b      	ldrh	r3, [r5, #16]
   b7078:	826b      	strh	r3, [r5, #18]
  dir->lastWriteDate = dir->creationDate;
   b707a:	832b      	strh	r3, [r5, #24]
  dir->lastWriteTime = dir->creationTime;
   b707c:	89eb      	ldrh	r3, [r5, #14]
   b707e:	82eb      	strh	r3, [r5, #22]
  dirFile->m_vol->cacheDirty();
   b7080:	68a2      	ldr	r2, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7082:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7086:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b708a:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b708e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b7092:	e78e      	b.n	b6fb2 <_ZN7FatFile4openEPS_P7fname_ti+0x27a>
    dir->creationDate = FAT_DEFAULT_DATE;
   b7094:	2321      	movs	r3, #33	; 0x21
   b7096:	742b      	strb	r3, [r5, #16]
   b7098:	2328      	movs	r3, #40	; 0x28
   b709a:	746b      	strb	r3, [r5, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b709c:	2308      	movs	r3, #8
   b709e:	73ae      	strb	r6, [r5, #14]
   b70a0:	73eb      	strb	r3, [r5, #15]
   b70a2:	e7e8      	b.n	b7076 <_ZN7FatFile4openEPS_P7fname_ti+0x33e>
   b70a4:	2003e684 	.word	0x2003e684

000b70a8 <_ZL7print2uP5Printh>:
#include <math.h>
#include "FatFile.h"
#include "FmtNumber.h"
//------------------------------------------------------------------------------
// print uint8_t with width 2
static void print2u(print_t* pr, uint8_t v) {
   b70a8:	b570      	push	{r4, r5, r6, lr}
  char c0 = '?';
  char c1 = '?';
  if (v < 100) {
    c1 = v/10;
   b70aa:	230a      	movs	r3, #10
   b70ac:	fbb1 f3f3 	udiv	r3, r1, r3
    c0 = v - 10*c1 + '0';
   b70b0:	ebc3 1443 	rsb	r4, r3, r3, lsl #5
   b70b4:	ebc3 0284 	rsb	r2, r3, r4, lsl #2
   b70b8:	f101 0430 	add.w	r4, r1, #48	; 0x30
    c1 += '0';
   b70bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
  }
  pr->write(c1);
   b70c0:	6803      	ldr	r3, [r0, #0]
static void print2u(print_t* pr, uint8_t v) {
   b70c2:	4605      	mov	r5, r0
  pr->write(c1);
   b70c4:	689b      	ldr	r3, [r3, #8]
   b70c6:	b2c9      	uxtb	r1, r1
    c0 = v - 10*c1 + '0';
   b70c8:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  pr->write(c1);
   b70cc:	4798      	blx	r3
  pr->write(c0);
   b70ce:	682b      	ldr	r3, [r5, #0]
    c0 = v - 10*c1 + '0';
   b70d0:	b2e4      	uxtb	r4, r4
  pr->write(c0);
   b70d2:	4621      	mov	r1, r4
   b70d4:	4628      	mov	r0, r5
   b70d6:	689b      	ldr	r3, [r3, #8]
}
   b70d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  pr->write(c0);
   b70dc:	4718      	bx	r3

000b70de <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b70de:	b513      	push	{r0, r1, r4, lr}
   b70e0:	4604      	mov	r4, r0
    }
   b70e2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b70e4:	b159      	cbz	r1, b70fe <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b70e6:	9101      	str	r1, [sp, #4]
   b70e8:	f004 fe7d 	bl	bbde6 <strlen>
   b70ec:	6823      	ldr	r3, [r4, #0]
   b70ee:	9901      	ldr	r1, [sp, #4]
   b70f0:	68db      	ldr	r3, [r3, #12]
   b70f2:	4602      	mov	r2, r0
   b70f4:	4620      	mov	r0, r4
    }
   b70f6:	b002      	add	sp, #8
   b70f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b70fc:	4718      	bx	r3
    }
   b70fe:	b002      	add	sp, #8
   b7100:	bd10      	pop	{r4, pc}

000b7102 <_ZN7FatFile12printFatDateEP5Printt>:

fail:
  return false;
}
//------------------------------------------------------------------------------
void FatFile::printFatDate(print_t* pr, uint16_t fatDate) {
   b7102:	b530      	push	{r4, r5, lr}
   b7104:	4604      	mov	r4, r0
   b7106:	b085      	sub	sp, #20
  return 1980 + (fatDate >> 9);
   b7108:	0a48      	lsrs	r0, r1, #9
   b710a:	460d      	mov	r5, r1
  *--ptr = 0;
   b710c:	2300      	movs	r3, #0
  pr->write(fmtDec(v, ptr));
   b710e:	f10d 010e 	add.w	r1, sp, #14
   b7112:	f200 70bc 	addw	r0, r0, #1980	; 0x7bc
  *--ptr = 0;
   b7116:	f88d 300e 	strb.w	r3, [sp, #14]
  pr->write(fmtDec(v, ptr));
   b711a:	f000 facf 	bl	b76bc <_Z6fmtDecmPc>
   b711e:	4601      	mov	r1, r0
   b7120:	4620      	mov	r0, r4
   b7122:	f7ff ffdc 	bl	b70de <_ZN5Print5writeEPKc>
  printU32(pr, FAT_YEAR(fatDate));
  pr->write('-');
   b7126:	6823      	ldr	r3, [r4, #0]
   b7128:	212d      	movs	r1, #45	; 0x2d
   b712a:	689b      	ldr	r3, [r3, #8]
   b712c:	4620      	mov	r0, r4
   b712e:	4798      	blx	r3
  print2u(pr, FAT_MONTH(fatDate));
   b7130:	f3c5 1143 	ubfx	r1, r5, #5, #4
   b7134:	4620      	mov	r0, r4
   b7136:	f7ff ffb7 	bl	b70a8 <_ZL7print2uP5Printh>
  pr->write('-');
   b713a:	6823      	ldr	r3, [r4, #0]
   b713c:	212d      	movs	r1, #45	; 0x2d
   b713e:	689b      	ldr	r3, [r3, #8]
   b7140:	4620      	mov	r0, r4
   b7142:	4798      	blx	r3
  print2u(pr, FAT_DAY(fatDate));
   b7144:	f005 011f 	and.w	r1, r5, #31
   b7148:	4620      	mov	r0, r4
}
   b714a:	b005      	add	sp, #20
   b714c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  print2u(pr, FAT_DAY(fatDate));
   b7150:	f7ff bfaa 	b.w	b70a8 <_ZL7print2uP5Printh>

000b7154 <_ZN7FatFile12printFatTimeEP5Printt>:
//------------------------------------------------------------------------------
void FatFile::printFatTime(print_t* pr, uint16_t fatTime) {
   b7154:	b538      	push	{r3, r4, r5, lr}
   b7156:	4604      	mov	r4, r0
   b7158:	460d      	mov	r5, r1
  print2u(pr, FAT_HOUR(fatTime));
   b715a:	0ac9      	lsrs	r1, r1, #11
   b715c:	f7ff ffa4 	bl	b70a8 <_ZL7print2uP5Printh>
  pr->write(':');
   b7160:	6823      	ldr	r3, [r4, #0]
   b7162:	213a      	movs	r1, #58	; 0x3a
   b7164:	689b      	ldr	r3, [r3, #8]
   b7166:	4620      	mov	r0, r4
   b7168:	4798      	blx	r3
  print2u(pr, FAT_MINUTE(fatTime));
   b716a:	f3c5 1145 	ubfx	r1, r5, #5, #6
   b716e:	4620      	mov	r0, r4
   b7170:	f7ff ff9a 	bl	b70a8 <_ZL7print2uP5Printh>
  pr->write(':');
   b7174:	6823      	ldr	r3, [r4, #0]
   b7176:	213a      	movs	r1, #58	; 0x3a
   b7178:	689b      	ldr	r3, [r3, #8]
   b717a:	4620      	mov	r0, r4
   b717c:	4798      	blx	r3
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FAT_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
   b717e:	f005 011f 	and.w	r1, r5, #31
  print2u(pr, FAT_SECOND(fatTime));
   b7182:	4620      	mov	r0, r4
   b7184:	0049      	lsls	r1, r1, #1
}
   b7186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  print2u(pr, FAT_SECOND(fatTime));
   b718a:	f7ff bf8d 	b.w	b70a8 <_ZL7print2uP5Printh>

000b718e <_ZN7FatFile19printModifyDateTimeEP5Print>:
    value = -value;
  }
  return printFieldT(this, sign, (uint32_t)value, term);
}
//------------------------------------------------------------------------------
bool FatFile::printModifyDateTime(print_t* pr) {
   b718e:	b530      	push	{r4, r5, lr}
   b7190:	b089      	sub	sp, #36	; 0x24
   b7192:	460c      	mov	r4, r1
  dir_t dir;
  if (!dirEntry(&dir)) {
   b7194:	4669      	mov	r1, sp
   b7196:	f7ff fa09 	bl	b65ac <_ZN7FatFile8dirEntryEP14directoryEntry>
   b719a:	4605      	mov	r5, r0
   b719c:	b170      	cbz	r0, b71bc <_ZN7FatFile19printModifyDateTimeEP5Print+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  printFatDate(pr, dir.lastWriteDate);
   b719e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   b71a2:	4620      	mov	r0, r4
   b71a4:	f7ff ffad 	bl	b7102 <_ZN7FatFile12printFatDateEP5Printt>
  pr->write(' ');
   b71a8:	6823      	ldr	r3, [r4, #0]
   b71aa:	2120      	movs	r1, #32
   b71ac:	689b      	ldr	r3, [r3, #8]
   b71ae:	4620      	mov	r0, r4
   b71b0:	4798      	blx	r3
  printFatTime(pr, dir.lastWriteTime);
   b71b2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   b71b6:	4620      	mov	r0, r4
   b71b8:	f7ff ffcc 	bl	b7154 <_ZN7FatFile12printFatTimeEP5Printt>
  return true;

fail:
  return false;
}
   b71bc:	4628      	mov	r0, r5
   b71be:	b009      	add	sp, #36	; 0x24
   b71c0:	bd30      	pop	{r4, r5, pc}

000b71c2 <_ZN7FatFile13printFileSizeEP5Print>:
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
   b71c2:	b530      	push	{r4, r5, lr}
   b71c4:	b085      	sub	sp, #20
   b71c6:	460d      	mov	r5, r1
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
   b71c8:	2300      	movs	r3, #0
  ptr = fmtDec(fileSize(), ptr);
   b71ca:	f10d 010e 	add.w	r1, sp, #14
   b71ce:	69c0      	ldr	r0, [r0, #28]
  *--ptr = 0;
   b71d0:	f88d 300e 	strb.w	r3, [sp, #14]
  ptr = fmtDec(fileSize(), ptr);
   b71d4:	f000 fa72 	bl	b76bc <_Z6fmtDecmPc>
   b71d8:	ac01      	add	r4, sp, #4
  while (ptr > buf) {
    *--ptr = ' ';
   b71da:	42a0      	cmp	r0, r4
   b71dc:	eba4 0300 	sub.w	r3, r4, r0
   b71e0:	bf38      	it	cc
   b71e2:	2300      	movcc	r3, #0
   b71e4:	eba0 0204 	sub.w	r2, r0, r4
   b71e8:	f04f 0120 	mov.w	r1, #32
   b71ec:	bf38      	it	cc
   b71ee:	2200      	movcc	r2, #0
   b71f0:	4418      	add	r0, r3
   b71f2:	f004 fd5b 	bl	bbcac <memset>
  }
  return pr->write(buf);
   b71f6:	4621      	mov	r1, r4
   b71f8:	4628      	mov	r0, r5
   b71fa:	f7ff ff70 	bl	b70de <_ZN5Print5writeEPKc>
}
   b71fe:	b005      	add	sp, #20
   b7200:	bd30      	pop	{r4, r5, pc}

000b7202 <_ZN7FatFile2lsEP5Printhh>:
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
   b7202:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7206:	b08b      	sub	sp, #44	; 0x2c
   b7208:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b720a:	2300      	movs	r3, #0
   b720c:	9301      	str	r3, [sp, #4]
  if (!isDir() || getError()) {
   b720e:	7803      	ldrb	r3, [r0, #0]
   b7210:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
   b7214:	4606      	mov	r6, r0
   b7216:	460c      	mov	r4, r1
   b7218:	4615      	mov	r5, r2
  if (!isDir() || getError()) {
   b721a:	d103      	bne.n	b7224 <_ZN7FatFile2lsEP5Printhh+0x22>
  return false;
   b721c:	2000      	movs	r0, #0
}
   b721e:	b00b      	add	sp, #44	; 0x2c
   b7220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!isDir() || getError()) {
   b7224:	7841      	ldrb	r1, [r0, #1]
   b7226:	2900      	cmp	r1, #0
   b7228:	d1f8      	bne.n	b721c <_ZN7FatFile2lsEP5Printhh+0x1a>
    seekSet(0);
   b722a:	f7ff f837 	bl	b629c <_ZN7FatFile7seekSetEm>
      if (flags & LS_DATE) {
   b722e:	f005 0902 	and.w	r9, r5, #2
  while (file.openNext(this, O_RDONLY)) {
   b7232:	2200      	movs	r2, #0
   b7234:	4631      	mov	r1, r6
   b7236:	a801      	add	r0, sp, #4
   b7238:	f7ff f8dd 	bl	b63f6 <_ZN7FatFile8openNextEPS_i>
   b723c:	2800      	cmp	r0, #0
   b723e:	d054      	beq.n	b72ea <_ZN7FatFile2lsEP5Printhh+0xe8>
    if (!file.isHidden() || (flags & LS_A)) {
   b7240:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7244:	0798      	lsls	r0, r3, #30
   b7246:	d501      	bpl.n	b724c <_ZN7FatFile2lsEP5Printhh+0x4a>
   b7248:	07e9      	lsls	r1, r5, #31
   b724a:	d54a      	bpl.n	b72e2 <_ZN7FatFile2lsEP5Printhh+0xe0>
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
   b724c:	f04f 0800 	mov.w	r8, #0
      for (uint8_t i = 0; i < indent; i++) {
   b7250:	45b8      	cmp	r8, r7
   b7252:	d007      	beq.n	b7264 <_ZN7FatFile2lsEP5Printhh+0x62>
        pr->write(' ');
   b7254:	6823      	ldr	r3, [r4, #0]
   b7256:	2120      	movs	r1, #32
   b7258:	689b      	ldr	r3, [r3, #8]
   b725a:	4620      	mov	r0, r4
   b725c:	4798      	blx	r3
      for (uint8_t i = 0; i < indent; i++) {
   b725e:	f108 0801 	add.w	r8, r8, #1
   b7262:	e7f5      	b.n	b7250 <_ZN7FatFile2lsEP5Printhh+0x4e>
      if (flags & LS_DATE) {
   b7264:	f1b9 0f00 	cmp.w	r9, #0
   b7268:	d008      	beq.n	b727c <_ZN7FatFile2lsEP5Printhh+0x7a>
        file.printModifyDateTime(pr);
   b726a:	4621      	mov	r1, r4
   b726c:	a801      	add	r0, sp, #4
   b726e:	f7ff ff8e 	bl	b718e <_ZN7FatFile19printModifyDateTimeEP5Print>
        pr->write(' ');
   b7272:	6823      	ldr	r3, [r4, #0]
   b7274:	2120      	movs	r1, #32
   b7276:	689b      	ldr	r3, [r3, #8]
   b7278:	4620      	mov	r0, r4
   b727a:	4798      	blx	r3
      if (flags & LS_SIZE) {
   b727c:	076a      	lsls	r2, r5, #29
   b727e:	d508      	bpl.n	b7292 <_ZN7FatFile2lsEP5Printhh+0x90>
        file.printFileSize(pr);
   b7280:	4621      	mov	r1, r4
   b7282:	a801      	add	r0, sp, #4
   b7284:	f7ff ff9d 	bl	b71c2 <_ZN7FatFile13printFileSizeEP5Print>
        pr->write(' ');
   b7288:	6823      	ldr	r3, [r4, #0]
   b728a:	2120      	movs	r1, #32
   b728c:	689b      	ldr	r3, [r3, #8]
   b728e:	4620      	mov	r0, r4
   b7290:	4798      	blx	r3
      file.printName(pr);
   b7292:	4621      	mov	r1, r4
   b7294:	a801      	add	r0, sp, #4
   b7296:	f7ff fc4b 	bl	b6b30 <_ZN7FatFile9printNameEP5Print>
      if (file.isDir()) {
   b729a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b729e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b72a2:	d004      	beq.n	b72ae <_ZN7FatFile2lsEP5Printhh+0xac>
        pr->write('/');
   b72a4:	6823      	ldr	r3, [r4, #0]
   b72a6:	212f      	movs	r1, #47	; 0x2f
   b72a8:	689b      	ldr	r3, [r3, #8]
   b72aa:	4620      	mov	r0, r4
   b72ac:	4798      	blx	r3
      pr->write('\r');
   b72ae:	6823      	ldr	r3, [r4, #0]
   b72b0:	210d      	movs	r1, #13
   b72b2:	689b      	ldr	r3, [r3, #8]
   b72b4:	4620      	mov	r0, r4
   b72b6:	4798      	blx	r3
      pr->write('\n');
   b72b8:	6823      	ldr	r3, [r4, #0]
   b72ba:	210a      	movs	r1, #10
   b72bc:	689b      	ldr	r3, [r3, #8]
   b72be:	4620      	mov	r0, r4
   b72c0:	4798      	blx	r3
      if ((flags & LS_R) && file.isDir()) {
   b72c2:	072b      	lsls	r3, r5, #28
   b72c4:	d50d      	bpl.n	b72e2 <_ZN7FatFile2lsEP5Printhh+0xe0>
   b72c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b72ca:	f013 0f70 	tst.w	r3, #112	; 0x70
   b72ce:	d008      	beq.n	b72e2 <_ZN7FatFile2lsEP5Printhh+0xe0>
        if (!file.ls(pr, flags, indent + 2)) {
   b72d0:	1cbb      	adds	r3, r7, #2
   b72d2:	b2db      	uxtb	r3, r3
   b72d4:	462a      	mov	r2, r5
   b72d6:	4621      	mov	r1, r4
   b72d8:	a801      	add	r0, sp, #4
   b72da:	f7ff ff92 	bl	b7202 <_ZN7FatFile2lsEP5Printhh>
   b72de:	2800      	cmp	r0, #0
   b72e0:	d09c      	beq.n	b721c <_ZN7FatFile2lsEP5Printhh+0x1a>
    file.close();
   b72e2:	a801      	add	r0, sp, #4
   b72e4:	f7ff f8fc 	bl	b64e0 <_ZN7FatFile5closeEv>
  while (file.openNext(this, O_RDONLY)) {
   b72e8:	e7a3      	b.n	b7232 <_ZN7FatFile2lsEP5Printhh+0x30>
  if (getError()) {
   b72ea:	7870      	ldrb	r0, [r6, #1]
   b72ec:	fab0 f080 	clz	r0, r0
   b72f0:	0940      	lsrs	r0, r0, #5
   b72f2:	e794      	b.n	b721e <_ZN7FatFile2lsEP5Printhh+0x1c>

000b72f4 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b72f4:	b510      	push	{r4, lr}
   b72f6:	460c      	mov	r4, r1
    return m_attr;
   b72f8:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b72fa:	b909      	cbnz	r1, b7300 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b72fc:	2000      	movs	r0, #0
}
   b72fe:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b7300:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b7304:	d005      	beq.n	b7312 <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b7306:	232f      	movs	r3, #47	; 0x2f
   b7308:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b730a:	2300      	movs	r3, #0
   b730c:	7063      	strb	r3, [r4, #1]
  return true;
   b730e:	2001      	movs	r0, #1
   b7310:	e7f5      	b.n	b72fe <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b7312:	f7fe fea3 	bl	b605c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b7316:	2800      	cmp	r0, #0
   b7318:	d0f0      	beq.n	b72fc <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b731a:	4621      	mov	r1, r4
   b731c:	f7fe fead 	bl	b607a <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b7320:	e7f5      	b.n	b730e <_ZN7FatFile6getSFNEPc+0x1a>

000b7322 <_ZN7FatFile8printSFNEP5Print>:
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
   b7322:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7324:	460c      	mov	r4, r1
  char name[13];
  if (!getSFN(name)) {
   b7326:	4669      	mov	r1, sp
   b7328:	f7ff ffe4 	bl	b72f4 <_ZN7FatFile6getSFNEPc>
   b732c:	b140      	cbz	r0, b7340 <_ZN7FatFile8printSFNEP5Print+0x1e>
      return write((const uint8_t *)str, strlen(str));
   b732e:	4668      	mov	r0, sp
   b7330:	f004 fd59 	bl	bbde6 <strlen>
   b7334:	6823      	ldr	r3, [r4, #0]
   b7336:	4602      	mov	r2, r0
   b7338:	68db      	ldr	r3, [r3, #12]
   b733a:	4669      	mov	r1, sp
   b733c:	4620      	mov	r0, r4
   b733e:	4798      	blx	r3
  }
  return pr->write(name);

fail:
  return 0;
}
   b7340:	b004      	add	sp, #16
   b7342:	bd10      	pop	{r4, pc}

000b7344 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b7344:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b7346:	7803      	ldrb	r3, [r0, #0]
   b7348:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b734a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b734c:	d520      	bpl.n	b7390 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b734e:	6843      	ldr	r3, [r0, #4]
   b7350:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b7352:	f100 020c 	add.w	r2, r0, #12
   b7356:	6818      	ldr	r0, [r3, #0]
   b7358:	9201      	str	r2, [sp, #4]
   b735a:	f000 fbd4 	bl	b7b06 <_ZN9SdSpiCard10writeBlockEmPKh>
   b735e:	9a01      	ldr	r2, [sp, #4]
   b7360:	4605      	mov	r5, r0
   b7362:	b918      	cbnz	r0, b736c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b7364:	2500      	movs	r5, #0
}
   b7366:	4628      	mov	r0, r5
   b7368:	b003      	add	sp, #12
   b736a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b736c:	7823      	ldrb	r3, [r4, #0]
   b736e:	079b      	lsls	r3, r3, #30
   b7370:	d404      	bmi.n	b737c <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b7372:	7823      	ldrb	r3, [r4, #0]
   b7374:	f023 0301 	bic.w	r3, r3, #1
   b7378:	7023      	strb	r3, [r4, #0]
   b737a:	e7f4      	b.n	b7366 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b737c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b7380:	6919      	ldr	r1, [r3, #16]
   b7382:	4401      	add	r1, r0
   b7384:	6818      	ldr	r0, [r3, #0]
   b7386:	f000 fbbe 	bl	b7b06 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b738a:	2800      	cmp	r0, #0
   b738c:	d1f1      	bne.n	b7372 <_ZN8FatCache4syncEv+0x2e>
   b738e:	e7e9      	b.n	b7364 <_ZN8FatCache4syncEv+0x20>
  return true;
   b7390:	2501      	movs	r5, #1
   b7392:	e7e8      	b.n	b7366 <_ZN8FatCache4syncEv+0x22>

000b7394 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7394:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b7396:	6883      	ldr	r3, [r0, #8]
   b7398:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b739a:	4604      	mov	r4, r0
   b739c:	460e      	mov	r6, r1
   b739e:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b73a0:	d009      	beq.n	b73b6 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b73a2:	f7ff ffcf 	bl	b7344 <_ZN8FatCache4syncEv>
   b73a6:	b908      	cbnz	r0, b73ac <_ZN8FatCache4readEmh+0x18>
  return 0;
   b73a8:	2000      	movs	r0, #0
}
   b73aa:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b73ac:	076b      	lsls	r3, r5, #29
   b73ae:	d50a      	bpl.n	b73c6 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b73b0:	2300      	movs	r3, #0
   b73b2:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b73b4:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b73b6:	7822      	ldrb	r2, [r4, #0]
   b73b8:	f005 0503 	and.w	r5, r5, #3
   b73bc:	4620      	mov	r0, r4
   b73be:	4315      	orrs	r5, r2
   b73c0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b73c4:	e7f1      	b.n	b73aa <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b73c6:	6863      	ldr	r3, [r4, #4]
   b73c8:	f104 020c 	add.w	r2, r4, #12
   b73cc:	6818      	ldr	r0, [r3, #0]
   b73ce:	4631      	mov	r1, r6
   b73d0:	f000 fb10 	bl	b79f4 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b73d4:	2800      	cmp	r0, #0
   b73d6:	d1eb      	bne.n	b73b0 <_ZN8FatCache4readEmh+0x1c>
   b73d8:	e7e6      	b.n	b73a8 <_ZN8FatCache4readEmh+0x14>

000b73da <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b73da:	7983      	ldrb	r3, [r0, #6]
   b73dc:	6940      	ldr	r0, [r0, #20]
   b73de:	3902      	subs	r1, #2
   b73e0:	4099      	lsls	r1, r3
}
   b73e2:	4408      	add	r0, r1
   b73e4:	4770      	bx	lr

000b73e6 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b73e6:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b73e8:	b570      	push	{r4, r5, r6, lr}
   b73ea:	4605      	mov	r5, r0
   b73ec:	460c      	mov	r4, r1
   b73ee:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b73f0:	d802      	bhi.n	b73f8 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b73f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b73f6:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b73f8:	69c3      	ldr	r3, [r0, #28]
   b73fa:	428b      	cmp	r3, r1
   b73fc:	d3f9      	bcc.n	b73f2 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b73fe:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7400:	2b20      	cmp	r3, #32
   b7402:	d116      	bne.n	b7432 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7404:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7406:	2202      	movs	r2, #2
   b7408:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b740c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7410:	f7ff ffc0 	bl	b7394 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7414:	2800      	cmp	r0, #0
   b7416:	d0ec      	beq.n	b73f2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7418:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b741c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7420:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7424:	69ea      	ldr	r2, [r5, #28]
   b7426:	429a      	cmp	r2, r3
  *value = next;
   b7428:	bf26      	itte	cs
   b742a:	6033      	strcs	r3, [r6, #0]
  return 1;
   b742c:	2001      	movcs	r0, #1
    return 0;
   b742e:	2000      	movcc	r0, #0
   b7430:	e7e1      	b.n	b73f6 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7432:	2b10      	cmp	r3, #16
   b7434:	d1dd      	bne.n	b73f2 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7436:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b743a:	6981      	ldr	r1, [r0, #24]
   b743c:	2202      	movs	r2, #2
   b743e:	4419      	add	r1, r3
   b7440:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7444:	f7ff ffa6 	bl	b7394 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7448:	2800      	cmp	r0, #0
   b744a:	d0d2      	beq.n	b73f2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b744c:	b2e4      	uxtb	r4, r4
   b744e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7452:	e7e7      	b.n	b7424 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7454 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7454:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b7456:	b538      	push	{r3, r4, r5, lr}
   b7458:	460c      	mov	r4, r1
   b745a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b745c:	d801      	bhi.n	b7462 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b745e:	2000      	movs	r0, #0
}
   b7460:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7462:	69c3      	ldr	r3, [r0, #28]
   b7464:	428b      	cmp	r3, r1
   b7466:	d3fa      	bcc.n	b745e <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7468:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b746a:	2b20      	cmp	r3, #32
   b746c:	d10f      	bne.n	b748e <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b746e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7470:	2203      	movs	r2, #3
   b7472:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7476:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b747a:	f7ff ff8b 	bl	b7394 <_ZN8FatCache4readEmh>
    if (!pc) {
   b747e:	2800      	cmp	r0, #0
   b7480:	d0ed      	beq.n	b745e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b7482:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7486:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b748a:	2001      	movs	r0, #1
   b748c:	e7e8      	b.n	b7460 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b748e:	2b10      	cmp	r3, #16
   b7490:	d1e5      	bne.n	b745e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7492:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7496:	6981      	ldr	r1, [r0, #24]
   b7498:	2203      	movs	r2, #3
   b749a:	4419      	add	r1, r3
   b749c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b74a0:	f7ff ff78 	bl	b7394 <_ZN8FatCache4readEmh>
    if (!pc) {
   b74a4:	2800      	cmp	r0, #0
   b74a6:	d0da      	beq.n	b745e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b74a8:	b2e4      	uxtb	r4, r4
   b74aa:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b74ae:	e7ec      	b.n	b748a <_ZN9FatVolume6fatPutEmm+0x36>

000b74b0 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b74b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b74b4:	68c4      	ldr	r4, [r0, #12]
   b74b6:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b74b8:	4605      	mov	r5, r0
   b74ba:	460e      	mov	r6, r1
   b74bc:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b74be:	d301      	bcc.n	b74c4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b74c0:	2701      	movs	r7, #1
   b74c2:	e001      	b.n	b74c8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b74c4:	460c      	mov	r4, r1
    setStart = false;
   b74c6:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b74c8:	69eb      	ldr	r3, [r5, #28]
    find++;
   b74ca:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b74cc:	42a3      	cmp	r3, r4
   b74ce:	d202      	bcs.n	b74d6 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b74d0:	b9c7      	cbnz	r7, b7504 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b74d2:	68ec      	ldr	r4, [r5, #12]
   b74d4:	e7f4      	b.n	b74c0 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b74d6:	42a6      	cmp	r6, r4
   b74d8:	d014      	beq.n	b7504 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b74da:	aa01      	add	r2, sp, #4
   b74dc:	4621      	mov	r1, r4
   b74de:	4628      	mov	r0, r5
   b74e0:	f7ff ff81 	bl	b73e6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b74e4:	2800      	cmp	r0, #0
   b74e6:	db0d      	blt.n	b7504 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b74e8:	d0ee      	beq.n	b74c8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b74ea:	9b01      	ldr	r3, [sp, #4]
   b74ec:	2b00      	cmp	r3, #0
   b74ee:	d1eb      	bne.n	b74c8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b74f0:	b107      	cbz	r7, b74f4 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b74f2:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b74f4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b74f8:	4621      	mov	r1, r4
   b74fa:	4628      	mov	r0, r5
   b74fc:	f7ff ffaa 	bl	b7454 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b7500:	4607      	mov	r7, r0
   b7502:	b920      	cbnz	r0, b750e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7504:	2700      	movs	r7, #0
}
   b7506:	4638      	mov	r0, r7
   b7508:	b002      	add	sp, #8
   b750a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b750e:	b916      	cbnz	r6, b7516 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7510:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7514:	e7f7      	b.n	b7506 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7516:	4622      	mov	r2, r4
   b7518:	4631      	mov	r1, r6
   b751a:	4628      	mov	r0, r5
   b751c:	f7ff ff9a 	bl	b7454 <_ZN9FatVolume6fatPutEmm>
   b7520:	2800      	cmp	r0, #0
   b7522:	d1f5      	bne.n	b7510 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7524:	e7ee      	b.n	b7504 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7526 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7526:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t next = 0;
   b7528:	2300      	movs	r3, #0
bool FatVolume::freeChain(uint32_t cluster) {
   b752a:	4605      	mov	r5, r0
   b752c:	460c      	mov	r4, r1
  uint32_t next = 0;
   b752e:	9301      	str	r3, [sp, #4]
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7530:	aa01      	add	r2, sp, #4
   b7532:	4621      	mov	r1, r4
   b7534:	4628      	mov	r0, r5
   b7536:	f7ff ff56 	bl	b73e6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b753a:	1e06      	subs	r6, r0, #0
   b753c:	db10      	blt.n	b7560 <_ZN9FatVolume9freeChainEm+0x3a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b753e:	2200      	movs	r2, #0
   b7540:	4621      	mov	r1, r4
   b7542:	4628      	mov	r0, r5
   b7544:	f7ff ff86 	bl	b7454 <_ZN9FatVolume6fatPutEmm>
   b7548:	b150      	cbz	r0, b7560 <_ZN9FatVolume9freeChainEm+0x3a>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b754a:	68eb      	ldr	r3, [r5, #12]
   b754c:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b754e:	bf24      	itt	cs
   b7550:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b7554:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7556:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7558:	2e00      	cmp	r6, #0
   b755a:	d1e9      	bne.n	b7530 <_ZN9FatVolume9freeChainEm+0xa>

  return true;

fail:
  return false;
}
   b755c:	b002      	add	sp, #8
   b755e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7560:	2000      	movs	r0, #0
   b7562:	e7fb      	b.n	b755c <_ZN9FatVolume9freeChainEm+0x36>

000b7564 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b7564:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b7566:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b7568:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b756a:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b756c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b7570:	4604      	mov	r4, r0
  m_fatType = 0;
   b7572:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b7574:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7578:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b757a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b757e:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7580:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7584:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b7588:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b758c:	460d      	mov	r5, r1
   b758e:	b1b9      	cbz	r1, b75c0 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7590:	2904      	cmp	r1, #4
   b7592:	d901      	bls.n	b7598 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b7594:	2000      	movs	r0, #0
}
   b7596:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b7598:	4611      	mov	r1, r2
   b759a:	4630      	mov	r0, r6
   b759c:	f7ff fefa 	bl	b7394 <_ZN8FatCache4readEmh>
    if (!pc) {
   b75a0:	2800      	cmp	r0, #0
   b75a2:	d0f7      	beq.n	b7594 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b75a4:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b75a8:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b75ac:	065b      	lsls	r3, r3, #25
   b75ae:	d1f1      	bne.n	b7594 <_ZN9FatVolume4initEh+0x30>
   b75b0:	f105 011b 	add.w	r1, r5, #27
   b75b4:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b75b8:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b75bc:	2d00      	cmp	r5, #0
   b75be:	d0e9      	beq.n	b7594 <_ZN9FatVolume4initEh+0x30>
   b75c0:	2200      	movs	r2, #0
   b75c2:	4629      	mov	r1, r5
   b75c4:	4630      	mov	r0, r6
   b75c6:	f7ff fee5 	bl	b7394 <_ZN8FatCache4readEmh>
  if (!pc) {
   b75ca:	2800      	cmp	r0, #0
   b75cc:	d0e2      	beq.n	b7594 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b75ce:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b75d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b75d6:	d1dd      	bne.n	b7594 <_ZN9FatVolume4initEh+0x30>
   b75d8:	7c03      	ldrb	r3, [r0, #16]
   b75da:	2b02      	cmp	r3, #2
   b75dc:	d1da      	bne.n	b7594 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b75de:	89c3      	ldrh	r3, [r0, #14]
   b75e0:	2b00      	cmp	r3, #0
   b75e2:	d0d7      	beq.n	b7594 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b75e4:	7b41      	ldrb	r1, [r0, #13]
   b75e6:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b75e8:	1e4b      	subs	r3, r1, #1
   b75ea:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b75ec:	2300      	movs	r3, #0
   b75ee:	71a3      	strb	r3, [r4, #6]
   b75f0:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b75f2:	2301      	movs	r3, #1
   b75f4:	4299      	cmp	r1, r3
   b75f6:	d007      	beq.n	b7608 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b75f8:	3e01      	subs	r6, #1
   b75fa:	d0cb      	beq.n	b7594 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b75fc:	79a2      	ldrb	r2, [r4, #6]
   b75fe:	005b      	lsls	r3, r3, #1
   b7600:	3201      	adds	r2, #1
   b7602:	b2db      	uxtb	r3, r3
   b7604:	71a2      	strb	r2, [r4, #6]
   b7606:	e7f5      	b.n	b75f4 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7608:	8ac1      	ldrh	r1, [r0, #22]
   b760a:	b901      	cbnz	r1, b760e <_ZN9FatVolume4initEh+0xaa>
   b760c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b760e:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7610:	89c3      	ldrh	r3, [r0, #14]
   b7612:	442b      	add	r3, r5
   b7614:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7616:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b761a:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b761c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7620:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7622:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7626:	0149      	lsls	r1, r1, #5
   b7628:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b762c:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7630:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7632:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7636:	b902      	cbnz	r2, b763a <_ZN9FatVolume4initEh+0xd6>
   b7638:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b763a:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b763c:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b763e:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7640:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7642:	1c4b      	adds	r3, r1, #1
   b7644:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7646:	f640 73f4 	movw	r3, #4084	; 0xff4
   b764a:	4299      	cmp	r1, r3
   b764c:	d802      	bhi.n	b7654 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b764e:	230c      	movs	r3, #12
   b7650:	71e3      	strb	r3, [r4, #7]
   b7652:	e79f      	b.n	b7594 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b7654:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7658:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b765a:	bf85      	ittet	hi
   b765c:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b765e:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7660:	2310      	movls	r3, #16
    m_fatType = 32;
   b7662:	2320      	movhi	r3, #32
   b7664:	71e3      	strb	r3, [r4, #7]
  return true;
   b7666:	2001      	movs	r0, #1
   b7668:	e795      	b.n	b7596 <_ZN9FatVolume4initEh+0x32>

000b766a <_Z6fmtDectPc>:
  }
  return v;
}
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtDec(uint16_t n, char* p) {
   b766a:	b510      	push	{r4, lr}
  while (n > 9) {
   b766c:	2809      	cmp	r0, #9
    n = (n >> 1) + (n >> 2);
    n = n + (n >> 4);
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    uint8_t r = t - (((n << 2) + n) << 1);
   b766e:	b2c3      	uxtb	r3, r0
   b7670:	f101 34ff 	add.w	r4, r1, #4294967295	; 0xffffffff
  while (n > 9) {
   b7674:	d91d      	bls.n	b76b2 <_Z6fmtDectPc+0x48>
    n = (n >> 1) + (n >> 2);
   b7676:	0882      	lsrs	r2, r0, #2
   b7678:	eb02 0150 	add.w	r1, r2, r0, lsr #1
    n = n + (n >> 4);
   b767c:	f3c1 120f 	ubfx	r2, r1, #4, #16
   b7680:	440a      	add	r2, r1
    n = n + (n >> 8);
   b7682:	f3c2 2107 	ubfx	r1, r2, #8, #8
   b7686:	fa11 f282 	uxtah	r2, r1, r2
    n = n >> 3;
   b768a:	f3c2 00cc 	ubfx	r0, r2, #3, #13
    uint8_t r = t - (((n << 2) + n) << 1);
   b768e:	f3c2 02c7 	ubfx	r2, r2, #3, #8
   b7692:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b7696:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   b769a:	b2db      	uxtb	r3, r3
    if (r > 9) {
   b769c:	2b09      	cmp	r3, #9
      n++;
      r -= 10;
   b769e:	bf84      	itt	hi
   b76a0:	3b0a      	subhi	r3, #10
   b76a2:	b2db      	uxtbhi	r3, r3
    }
#endif  // USE_STIMMER
    *--p = r + '0';
   b76a4:	f103 0330 	add.w	r3, r3, #48	; 0x30
      n++;
   b76a8:	bf88      	it	hi
   b76aa:	3001      	addhi	r0, #1
    *--p = r + '0';
   b76ac:	4621      	mov	r1, r4
   b76ae:	7023      	strb	r3, [r4, #0]
  while (n > 9) {
   b76b0:	e7dc      	b.n	b766c <_Z6fmtDectPc+0x2>
  }
  *--p = n + '0';
   b76b2:	3330      	adds	r3, #48	; 0x30
   b76b4:	f801 3c01 	strb.w	r3, [r1, #-1]
  return p;
}
   b76b8:	4620      	mov	r0, r4
   b76ba:	bd10      	pop	{r4, pc}

000b76bc <_Z6fmtDecmPc>:
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtDec(uint32_t n, char* p) {
  while (n >> 16) {
   b76bc:	0c03      	lsrs	r3, r0, #16
   b76be:	d01c      	beq.n	b76fa <_Z6fmtDecmPc+0x3e>
#ifdef USE_STIMMER
    uint8_t tmp8, r;
    divmod10_asm32(n, r, tmp8);
#else  //  USE_STIMMER
    uint32_t t = n;
    n = (n >> 1) + (n >> 2);
   b76c0:	0883      	lsrs	r3, r0, #2
   b76c2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    n = n + (n >> 4);
   b76c6:	eb03 1313 	add.w	r3, r3, r3, lsr #4
    n = n + (n >> 8);
   b76ca:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    n = n + (n >> 16);
   b76ce:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    n = n >> 3;
   b76d2:	08da      	lsrs	r2, r3, #3
    uint8_t r = t - (((n << 2) + n) << 1);
   b76d4:	f3c3 03c7 	ubfx	r3, r3, #3, #8
   b76d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b76dc:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
   b76e0:	b2c0      	uxtb	r0, r0
    if (r > 9) {
   b76e2:	2809      	cmp	r0, #9
      n++;
      r -= 10;
   b76e4:	bf84      	itt	hi
   b76e6:	380a      	subhi	r0, #10
   b76e8:	b2c0      	uxtbhi	r0, r0
    }
#endif  // USE_STIMMER
    *--p = r + '0';
   b76ea:	f100 0030 	add.w	r0, r0, #48	; 0x30
      n++;
   b76ee:	bf88      	it	hi
   b76f0:	3201      	addhi	r2, #1
    *--p = r + '0';
   b76f2:	f801 0d01 	strb.w	r0, [r1, #-1]!
  while (n >> 16) {
   b76f6:	4610      	mov	r0, r2
   b76f8:	e7e0      	b.n	b76bc <_Z6fmtDecmPc>
  }
  return fmtDec((uint16_t)n, p);
   b76fa:	b280      	uxth	r0, r0
   b76fc:	f7ff bfb5 	b.w	b766a <_Z6fmtDectPc>

000b7700 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7700:	f000 baca 	b.w	b7c98 <_ZN14SdSpiAltDriver4sendEh>

000b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7704:	f000 baad 	b.w	b7c62 <_ZN14SdSpiAltDriver7receiveEv>

000b7708 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7708:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b770a:	4e0e      	ldr	r6, [pc, #56]	; (b7744 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b770c:	460d      	mov	r5, r1
   b770e:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7710:	f000 fb0a 	bl	b7d28 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7714:	6833      	ldr	r3, [r6, #0]
   b7716:	1ac0      	subs	r0, r0, r3
   b7718:	4b0b      	ldr	r3, [pc, #44]	; (b7748 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b771a:	4298      	cmp	r0, r3
   b771c:	d908      	bls.n	b7730 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b771e:	f000 fb0b 	bl	b7d38 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7722:	4b0a      	ldr	r3, [pc, #40]	; (b774c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7724:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b7726:	f000 fce3 	bl	b80f0 <spark_process>
   b772a:	f000 fafd 	bl	b7d28 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b772e:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7730:	f000 fb02 	bl	b7d38 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7734:	b280      	uxth	r0, r0
   b7736:	1b40      	subs	r0, r0, r5
}
   b7738:	42a0      	cmp	r0, r4
   b773a:	bfd4      	ite	le
   b773c:	2000      	movle	r0, #0
   b773e:	2001      	movgt	r0, #1
   b7740:	bd70      	pop	{r4, r5, r6, pc}
   b7742:	bf00      	nop
   b7744:	2003e68c 	.word	0x2003e68c
   b7748:	000186a0 	.word	0x000186a0
   b774c:	2003e72c 	.word	0x2003e72c

000b7750 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b7750:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b7752:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7754:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b7756:	b94d      	cbnz	r5, b776c <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b7758:	6840      	ldr	r0, [r0, #4]
   b775a:	f000 fa6b 	bl	b7c34 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b775e:	6863      	ldr	r3, [r4, #4]
   b7760:	4629      	mov	r1, r5
   b7762:	7d18      	ldrb	r0, [r3, #20]
   b7764:	f002 ff67 	bl	ba636 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b7768:	2301      	movs	r3, #1
   b776a:	7223      	strb	r3, [r4, #8]
  }
}
   b776c:	bd38      	pop	{r3, r4, r5, pc}

000b776e <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b776e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7770:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7772:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7774:	b16b      	cbz	r3, b7792 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b7776:	6843      	ldr	r3, [r0, #4]
   b7778:	2101      	movs	r1, #1
   b777a:	7d18      	ldrb	r0, [r3, #20]
   b777c:	f002 ff5b 	bl	ba636 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7780:	6860      	ldr	r0, [r4, #4]
   b7782:	21ff      	movs	r1, #255	; 0xff
   b7784:	f7ff ffbc 	bl	b7700 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7788:	6860      	ldr	r0, [r4, #4]
   b778a:	f000 fa67 	bl	b7c5c <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b778e:	2300      	movs	r3, #0
   b7790:	7223      	strb	r3, [r4, #8]
  }
}
   b7792:	bd10      	pop	{r4, pc}

000b7794 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7796:	4604      	mov	r4, r0
   b7798:	460d      	mov	r5, r1
   b779a:	4616      	mov	r6, r2
   b779c:	f000 facc 	bl	b7d38 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b77a0:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b77a2:	6860      	ldr	r0, [r4, #4]
   b77a4:	f7ff ffae 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b77a8:	28ff      	cmp	r0, #255	; 0xff
   b77aa:	7260      	strb	r0, [r4, #9]
   b77ac:	d10e      	bne.n	b77cc <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b77ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b77b2:	4639      	mov	r1, r7
   b77b4:	4620      	mov	r0, r4
   b77b6:	f7ff ffa7 	bl	b7708 <_ZN9SdSpiCard10isTimedOutEtt>
   b77ba:	2800      	cmp	r0, #0
   b77bc:	d0f1      	beq.n	b77a2 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b77be:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b77c0:	4620      	mov	r0, r4
   b77c2:	7023      	strb	r3, [r4, #0]
   b77c4:	f7ff ffd3 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b77c8:	2000      	movs	r0, #0
}
   b77ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b77cc:	28fe      	cmp	r0, #254	; 0xfe
   b77ce:	d001      	beq.n	b77d4 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b77d0:	2350      	movs	r3, #80	; 0x50
   b77d2:	e7f5      	b.n	b77c0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b77d4:	6860      	ldr	r0, [r4, #4]
   b77d6:	4632      	mov	r2, r6
   b77d8:	4629      	mov	r1, r5
   b77da:	f000 fa47 	bl	b7c6c <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b77de:	7260      	strb	r0, [r4, #9]
   b77e0:	b108      	cbz	r0, b77e6 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b77e2:	2360      	movs	r3, #96	; 0x60
   b77e4:	e7ec      	b.n	b77c0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b77e6:	6860      	ldr	r0, [r4, #4]
   b77e8:	f7ff ff8c 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b77ec:	6860      	ldr	r0, [r4, #4]
   b77ee:	f7ff ff89 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b77f2:	2001      	movs	r0, #1
   b77f4:	e7e9      	b.n	b77ca <_ZN9SdSpiCard8readDataEPhj+0x36>

000b77f6 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b77f6:	b570      	push	{r4, r5, r6, lr}
   b77f8:	4604      	mov	r4, r0
   b77fa:	460e      	mov	r6, r1
   b77fc:	f000 fa9c 	bl	b7d38 <HAL_Timer_Get_Milli_Seconds>
   b7800:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7802:	4632      	mov	r2, r6
   b7804:	4629      	mov	r1, r5
   b7806:	4620      	mov	r0, r4
   b7808:	f7ff ff7e 	bl	b7708 <_ZN9SdSpiCard10isTimedOutEtt>
   b780c:	b930      	cbnz	r0, b781c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b780e:	6860      	ldr	r0, [r4, #4]
   b7810:	f7ff ff78 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7814:	28ff      	cmp	r0, #255	; 0xff
   b7816:	d1f4      	bne.n	b7802 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7818:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b781a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b781c:	2000      	movs	r0, #0
   b781e:	e7fc      	b.n	b781a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b7820 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b7822:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7824:	9201      	str	r2, [sp, #4]
   b7826:	4604      	mov	r4, r0
   b7828:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b782a:	b90b      	cbnz	r3, b7830 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b782c:	f7ff ff90 	bl	b7750 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b7830:	b125      	cbz	r5, b783c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b7832:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b7836:	4620      	mov	r0, r4
   b7838:	f7ff ffdd 	bl	b77f6 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b783c:	6860      	ldr	r0, [r4, #4]
   b783e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b7842:	f7ff ff5d 	bl	b7700 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7846:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b7848:	af01      	add	r7, sp, #4
   b784a:	5db9      	ldrb	r1, [r7, r6]
   b784c:	6860      	ldr	r0, [r4, #4]
   b784e:	f7ff ff57 	bl	b7700 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b7852:	3e01      	subs	r6, #1
   b7854:	d2f9      	bcs.n	b784a <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b7856:	2d00      	cmp	r5, #0
   b7858:	6860      	ldr	r0, [r4, #4]
   b785a:	bf0c      	ite	eq
   b785c:	2195      	moveq	r1, #149	; 0x95
   b785e:	2187      	movne	r1, #135	; 0x87
   b7860:	f7ff ff4e 	bl	b7700 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7864:	6860      	ldr	r0, [r4, #4]
   b7866:	f7ff ff4d 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b786a:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b786c:	6860      	ldr	r0, [r4, #4]
   b786e:	f7ff ff49 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7872:	0603      	lsls	r3, r0, #24
   b7874:	7260      	strb	r0, [r4, #9]
   b7876:	d503      	bpl.n	b7880 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b7878:	3d01      	subs	r5, #1
   b787a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b787e:	d1f5      	bne.n	b786c <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7880:	b003      	add	sp, #12
   b7882:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7884 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7884:	b570      	push	{r4, r5, r6, lr}
   b7886:	4604      	mov	r4, r0
   b7888:	460d      	mov	r5, r1
   b788a:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b788c:	2137      	movs	r1, #55	; 0x37
   b788e:	2200      	movs	r2, #0
   b7890:	f7ff ffc6 	bl	b7820 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7894:	4632      	mov	r2, r6
   b7896:	4629      	mov	r1, r5
   b7898:	4620      	mov	r0, r4
  }
   b789a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b789e:	f7ff bfbf 	b.w	b7820 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b78a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b78a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b78a8:	2500      	movs	r5, #0
   b78aa:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b78ac:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b78ae:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b78b0:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b78b2:	4604      	mov	r4, r0
   b78b4:	4690      	mov	r8, r2
   b78b6:	461e      	mov	r6, r3
   b78b8:	f000 fa3e 	bl	b7d38 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b78bc:	4641      	mov	r1, r8
   b78be:	4607      	mov	r7, r0
   b78c0:	6860      	ldr	r0, [r4, #4]
   b78c2:	f000 f9bb 	bl	b7c3c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b78c6:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b78c8:	4a49      	ldr	r2, [pc, #292]	; (b79f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b78ca:	721d      	strb	r5, [r3, #8]
   b78cc:	2501      	movs	r5, #1
   b78ce:	60da      	str	r2, [r3, #12]
   b78d0:	821d      	strh	r5, [r3, #16]
  spiStart();
   b78d2:	4620      	mov	r0, r4
   b78d4:	f7ff ff3c 	bl	b7750 <_ZN9SdSpiCard8spiStartEv>
   b78d8:	6863      	ldr	r3, [r4, #4]
   b78da:	4629      	mov	r1, r5
   b78dc:	7d18      	ldrb	r0, [r3, #20]
   b78de:	f002 feaa 	bl	ba636 <digitalWrite>
   b78e2:	250a      	movs	r5, #10
    spiSend(0XFF);
   b78e4:	6860      	ldr	r0, [r4, #4]
   b78e6:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b78e8:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b78ea:	f7ff ff09 	bl	b7700 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b78ee:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b78f2:	d1f7      	bne.n	b78e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b78f4:	6863      	ldr	r3, [r4, #4]
   b78f6:	4629      	mov	r1, r5
   b78f8:	7d18      	ldrb	r0, [r3, #20]
   b78fa:	f002 fe9c 	bl	ba636 <digitalWrite>
  }
   b78fe:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7900:	2200      	movs	r2, #0
   b7902:	4611      	mov	r1, r2
   b7904:	4620      	mov	r0, r4
   b7906:	f7ff ff8b 	bl	b7820 <_ZN9SdSpiCard11cardCommandEhm>
   b790a:	2801      	cmp	r0, #1
   b790c:	4680      	mov	r8, r0
   b790e:	d018      	beq.n	b7942 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7910:	3d01      	subs	r5, #1
   b7912:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7916:	d107      	bne.n	b7928 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7918:	2320      	movs	r3, #32
  spiStop();
   b791a:	4620      	mov	r0, r4
   b791c:	7023      	strb	r3, [r4, #0]
   b791e:	f7ff ff26 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7922:	2000      	movs	r0, #0
}
   b7924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7928:	6860      	ldr	r0, [r4, #4]
   b792a:	21fd      	movs	r1, #253	; 0xfd
   b792c:	f7ff fee8 	bl	b7700 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7930:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7934:	6860      	ldr	r0, [r4, #4]
   b7936:	f7ff fee5 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b793a:	f1b8 0801 	subs.w	r8, r8, #1
   b793e:	d1f9      	bne.n	b7934 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7940:	e7de      	b.n	b7900 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7942:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b7946:	2108      	movs	r1, #8
   b7948:	4620      	mov	r0, r4
   b794a:	f7ff ff69 	bl	b7820 <_ZN9SdSpiCard11cardCommandEhm>
   b794e:	2805      	cmp	r0, #5
   b7950:	d114      	bne.n	b797c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7952:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7956:	2500      	movs	r5, #0
   b7958:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b795a:	462a      	mov	r2, r5
   b795c:	2129      	movs	r1, #41	; 0x29
   b795e:	4620      	mov	r0, r4
   b7960:	f7ff ff90 	bl	b7884 <_ZN9SdSpiCard8cardAcmdEhm>
   b7964:	4602      	mov	r2, r0
   b7966:	b1d8      	cbz	r0, b79a0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7968:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b796c:	4639      	mov	r1, r7
   b796e:	4620      	mov	r0, r4
   b7970:	f7ff feca 	bl	b7708 <_ZN9SdSpiCard10isTimedOutEtt>
   b7974:	2800      	cmp	r0, #0
   b7976:	d0f0      	beq.n	b795a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7978:	2343      	movs	r3, #67	; 0x43
   b797a:	e7ce      	b.n	b791a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b797c:	2504      	movs	r5, #4
      m_status = spiReceive();
   b797e:	6860      	ldr	r0, [r4, #4]
   b7980:	f7ff fec0 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7984:	3d01      	subs	r5, #1
   b7986:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b798a:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b798c:	d1f7      	bne.n	b797e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b798e:	28aa      	cmp	r0, #170	; 0xaa
   b7990:	d104      	bne.n	b799c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7992:	2302      	movs	r3, #2
   b7994:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7996:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b799a:	e7dd      	b.n	b7958 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b799c:	2325      	movs	r3, #37	; 0x25
   b799e:	e7bc      	b.n	b791a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b79a0:	7aa3      	ldrb	r3, [r4, #10]
   b79a2:	2b02      	cmp	r3, #2
   b79a4:	d118      	bne.n	b79d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b79a6:	213a      	movs	r1, #58	; 0x3a
   b79a8:	4620      	mov	r0, r4
   b79aa:	f7ff ff39 	bl	b7820 <_ZN9SdSpiCard11cardCommandEhm>
   b79ae:	b108      	cbz	r0, b79b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b79b0:	2337      	movs	r3, #55	; 0x37
   b79b2:	e7b2      	b.n	b791a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b79b4:	6860      	ldr	r0, [r4, #4]
   b79b6:	f7ff fea5 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79ba:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b79be:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b79c0:	bf04      	itt	eq
   b79c2:	2303      	moveq	r3, #3
   b79c4:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b79c6:	6860      	ldr	r0, [r4, #4]
   b79c8:	f7ff fe9c 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79cc:	6860      	ldr	r0, [r4, #4]
   b79ce:	f7ff fe99 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79d2:	6860      	ldr	r0, [r4, #4]
   b79d4:	f7ff fe96 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b79d8:	4620      	mov	r0, r4
   b79da:	f7ff fec8 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b79de:	6863      	ldr	r3, [r4, #4]
   b79e0:	7930      	ldrb	r0, [r6, #4]
   b79e2:	68b1      	ldr	r1, [r6, #8]
   b79e4:	89b2      	ldrh	r2, [r6, #12]
   b79e6:	821a      	strh	r2, [r3, #16]
   b79e8:	7218      	strb	r0, [r3, #8]
   b79ea:	60d9      	str	r1, [r3, #12]
  return true;
   b79ec:	2001      	movs	r0, #1
   b79ee:	e799      	b.n	b7924 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b79f0:	0003d090 	.word	0x0003d090

000b79f4 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b79f4:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b79f6:	7a83      	ldrb	r3, [r0, #10]
   b79f8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b79fa:	bf18      	it	ne
   b79fc:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b79fe:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7a00:	460a      	mov	r2, r1
   b7a02:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7a04:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b7a06:	f7ff ff0b 	bl	b7820 <_ZN9SdSpiCard11cardCommandEhm>
   b7a0a:	b130      	cbz	r0, b7a1a <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b7a0c:	2330      	movs	r3, #48	; 0x30
   b7a0e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7a10:	4620      	mov	r0, r4
   b7a12:	f7ff feac 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a16:	2500      	movs	r5, #0
   b7a18:	e00b      	b.n	b7a32 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b7a1a:	4629      	mov	r1, r5
   b7a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7a20:	4620      	mov	r0, r4
   b7a22:	f7ff feb7 	bl	b7794 <_ZN9SdSpiCard8readDataEPhj>
   b7a26:	4605      	mov	r5, r0
   b7a28:	2800      	cmp	r0, #0
   b7a2a:	d0f1      	beq.n	b7a10 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b7a2c:	4620      	mov	r0, r4
   b7a2e:	f7ff fe9e 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
}
   b7a32:	4628      	mov	r0, r5
   b7a34:	bd38      	pop	{r3, r4, r5, pc}

000b7a36 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7a36:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7a38:	7a83      	ldrb	r3, [r0, #10]
   b7a3a:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7a3c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7a3e:	bf18      	it	ne
   b7a40:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b7a42:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7a44:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b7a46:	f7ff feeb 	bl	b7820 <_ZN9SdSpiCard11cardCommandEhm>
   b7a4a:	b130      	cbz	r0, b7a5a <_ZN9SdSpiCard9readStartEm+0x24>
   b7a4c:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b7a4e:	4620      	mov	r0, r4
   b7a50:	7023      	strb	r3, [r4, #0]
   b7a52:	f7ff fe8c 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a56:	2000      	movs	r0, #0
}
   b7a58:	bd10      	pop	{r4, pc}
  return true;
   b7a5a:	2001      	movs	r0, #1
   b7a5c:	e7fc      	b.n	b7a58 <_ZN9SdSpiCard9readStartEm+0x22>

000b7a5e <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b7a5e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b7a60:	2200      	movs	r2, #0
   b7a62:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b7a64:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b7a66:	f7ff fedb 	bl	b7820 <_ZN9SdSpiCard11cardCommandEhm>
   b7a6a:	b130      	cbz	r0, b7a7a <_ZN9SdSpiCard8readStopEv+0x1c>
   b7a6c:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7a6e:	4620      	mov	r0, r4
   b7a70:	7023      	strb	r3, [r4, #0]
   b7a72:	f7ff fe7c 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a76:	2000      	movs	r0, #0
}
   b7a78:	bd10      	pop	{r4, pc}
  spiStop();
   b7a7a:	4620      	mov	r0, r4
   b7a7c:	f7ff fe77 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7a80:	2001      	movs	r0, #1
   b7a82:	e7f9      	b.n	b7a78 <_ZN9SdSpiCard8readStopEv+0x1a>

000b7a84 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a86:	4604      	mov	r4, r0
   b7a88:	4616      	mov	r6, r2
   b7a8a:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7a8c:	f7ff ffd3 	bl	b7a36 <_ZN9SdSpiCard9readStartEm>
   b7a90:	b168      	cbz	r0, b7aae <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7a92:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7a94:	b2ab      	uxth	r3, r5
   b7a96:	429f      	cmp	r7, r3
   b7a98:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7a9c:	d909      	bls.n	b7ab2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7aa2:	4620      	mov	r0, r4
   b7aa4:	f7ff fe76 	bl	b7794 <_ZN9SdSpiCard8readDataEPhj>
   b7aa8:	3501      	adds	r5, #1
   b7aaa:	2800      	cmp	r0, #0
   b7aac:	d1f2      	bne.n	b7a94 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7aae:	2000      	movs	r0, #0
   b7ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7ab2:	4620      	mov	r0, r4
}
   b7ab4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7ab8:	f7ff bfd1 	b.w	b7a5e <_ZN9SdSpiCard8readStopEv>

000b7abc <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7abc:	b538      	push	{r3, r4, r5, lr}
   b7abe:	4604      	mov	r4, r0
   b7ac0:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7ac2:	6840      	ldr	r0, [r0, #4]
   b7ac4:	f7ff fe1c 	bl	b7700 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7acc:	6860      	ldr	r0, [r4, #4]
   b7ace:	4629      	mov	r1, r5
   b7ad0:	f000 f8e6 	bl	b7ca0 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7ad4:	6860      	ldr	r0, [r4, #4]
   b7ad6:	21ff      	movs	r1, #255	; 0xff
   b7ad8:	f7ff fe12 	bl	b7700 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7adc:	6860      	ldr	r0, [r4, #4]
   b7ade:	21ff      	movs	r1, #255	; 0xff
   b7ae0:	f7ff fe0e 	bl	b7700 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7ae4:	6860      	ldr	r0, [r4, #4]
   b7ae6:	f7ff fe0d 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7aea:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7aec:	f000 001f 	and.w	r0, r0, #31
   b7af0:	2805      	cmp	r0, #5
   b7af2:	d006      	beq.n	b7b02 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7af4:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7af6:	4620      	mov	r0, r4
   b7af8:	7023      	strb	r3, [r4, #0]
   b7afa:	f7ff fe38 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7afe:	2000      	movs	r0, #0
}
   b7b00:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7b02:	2001      	movs	r0, #1
   b7b04:	e7fc      	b.n	b7b00 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b7b06 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7b06:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7b08:	7a83      	ldrb	r3, [r0, #10]
   b7b0a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7b0c:	bf18      	it	ne
   b7b0e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7b10:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7b12:	460a      	mov	r2, r1
   b7b14:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7b16:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7b18:	f7ff fe82 	bl	b7820 <_ZN9SdSpiCard11cardCommandEhm>
   b7b1c:	4606      	mov	r6, r0
   b7b1e:	b130      	cbz	r0, b7b2e <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b7b20:	2332      	movs	r3, #50	; 0x32
   b7b22:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7b24:	4620      	mov	r0, r4
   b7b26:	f7ff fe22 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7b2a:	2500      	movs	r5, #0
   b7b2c:	e01f      	b.n	b7b6e <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b7b2e:	462a      	mov	r2, r5
   b7b30:	21fe      	movs	r1, #254	; 0xfe
   b7b32:	4620      	mov	r0, r4
   b7b34:	f7ff ffc2 	bl	b7abc <_ZN9SdSpiCard9writeDataEhPKh>
   b7b38:	2800      	cmp	r0, #0
   b7b3a:	d0f3      	beq.n	b7b24 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b3c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7b40:	4620      	mov	r0, r4
   b7b42:	f7ff fe58 	bl	b77f6 <_ZN9SdSpiCard11waitNotBusyEt>
   b7b46:	4605      	mov	r5, r0
   b7b48:	b908      	cbnz	r0, b7b4e <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b7b4a:	235a      	movs	r3, #90	; 0x5a
   b7b4c:	e7e9      	b.n	b7b22 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b7b4e:	4632      	mov	r2, r6
   b7b50:	210d      	movs	r1, #13
   b7b52:	4620      	mov	r0, r4
   b7b54:	f7ff fe64 	bl	b7820 <_ZN9SdSpiCard11cardCommandEhm>
   b7b58:	b108      	cbz	r0, b7b5e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b7b5a:	2329      	movs	r3, #41	; 0x29
   b7b5c:	e7e1      	b.n	b7b22 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b7b5e:	6860      	ldr	r0, [r4, #4]
   b7b60:	f7ff fdd0 	bl	b7704 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7b64:	2800      	cmp	r0, #0
   b7b66:	d1f8      	bne.n	b7b5a <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7b68:	4620      	mov	r0, r4
   b7b6a:	f7ff fe00 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
}
   b7b6e:	4628      	mov	r0, r5
   b7b70:	bd70      	pop	{r4, r5, r6, pc}

000b7b72 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b7b72:	b513      	push	{r0, r1, r4, lr}
   b7b74:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b76:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b7b7a:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b7c:	f7ff fe3b 	bl	b77f6 <_ZN9SdSpiCard11waitNotBusyEt>
   b7b80:	9a01      	ldr	r2, [sp, #4]
   b7b82:	b930      	cbnz	r0, b7b92 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7b84:	235b      	movs	r3, #91	; 0x5b
   b7b86:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7b88:	4620      	mov	r0, r4
   b7b8a:	f7ff fdf0 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7b8e:	2000      	movs	r0, #0
   b7b90:	e005      	b.n	b7b9e <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7b92:	21fc      	movs	r1, #252	; 0xfc
   b7b94:	4620      	mov	r0, r4
   b7b96:	f7ff ff91 	bl	b7abc <_ZN9SdSpiCard9writeDataEhPKh>
   b7b9a:	2800      	cmp	r0, #0
   b7b9c:	d0f4      	beq.n	b7b88 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7b9e:	b002      	add	sp, #8
   b7ba0:	bd10      	pop	{r4, pc}

000b7ba2 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7ba2:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7ba4:	7a83      	ldrb	r3, [r0, #10]
   b7ba6:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7ba8:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7baa:	bf18      	it	ne
   b7bac:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7bae:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7bb0:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7bb2:	f7ff fe35 	bl	b7820 <_ZN9SdSpiCard11cardCommandEhm>
   b7bb6:	b130      	cbz	r0, b7bc6 <_ZN9SdSpiCard10writeStartEm+0x24>
   b7bb8:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7bba:	4620      	mov	r0, r4
   b7bbc:	7023      	strb	r3, [r4, #0]
   b7bbe:	f7ff fdd6 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7bc2:	2000      	movs	r0, #0
}
   b7bc4:	bd10      	pop	{r4, pc}
  return true;
   b7bc6:	2001      	movs	r0, #1
   b7bc8:	e7fc      	b.n	b7bc4 <_ZN9SdSpiCard10writeStartEm+0x22>

000b7bca <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7bca:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7bcc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7bd0:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7bd2:	f7ff fe10 	bl	b77f6 <_ZN9SdSpiCard11waitNotBusyEt>
   b7bd6:	4605      	mov	r5, r0
   b7bd8:	b930      	cbnz	r0, b7be8 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7bda:	2356      	movs	r3, #86	; 0x56
   b7bdc:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7bde:	4620      	mov	r0, r4
   b7be0:	f7ff fdc5 	bl	b776e <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7be4:	4628      	mov	r0, r5
   b7be6:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7be8:	6860      	ldr	r0, [r4, #4]
   b7bea:	21fd      	movs	r1, #253	; 0xfd
   b7bec:	f7ff fd88 	bl	b7700 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7bf0:	e7f5      	b.n	b7bde <_ZN9SdSpiCard9writeStopEv+0x14>

000b7bf2 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7bf4:	4604      	mov	r4, r0
   b7bf6:	4616      	mov	r6, r2
   b7bf8:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b7bfa:	f7ff ffd2 	bl	b7ba2 <_ZN9SdSpiCard10writeStartEm>
   b7bfe:	b170      	cbz	r0, b7c1e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7c00:	2500      	movs	r5, #0
   b7c02:	42bd      	cmp	r5, r7
   b7c04:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b7c08:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b7c0a:	d004      	beq.n	b7c16 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b7c0c:	f7ff ffb1 	bl	b7b72 <_ZN9SdSpiCard9writeDataEPKh>
   b7c10:	b128      	cbz	r0, b7c1e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7c12:	3501      	adds	r5, #1
   b7c14:	e7f5      	b.n	b7c02 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b7c16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b7c1a:	f7ff bfd6 	b.w	b7bca <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b7c1e:	4620      	mov	r0, r4
   b7c20:	f7ff fda5 	bl	b776e <_ZN9SdSpiCard7spiStopEv>
}
   b7c24:	2000      	movs	r0, #0
   b7c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7c28 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b7c28:	4b01      	ldr	r3, [pc, #4]	; (b7c30 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b7c2a:	2201      	movs	r2, #1
   b7c2c:	701a      	strb	r2, [r3, #0]
}
   b7c2e:	4770      	bx	lr
   b7c30:	2003e690 	.word	0x2003e690

000b7c34 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b7c34:	1d01      	adds	r1, r0, #4
   b7c36:	6800      	ldr	r0, [r0, #0]
   b7c38:	f002 b846 	b.w	b9cc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b7c3c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b7c3c:	b510      	push	{r4, lr}
   b7c3e:	4604      	mov	r4, r0
  m_csPin = csPin;
   b7c40:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b7c42:	6800      	ldr	r0, [r0, #0]
   b7c44:	f002 f812 	bl	b9c6c <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b7c48:	7d20      	ldrb	r0, [r4, #20]
   b7c4a:	2101      	movs	r1, #1
   b7c4c:	f002 fce2 	bl	ba614 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b7c50:	7d20      	ldrb	r0, [r4, #20]
   b7c52:	2101      	movs	r1, #1
}
   b7c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b7c58:	f002 bced 	b.w	ba636 <digitalWrite>

000b7c5c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b7c5c:	6800      	ldr	r0, [r0, #0]
   b7c5e:	f002 b819 	b.w	b9c94 <_ZN8SPIClass14endTransactionEv>

000b7c62 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b7c62:	6800      	ldr	r0, [r0, #0]
   b7c64:	21ff      	movs	r1, #255	; 0xff
   b7c66:	f002 b89d 	b.w	b9da4 <_ZN8SPIClass8transferEh>
	...

000b7c6c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c6e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7c70:	4a07      	ldr	r2, [pc, #28]	; (b7c90 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b7c72:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7c74:	2500      	movs	r5, #0
   b7c76:	4c07      	ldr	r4, [pc, #28]	; (b7c94 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7c78:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7c7a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7c7c:	460a      	mov	r2, r1
   b7c7e:	4629      	mov	r1, r5
   b7c80:	f002 f896 	bl	b9db0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7c84:	7823      	ldrb	r3, [r4, #0]
   b7c86:	2b00      	cmp	r3, #0
   b7c88:	d0fc      	beq.n	b7c84 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b7c8a:	2000      	movs	r0, #0
   b7c8c:	b003      	add	sp, #12
   b7c8e:	bd30      	pop	{r4, r5, pc}
   b7c90:	000b7c29 	.word	0x000b7c29
   b7c94:	2003e690 	.word	0x2003e690

000b7c98 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7c98:	6800      	ldr	r0, [r0, #0]
   b7c9a:	f002 b883 	b.w	b9da4 <_ZN8SPIClass8transferEh>
	...

000b7ca0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7ca2:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7ca4:	4a06      	ldr	r2, [pc, #24]	; (b7cc0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b7ca6:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7ca8:	2500      	movs	r5, #0
   b7caa:	4c06      	ldr	r4, [pc, #24]	; (b7cc4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7cac:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7cae:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7cb0:	462a      	mov	r2, r5
   b7cb2:	f002 f87d 	bl	b9db0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b7cb6:	7823      	ldrb	r3, [r4, #0]
   b7cb8:	2b00      	cmp	r3, #0
   b7cba:	d0fc      	beq.n	b7cb6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7cbc:	b003      	add	sp, #12
   b7cbe:	bd30      	pop	{r4, r5, pc}
   b7cc0:	000b7c29 	.word	0x000b7c29
   b7cc4:	2003e690 	.word	0x2003e690

000b7cc8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7cc8:	b508      	push	{r3, lr}
   b7cca:	4b02      	ldr	r3, [pc, #8]	; (b7cd4 <os_mutex_recursive_create+0xc>)
   b7ccc:	681b      	ldr	r3, [r3, #0]
   b7cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7cd0:	9301      	str	r3, [sp, #4]
   b7cd2:	bd08      	pop	{r3, pc}
   b7cd4:	00030248 	.word	0x00030248

000b7cd8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b7cd8:	b508      	push	{r3, lr}
   b7cda:	4b02      	ldr	r3, [pc, #8]	; (b7ce4 <os_mutex_recursive_destroy+0xc>)
   b7cdc:	681b      	ldr	r3, [r3, #0]
   b7cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b7ce0:	9301      	str	r3, [sp, #4]
   b7ce2:	bd08      	pop	{r3, pc}
   b7ce4:	00030248 	.word	0x00030248

000b7ce8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7ce8:	b508      	push	{r3, lr}
   b7cea:	4b02      	ldr	r3, [pc, #8]	; (b7cf4 <os_mutex_recursive_lock+0xc>)
   b7cec:	681b      	ldr	r3, [r3, #0]
   b7cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7cf0:	9301      	str	r3, [sp, #4]
   b7cf2:	bd08      	pop	{r3, pc}
   b7cf4:	00030248 	.word	0x00030248

000b7cf8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7cf8:	b508      	push	{r3, lr}
   b7cfa:	4b02      	ldr	r3, [pc, #8]	; (b7d04 <os_mutex_recursive_unlock+0xc>)
   b7cfc:	681b      	ldr	r3, [r3, #0]
   b7cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7d00:	9301      	str	r3, [sp, #4]
   b7d02:	bd08      	pop	{r3, pc}
   b7d04:	00030248 	.word	0x00030248

000b7d08 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7d08:	b508      	push	{r3, lr}
   b7d0a:	4b02      	ldr	r3, [pc, #8]	; (b7d14 <HAL_RNG_GetRandomNumber+0xc>)
   b7d0c:	681b      	ldr	r3, [r3, #0]
   b7d0e:	685b      	ldr	r3, [r3, #4]
   b7d10:	9301      	str	r3, [sp, #4]
   b7d12:	bd08      	pop	{r3, pc}
   b7d14:	00030218 	.word	0x00030218

000b7d18 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7d18:	b508      	push	{r3, lr}
   b7d1a:	4b02      	ldr	r3, [pc, #8]	; (b7d24 <HAL_Delay_Microseconds+0xc>)
   b7d1c:	681b      	ldr	r3, [r3, #0]
   b7d1e:	68db      	ldr	r3, [r3, #12]
   b7d20:	9301      	str	r3, [sp, #4]
   b7d22:	bd08      	pop	{r3, pc}
   b7d24:	00030218 	.word	0x00030218

000b7d28 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b7d28:	b508      	push	{r3, lr}
   b7d2a:	4b02      	ldr	r3, [pc, #8]	; (b7d34 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b7d2c:	681b      	ldr	r3, [r3, #0]
   b7d2e:	691b      	ldr	r3, [r3, #16]
   b7d30:	9301      	str	r3, [sp, #4]
   b7d32:	bd08      	pop	{r3, pc}
   b7d34:	00030218 	.word	0x00030218

000b7d38 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7d38:	b508      	push	{r3, lr}
   b7d3a:	4b02      	ldr	r3, [pc, #8]	; (b7d44 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7d3c:	681b      	ldr	r3, [r3, #0]
   b7d3e:	695b      	ldr	r3, [r3, #20]
   b7d40:	9301      	str	r3, [sp, #4]
   b7d42:	bd08      	pop	{r3, pc}
   b7d44:	00030218 	.word	0x00030218

000b7d48 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b7d48:	b508      	push	{r3, lr}
   b7d4a:	4b02      	ldr	r3, [pc, #8]	; (b7d54 <HAL_Validate_Pin_Function+0xc>)
   b7d4c:	681b      	ldr	r3, [r3, #0]
   b7d4e:	685b      	ldr	r3, [r3, #4]
   b7d50:	9301      	str	r3, [sp, #4]
   b7d52:	bd08      	pop	{r3, pc}
   b7d54:	0003022c 	.word	0x0003022c

000b7d58 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7d58:	b508      	push	{r3, lr}
   b7d5a:	4b02      	ldr	r3, [pc, #8]	; (b7d64 <HAL_Pin_Mode+0xc>)
   b7d5c:	681b      	ldr	r3, [r3, #0]
   b7d5e:	689b      	ldr	r3, [r3, #8]
   b7d60:	9301      	str	r3, [sp, #4]
   b7d62:	bd08      	pop	{r3, pc}
   b7d64:	0003022c 	.word	0x0003022c

000b7d68 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b7d68:	b508      	push	{r3, lr}
   b7d6a:	4b02      	ldr	r3, [pc, #8]	; (b7d74 <HAL_Get_Pin_Mode+0xc>)
   b7d6c:	681b      	ldr	r3, [r3, #0]
   b7d6e:	68db      	ldr	r3, [r3, #12]
   b7d70:	9301      	str	r3, [sp, #4]
   b7d72:	bd08      	pop	{r3, pc}
   b7d74:	0003022c 	.word	0x0003022c

000b7d78 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b7d78:	b508      	push	{r3, lr}
   b7d7a:	4b02      	ldr	r3, [pc, #8]	; (b7d84 <HAL_GPIO_Write+0xc>)
   b7d7c:	681b      	ldr	r3, [r3, #0]
   b7d7e:	691b      	ldr	r3, [r3, #16]
   b7d80:	9301      	str	r3, [sp, #4]
   b7d82:	bd08      	pop	{r3, pc}
   b7d84:	0003022c 	.word	0x0003022c

000b7d88 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b7d88:	b508      	push	{r3, lr}
   b7d8a:	4b02      	ldr	r3, [pc, #8]	; (b7d94 <hal_adc_read+0xc>)
   b7d8c:	681b      	ldr	r3, [r3, #0]
   b7d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7d90:	9301      	str	r3, [sp, #4]
   b7d92:	bd08      	pop	{r3, pc}
   b7d94:	0003022c 	.word	0x0003022c

000b7d98 <hal_pwm_write_with_frequency_ext>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
   b7d98:	b508      	push	{r3, lr}
   b7d9a:	4b02      	ldr	r3, [pc, #8]	; (b7da4 <hal_pwm_write_with_frequency_ext+0xc>)
   b7d9c:	681b      	ldr	r3, [r3, #0]
   b7d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7da0:	9301      	str	r3, [sp, #4]
   b7da2:	bd08      	pop	{r3, pc}
   b7da4:	0003022c 	.word	0x0003022c

000b7da8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7da8:	b508      	push	{r3, lr}
   b7daa:	4b02      	ldr	r3, [pc, #8]	; (b7db4 <hal_i2c_begin+0xc>)
   b7dac:	681b      	ldr	r3, [r3, #0]
   b7dae:	68db      	ldr	r3, [r3, #12]
   b7db0:	9301      	str	r3, [sp, #4]
   b7db2:	bd08      	pop	{r3, pc}
   b7db4:	00030228 	.word	0x00030228

000b7db8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7db8:	b508      	push	{r3, lr}
   b7dba:	4b02      	ldr	r3, [pc, #8]	; (b7dc4 <hal_i2c_begin_transmission+0xc>)
   b7dbc:	681b      	ldr	r3, [r3, #0]
   b7dbe:	699b      	ldr	r3, [r3, #24]
   b7dc0:	9301      	str	r3, [sp, #4]
   b7dc2:	bd08      	pop	{r3, pc}
   b7dc4:	00030228 	.word	0x00030228

000b7dc8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7dc8:	b508      	push	{r3, lr}
   b7dca:	4b02      	ldr	r3, [pc, #8]	; (b7dd4 <hal_i2c_end_transmission+0xc>)
   b7dcc:	681b      	ldr	r3, [r3, #0]
   b7dce:	69db      	ldr	r3, [r3, #28]
   b7dd0:	9301      	str	r3, [sp, #4]
   b7dd2:	bd08      	pop	{r3, pc}
   b7dd4:	00030228 	.word	0x00030228

000b7dd8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7dd8:	b508      	push	{r3, lr}
   b7dda:	4b02      	ldr	r3, [pc, #8]	; (b7de4 <hal_i2c_write+0xc>)
   b7ddc:	681b      	ldr	r3, [r3, #0]
   b7dde:	6a1b      	ldr	r3, [r3, #32]
   b7de0:	9301      	str	r3, [sp, #4]
   b7de2:	bd08      	pop	{r3, pc}
   b7de4:	00030228 	.word	0x00030228

000b7de8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7de8:	b508      	push	{r3, lr}
   b7dea:	4b02      	ldr	r3, [pc, #8]	; (b7df4 <hal_i2c_available+0xc>)
   b7dec:	681b      	ldr	r3, [r3, #0]
   b7dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7df0:	9301      	str	r3, [sp, #4]
   b7df2:	bd08      	pop	{r3, pc}
   b7df4:	00030228 	.word	0x00030228

000b7df8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7df8:	b508      	push	{r3, lr}
   b7dfa:	4b02      	ldr	r3, [pc, #8]	; (b7e04 <hal_i2c_read+0xc>)
   b7dfc:	681b      	ldr	r3, [r3, #0]
   b7dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7e00:	9301      	str	r3, [sp, #4]
   b7e02:	bd08      	pop	{r3, pc}
   b7e04:	00030228 	.word	0x00030228

000b7e08 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7e08:	b508      	push	{r3, lr}
   b7e0a:	4b02      	ldr	r3, [pc, #8]	; (b7e14 <hal_i2c_peek+0xc>)
   b7e0c:	681b      	ldr	r3, [r3, #0]
   b7e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7e10:	9301      	str	r3, [sp, #4]
   b7e12:	bd08      	pop	{r3, pc}
   b7e14:	00030228 	.word	0x00030228

000b7e18 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7e18:	b508      	push	{r3, lr}
   b7e1a:	4b02      	ldr	r3, [pc, #8]	; (b7e24 <hal_i2c_flush+0xc>)
   b7e1c:	681b      	ldr	r3, [r3, #0]
   b7e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7e20:	9301      	str	r3, [sp, #4]
   b7e22:	bd08      	pop	{r3, pc}
   b7e24:	00030228 	.word	0x00030228

000b7e28 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7e28:	b508      	push	{r3, lr}
   b7e2a:	4b02      	ldr	r3, [pc, #8]	; (b7e34 <hal_i2c_is_enabled+0xc>)
   b7e2c:	681b      	ldr	r3, [r3, #0]
   b7e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7e30:	9301      	str	r3, [sp, #4]
   b7e32:	bd08      	pop	{r3, pc}
   b7e34:	00030228 	.word	0x00030228

000b7e38 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7e38:	b508      	push	{r3, lr}
   b7e3a:	4b02      	ldr	r3, [pc, #8]	; (b7e44 <hal_i2c_init+0xc>)
   b7e3c:	681b      	ldr	r3, [r3, #0]
   b7e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7e40:	9301      	str	r3, [sp, #4]
   b7e42:	bd08      	pop	{r3, pc}
   b7e44:	00030228 	.word	0x00030228

000b7e48 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7e48:	b508      	push	{r3, lr}
   b7e4a:	4b02      	ldr	r3, [pc, #8]	; (b7e54 <hal_i2c_request_ex+0xc>)
   b7e4c:	681b      	ldr	r3, [r3, #0]
   b7e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7e50:	9301      	str	r3, [sp, #4]
   b7e52:	bd08      	pop	{r3, pc}
   b7e54:	00030228 	.word	0x00030228

000b7e58 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7e58:	b508      	push	{r3, lr}
   b7e5a:	4b02      	ldr	r3, [pc, #8]	; (b7e64 <inet_inet_ntop+0xc>)
   b7e5c:	681b      	ldr	r3, [r3, #0]
   b7e5e:	695b      	ldr	r3, [r3, #20]
   b7e60:	9301      	str	r3, [sp, #4]
   b7e62:	bd08      	pop	{r3, pc}
   b7e64:	00030264 	.word	0x00030264

000b7e68 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7e68:	b508      	push	{r3, lr}
   b7e6a:	4b02      	ldr	r3, [pc, #8]	; (b7e74 <netdb_freeaddrinfo+0xc>)
   b7e6c:	681b      	ldr	r3, [r3, #0]
   b7e6e:	689b      	ldr	r3, [r3, #8]
   b7e70:	9301      	str	r3, [sp, #4]
   b7e72:	bd08      	pop	{r3, pc}
   b7e74:	00030268 	.word	0x00030268

000b7e78 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7e78:	b508      	push	{r3, lr}
   b7e7a:	4b02      	ldr	r3, [pc, #8]	; (b7e84 <netdb_getaddrinfo+0xc>)
   b7e7c:	681b      	ldr	r3, [r3, #0]
   b7e7e:	68db      	ldr	r3, [r3, #12]
   b7e80:	9301      	str	r3, [sp, #4]
   b7e82:	bd08      	pop	{r3, pc}
   b7e84:	00030268 	.word	0x00030268

000b7e88 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7e88:	b508      	push	{r3, lr}
   b7e8a:	4b02      	ldr	r3, [pc, #8]	; (b7e94 <hal_spi_begin+0xc>)
   b7e8c:	681b      	ldr	r3, [r3, #0]
   b7e8e:	681b      	ldr	r3, [r3, #0]
   b7e90:	9301      	str	r3, [sp, #4]
   b7e92:	bd08      	pop	{r3, pc}
   b7e94:	00030230 	.word	0x00030230

000b7e98 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7e98:	b508      	push	{r3, lr}
   b7e9a:	4b02      	ldr	r3, [pc, #8]	; (b7ea4 <hal_spi_transfer+0xc>)
   b7e9c:	681b      	ldr	r3, [r3, #0]
   b7e9e:	695b      	ldr	r3, [r3, #20]
   b7ea0:	9301      	str	r3, [sp, #4]
   b7ea2:	bd08      	pop	{r3, pc}
   b7ea4:	00030230 	.word	0x00030230

000b7ea8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7ea8:	b508      	push	{r3, lr}
   b7eaa:	4b02      	ldr	r3, [pc, #8]	; (b7eb4 <hal_spi_init+0xc>)
   b7eac:	681b      	ldr	r3, [r3, #0]
   b7eae:	69db      	ldr	r3, [r3, #28]
   b7eb0:	9301      	str	r3, [sp, #4]
   b7eb2:	bd08      	pop	{r3, pc}
   b7eb4:	00030230 	.word	0x00030230

000b7eb8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7eb8:	b508      	push	{r3, lr}
   b7eba:	4b02      	ldr	r3, [pc, #8]	; (b7ec4 <hal_spi_is_enabled+0xc>)
   b7ebc:	681b      	ldr	r3, [r3, #0]
   b7ebe:	6a1b      	ldr	r3, [r3, #32]
   b7ec0:	9301      	str	r3, [sp, #4]
   b7ec2:	bd08      	pop	{r3, pc}
   b7ec4:	00030230 	.word	0x00030230

000b7ec8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7ec8:	b508      	push	{r3, lr}
   b7eca:	4b02      	ldr	r3, [pc, #8]	; (b7ed4 <hal_spi_info+0xc>)
   b7ecc:	681b      	ldr	r3, [r3, #0]
   b7ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7ed0:	9301      	str	r3, [sp, #4]
   b7ed2:	bd08      	pop	{r3, pc}
   b7ed4:	00030230 	.word	0x00030230

000b7ed8 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b7ed8:	b508      	push	{r3, lr}
   b7eda:	4b02      	ldr	r3, [pc, #8]	; (b7ee4 <hal_spi_transfer_dma+0xc>)
   b7edc:	681b      	ldr	r3, [r3, #0]
   b7ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7ee0:	9301      	str	r3, [sp, #4]
   b7ee2:	bd08      	pop	{r3, pc}
   b7ee4:	00030230 	.word	0x00030230

000b7ee8 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b7ee8:	b508      	push	{r3, lr}
   b7eea:	4b02      	ldr	r3, [pc, #8]	; (b7ef4 <hal_spi_transfer_dma_status+0xc>)
   b7eec:	681b      	ldr	r3, [r3, #0]
   b7eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7ef0:	9301      	str	r3, [sp, #4]
   b7ef2:	bd08      	pop	{r3, pc}
   b7ef4:	00030230 	.word	0x00030230

000b7ef8 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7ef8:	b508      	push	{r3, lr}
   b7efa:	4b02      	ldr	r3, [pc, #8]	; (b7f04 <hal_spi_set_settings+0xc>)
   b7efc:	681b      	ldr	r3, [r3, #0]
   b7efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7f00:	9301      	str	r3, [sp, #4]
   b7f02:	bd08      	pop	{r3, pc}
   b7f04:	00030230 	.word	0x00030230

000b7f08 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7f08:	b508      	push	{r3, lr}
   b7f0a:	4b02      	ldr	r3, [pc, #8]	; (b7f14 <hal_spi_acquire+0xc>)
   b7f0c:	681b      	ldr	r3, [r3, #0]
   b7f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7f10:	9301      	str	r3, [sp, #4]
   b7f12:	bd08      	pop	{r3, pc}
   b7f14:	00030230 	.word	0x00030230

000b7f18 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7f18:	b508      	push	{r3, lr}
   b7f1a:	4b02      	ldr	r3, [pc, #8]	; (b7f24 <hal_spi_release+0xc>)
   b7f1c:	681b      	ldr	r3, [r3, #0]
   b7f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7f20:	9301      	str	r3, [sp, #4]
   b7f22:	bd08      	pop	{r3, pc}
   b7f24:	00030230 	.word	0x00030230

000b7f28 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b7f28:	b508      	push	{r3, lr}
   b7f2a:	4b02      	ldr	r3, [pc, #8]	; (b7f34 <hal_usart_end+0xc>)
   b7f2c:	681b      	ldr	r3, [r3, #0]
   b7f2e:	689b      	ldr	r3, [r3, #8]
   b7f30:	9301      	str	r3, [sp, #4]
   b7f32:	bd08      	pop	{r3, pc}
   b7f34:	0003023c 	.word	0x0003023c

000b7f38 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7f38:	b508      	push	{r3, lr}
   b7f3a:	4b02      	ldr	r3, [pc, #8]	; (b7f44 <hal_usart_write+0xc>)
   b7f3c:	681b      	ldr	r3, [r3, #0]
   b7f3e:	68db      	ldr	r3, [r3, #12]
   b7f40:	9301      	str	r3, [sp, #4]
   b7f42:	bd08      	pop	{r3, pc}
   b7f44:	0003023c 	.word	0x0003023c

000b7f48 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7f48:	b508      	push	{r3, lr}
   b7f4a:	4b02      	ldr	r3, [pc, #8]	; (b7f54 <hal_usart_available+0xc>)
   b7f4c:	681b      	ldr	r3, [r3, #0]
   b7f4e:	691b      	ldr	r3, [r3, #16]
   b7f50:	9301      	str	r3, [sp, #4]
   b7f52:	bd08      	pop	{r3, pc}
   b7f54:	0003023c 	.word	0x0003023c

000b7f58 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7f58:	b508      	push	{r3, lr}
   b7f5a:	4b02      	ldr	r3, [pc, #8]	; (b7f64 <hal_usart_read+0xc>)
   b7f5c:	681b      	ldr	r3, [r3, #0]
   b7f5e:	695b      	ldr	r3, [r3, #20]
   b7f60:	9301      	str	r3, [sp, #4]
   b7f62:	bd08      	pop	{r3, pc}
   b7f64:	0003023c 	.word	0x0003023c

000b7f68 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7f68:	b508      	push	{r3, lr}
   b7f6a:	4b02      	ldr	r3, [pc, #8]	; (b7f74 <hal_usart_peek+0xc>)
   b7f6c:	681b      	ldr	r3, [r3, #0]
   b7f6e:	699b      	ldr	r3, [r3, #24]
   b7f70:	9301      	str	r3, [sp, #4]
   b7f72:	bd08      	pop	{r3, pc}
   b7f74:	0003023c 	.word	0x0003023c

000b7f78 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7f78:	b508      	push	{r3, lr}
   b7f7a:	4b02      	ldr	r3, [pc, #8]	; (b7f84 <hal_usart_flush+0xc>)
   b7f7c:	681b      	ldr	r3, [r3, #0]
   b7f7e:	69db      	ldr	r3, [r3, #28]
   b7f80:	9301      	str	r3, [sp, #4]
   b7f82:	bd08      	pop	{r3, pc}
   b7f84:	0003023c 	.word	0x0003023c

000b7f88 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7f88:	b508      	push	{r3, lr}
   b7f8a:	4b02      	ldr	r3, [pc, #8]	; (b7f94 <hal_usart_is_enabled+0xc>)
   b7f8c:	681b      	ldr	r3, [r3, #0]
   b7f8e:	6a1b      	ldr	r3, [r3, #32]
   b7f90:	9301      	str	r3, [sp, #4]
   b7f92:	bd08      	pop	{r3, pc}
   b7f94:	0003023c 	.word	0x0003023c

000b7f98 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7f98:	b508      	push	{r3, lr}
   b7f9a:	4b02      	ldr	r3, [pc, #8]	; (b7fa4 <hal_usart_available_data_for_write+0xc>)
   b7f9c:	681b      	ldr	r3, [r3, #0]
   b7f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7fa0:	9301      	str	r3, [sp, #4]
   b7fa2:	bd08      	pop	{r3, pc}
   b7fa4:	0003023c 	.word	0x0003023c

000b7fa8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b7fa8:	b508      	push	{r3, lr}
   b7faa:	4b02      	ldr	r3, [pc, #8]	; (b7fb4 <hal_usart_begin_config+0xc>)
   b7fac:	681b      	ldr	r3, [r3, #0]
   b7fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7fb0:	9301      	str	r3, [sp, #4]
   b7fb2:	bd08      	pop	{r3, pc}
   b7fb4:	0003023c 	.word	0x0003023c

000b7fb8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7fb8:	b508      	push	{r3, lr}
   b7fba:	4b02      	ldr	r3, [pc, #8]	; (b7fc4 <hal_usart_init_ex+0xc>)
   b7fbc:	681b      	ldr	r3, [r3, #0]
   b7fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7fc0:	9301      	str	r3, [sp, #4]
   b7fc2:	bd08      	pop	{r3, pc}
   b7fc4:	0003023c 	.word	0x0003023c

000b7fc8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7fc8:	b508      	push	{r3, lr}
   b7fca:	4b02      	ldr	r3, [pc, #8]	; (b7fd4 <HAL_USB_USART_Init+0xc>)
   b7fcc:	681b      	ldr	r3, [r3, #0]
   b7fce:	681b      	ldr	r3, [r3, #0]
   b7fd0:	9301      	str	r3, [sp, #4]
   b7fd2:	bd08      	pop	{r3, pc}
   b7fd4:	0003024c 	.word	0x0003024c

000b7fd8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7fd8:	b508      	push	{r3, lr}
   b7fda:	4b02      	ldr	r3, [pc, #8]	; (b7fe4 <HAL_USB_USART_Begin+0xc>)
   b7fdc:	681b      	ldr	r3, [r3, #0]
   b7fde:	685b      	ldr	r3, [r3, #4]
   b7fe0:	9301      	str	r3, [sp, #4]
   b7fe2:	bd08      	pop	{r3, pc}
   b7fe4:	0003024c 	.word	0x0003024c

000b7fe8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b7fe8:	b508      	push	{r3, lr}
   b7fea:	4b02      	ldr	r3, [pc, #8]	; (b7ff4 <HAL_USB_USART_End+0xc>)
   b7fec:	681b      	ldr	r3, [r3, #0]
   b7fee:	689b      	ldr	r3, [r3, #8]
   b7ff0:	9301      	str	r3, [sp, #4]
   b7ff2:	bd08      	pop	{r3, pc}
   b7ff4:	0003024c 	.word	0x0003024c

000b7ff8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7ff8:	b508      	push	{r3, lr}
   b7ffa:	4b02      	ldr	r3, [pc, #8]	; (b8004 <HAL_USB_USART_Available_Data+0xc>)
   b7ffc:	681b      	ldr	r3, [r3, #0]
   b7ffe:	691b      	ldr	r3, [r3, #16]
   b8000:	9301      	str	r3, [sp, #4]
   b8002:	bd08      	pop	{r3, pc}
   b8004:	0003024c 	.word	0x0003024c

000b8008 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8008:	b508      	push	{r3, lr}
   b800a:	4b02      	ldr	r3, [pc, #8]	; (b8014 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b800c:	681b      	ldr	r3, [r3, #0]
   b800e:	695b      	ldr	r3, [r3, #20]
   b8010:	9301      	str	r3, [sp, #4]
   b8012:	bd08      	pop	{r3, pc}
   b8014:	0003024c 	.word	0x0003024c

000b8018 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8018:	b508      	push	{r3, lr}
   b801a:	4b02      	ldr	r3, [pc, #8]	; (b8024 <HAL_USB_USART_Receive_Data+0xc>)
   b801c:	681b      	ldr	r3, [r3, #0]
   b801e:	699b      	ldr	r3, [r3, #24]
   b8020:	9301      	str	r3, [sp, #4]
   b8022:	bd08      	pop	{r3, pc}
   b8024:	0003024c 	.word	0x0003024c

000b8028 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8028:	b508      	push	{r3, lr}
   b802a:	4b02      	ldr	r3, [pc, #8]	; (b8034 <HAL_USB_USART_Send_Data+0xc>)
   b802c:	681b      	ldr	r3, [r3, #0]
   b802e:	69db      	ldr	r3, [r3, #28]
   b8030:	9301      	str	r3, [sp, #4]
   b8032:	bd08      	pop	{r3, pc}
   b8034:	0003024c 	.word	0x0003024c

000b8038 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8038:	b508      	push	{r3, lr}
   b803a:	4b02      	ldr	r3, [pc, #8]	; (b8044 <HAL_USB_USART_Flush_Data+0xc>)
   b803c:	681b      	ldr	r3, [r3, #0]
   b803e:	6a1b      	ldr	r3, [r3, #32]
   b8040:	9301      	str	r3, [sp, #4]
   b8042:	bd08      	pop	{r3, pc}
   b8044:	0003024c 	.word	0x0003024c

000b8048 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   b8048:	b508      	push	{r3, lr}
   b804a:	4b02      	ldr	r3, [pc, #8]	; (b8054 <HAL_USB_USART_Is_Enabled+0xc>)
   b804c:	681b      	ldr	r3, [r3, #0]
   b804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8050:	9301      	str	r3, [sp, #4]
   b8052:	bd08      	pop	{r3, pc}
   b8054:	0003024c 	.word	0x0003024c

000b8058 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8058:	b508      	push	{r3, lr}
   b805a:	4b02      	ldr	r3, [pc, #8]	; (b8064 <panic_+0xc>)
   b805c:	681b      	ldr	r3, [r3, #0]
   b805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8060:	9301      	str	r3, [sp, #4]
   b8062:	bd08      	pop	{r3, pc}
   b8064:	00030260 	.word	0x00030260

000b8068 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b8068:	b508      	push	{r3, lr}
   b806a:	4b02      	ldr	r3, [pc, #8]	; (b8074 <log_message_v+0xc>)
   b806c:	681b      	ldr	r3, [r3, #0]
   b806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8070:	9301      	str	r3, [sp, #4]
   b8072:	bd08      	pop	{r3, pc}
   b8074:	00030260 	.word	0x00030260

000b8078 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b8078:	b508      	push	{r3, lr}
   b807a:	4b02      	ldr	r3, [pc, #8]	; (b8084 <log_level_name+0xc>)
   b807c:	681b      	ldr	r3, [r3, #0]
   b807e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8080:	9301      	str	r3, [sp, #4]
   b8082:	bd08      	pop	{r3, pc}
   b8084:	00030260 	.word	0x00030260

000b8088 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b8088:	b508      	push	{r3, lr}
   b808a:	4b02      	ldr	r3, [pc, #8]	; (b8094 <log_set_callbacks+0xc>)
   b808c:	681b      	ldr	r3, [r3, #0]
   b808e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b8090:	9301      	str	r3, [sp, #4]
   b8092:	bd08      	pop	{r3, pc}
   b8094:	00030260 	.word	0x00030260

000b8098 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8098:	b508      	push	{r3, lr}
   b809a:	4b02      	ldr	r3, [pc, #8]	; (b80a4 <set_system_mode+0xc>)
   b809c:	681b      	ldr	r3, [r3, #0]
   b809e:	685b      	ldr	r3, [r3, #4]
   b80a0:	9301      	str	r3, [sp, #4]
   b80a2:	bd08      	pop	{r3, pc}
   b80a4:	00030220 	.word	0x00030220

000b80a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b80a8:	b508      	push	{r3, lr}
   b80aa:	4b02      	ldr	r3, [pc, #8]	; (b80b4 <system_delay_ms+0xc>)
   b80ac:	681b      	ldr	r3, [r3, #0]
   b80ae:	695b      	ldr	r3, [r3, #20]
   b80b0:	9301      	str	r3, [sp, #4]
   b80b2:	bd08      	pop	{r3, pc}
   b80b4:	00030220 	.word	0x00030220

000b80b8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b80b8:	b508      	push	{r3, lr}
   b80ba:	4b02      	ldr	r3, [pc, #8]	; (b80c4 <system_thread_set_state+0xc>)
   b80bc:	681b      	ldr	r3, [r3, #0]
   b80be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b80c0:	9301      	str	r3, [sp, #4]
   b80c2:	bd08      	pop	{r3, pc}
   b80c4:	00030220 	.word	0x00030220

000b80c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b80c8:	b508      	push	{r3, lr}
   b80ca:	4b03      	ldr	r3, [pc, #12]	; (b80d8 <system_ctrl_set_app_request_handler+0x10>)
   b80cc:	681b      	ldr	r3, [r3, #0]
   b80ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b80d2:	9301      	str	r3, [sp, #4]
   b80d4:	bd08      	pop	{r3, pc}
   b80d6:	0000      	.short	0x0000
   b80d8:	00030220 	.word	0x00030220

000b80dc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b80dc:	b508      	push	{r3, lr}
   b80de:	4b03      	ldr	r3, [pc, #12]	; (b80ec <system_ctrl_set_result+0x10>)
   b80e0:	681b      	ldr	r3, [r3, #0]
   b80e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b80e6:	9301      	str	r3, [sp, #4]
   b80e8:	bd08      	pop	{r3, pc}
   b80ea:	0000      	.short	0x0000
   b80ec:	00030220 	.word	0x00030220

000b80f0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b80f0:	b508      	push	{r3, lr}
   b80f2:	4b02      	ldr	r3, [pc, #8]	; (b80fc <spark_process+0xc>)
   b80f4:	681b      	ldr	r3, [r3, #0]
   b80f6:	689b      	ldr	r3, [r3, #8]
   b80f8:	9301      	str	r3, [sp, #4]
   b80fa:	bd08      	pop	{r3, pc}
   b80fc:	00030244 	.word	0x00030244

000b8100 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b8100:	b508      	push	{r3, lr}
   b8102:	4b02      	ldr	r3, [pc, #8]	; (b810c <spark_deviceID+0xc>)
   b8104:	681b      	ldr	r3, [r3, #0]
   b8106:	69db      	ldr	r3, [r3, #28]
   b8108:	9301      	str	r3, [sp, #4]
   b810a:	bd08      	pop	{r3, pc}
   b810c:	00030244 	.word	0x00030244

000b8110 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8110:	b508      	push	{r3, lr}
   b8112:	4b02      	ldr	r3, [pc, #8]	; (b811c <spark_set_random_seed_from_cloud_handler+0xc>)
   b8114:	681b      	ldr	r3, [r3, #0]
   b8116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8118:	9301      	str	r3, [sp, #4]
   b811a:	bd08      	pop	{r3, pc}
   b811c:	00030244 	.word	0x00030244

000b8120 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8120:	b508      	push	{r3, lr}
   b8122:	4b02      	ldr	r3, [pc, #8]	; (b812c <network_connect+0xc>)
   b8124:	681b      	ldr	r3, [r3, #0]
   b8126:	685b      	ldr	r3, [r3, #4]
   b8128:	9301      	str	r3, [sp, #4]
   b812a:	bd08      	pop	{r3, pc}
   b812c:	00030240 	.word	0x00030240

000b8130 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8130:	b508      	push	{r3, lr}
   b8132:	4b02      	ldr	r3, [pc, #8]	; (b813c <network_connecting+0xc>)
   b8134:	681b      	ldr	r3, [r3, #0]
   b8136:	689b      	ldr	r3, [r3, #8]
   b8138:	9301      	str	r3, [sp, #4]
   b813a:	bd08      	pop	{r3, pc}
   b813c:	00030240 	.word	0x00030240

000b8140 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8140:	b508      	push	{r3, lr}
   b8142:	4b02      	ldr	r3, [pc, #8]	; (b814c <network_disconnect+0xc>)
   b8144:	681b      	ldr	r3, [r3, #0]
   b8146:	68db      	ldr	r3, [r3, #12]
   b8148:	9301      	str	r3, [sp, #4]
   b814a:	bd08      	pop	{r3, pc}
   b814c:	00030240 	.word	0x00030240

000b8150 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8150:	b508      	push	{r3, lr}
   b8152:	4b02      	ldr	r3, [pc, #8]	; (b815c <network_ready+0xc>)
   b8154:	681b      	ldr	r3, [r3, #0]
   b8156:	691b      	ldr	r3, [r3, #16]
   b8158:	9301      	str	r3, [sp, #4]
   b815a:	bd08      	pop	{r3, pc}
   b815c:	00030240 	.word	0x00030240

000b8160 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8160:	b508      	push	{r3, lr}
   b8162:	4b02      	ldr	r3, [pc, #8]	; (b816c <network_on+0xc>)
   b8164:	681b      	ldr	r3, [r3, #0]
   b8166:	695b      	ldr	r3, [r3, #20]
   b8168:	9301      	str	r3, [sp, #4]
   b816a:	bd08      	pop	{r3, pc}
   b816c:	00030240 	.word	0x00030240

000b8170 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8170:	b508      	push	{r3, lr}
   b8172:	4b02      	ldr	r3, [pc, #8]	; (b817c <network_off+0xc>)
   b8174:	681b      	ldr	r3, [r3, #0]
   b8176:	699b      	ldr	r3, [r3, #24]
   b8178:	9301      	str	r3, [sp, #4]
   b817a:	bd08      	pop	{r3, pc}
   b817c:	00030240 	.word	0x00030240

000b8180 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8180:	b508      	push	{r3, lr}
   b8182:	4b02      	ldr	r3, [pc, #8]	; (b818c <network_listen+0xc>)
   b8184:	681b      	ldr	r3, [r3, #0]
   b8186:	69db      	ldr	r3, [r3, #28]
   b8188:	9301      	str	r3, [sp, #4]
   b818a:	bd08      	pop	{r3, pc}
   b818c:	00030240 	.word	0x00030240

000b8190 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8190:	b508      	push	{r3, lr}
   b8192:	4b02      	ldr	r3, [pc, #8]	; (b819c <network_listening+0xc>)
   b8194:	681b      	ldr	r3, [r3, #0]
   b8196:	6a1b      	ldr	r3, [r3, #32]
   b8198:	9301      	str	r3, [sp, #4]
   b819a:	bd08      	pop	{r3, pc}
   b819c:	00030240 	.word	0x00030240

000b81a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b81a0:	b508      	push	{r3, lr}
   b81a2:	4b02      	ldr	r3, [pc, #8]	; (b81ac <network_set_listen_timeout+0xc>)
   b81a4:	681b      	ldr	r3, [r3, #0]
   b81a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b81a8:	9301      	str	r3, [sp, #4]
   b81aa:	bd08      	pop	{r3, pc}
   b81ac:	00030240 	.word	0x00030240

000b81b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b81b0:	b508      	push	{r3, lr}
   b81b2:	4b02      	ldr	r3, [pc, #8]	; (b81bc <network_get_listen_timeout+0xc>)
   b81b4:	681b      	ldr	r3, [r3, #0]
   b81b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b81b8:	9301      	str	r3, [sp, #4]
   b81ba:	bd08      	pop	{r3, pc}
   b81bc:	00030240 	.word	0x00030240

000b81c0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b81c0:	b508      	push	{r3, lr}
   b81c2:	4b02      	ldr	r3, [pc, #8]	; (b81cc <network_is_on+0xc>)
   b81c4:	681b      	ldr	r3, [r3, #0]
   b81c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b81c8:	9301      	str	r3, [sp, #4]
   b81ca:	bd08      	pop	{r3, pc}
   b81cc:	00030240 	.word	0x00030240

000b81d0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b81d0:	b508      	push	{r3, lr}
   b81d2:	4b02      	ldr	r3, [pc, #8]	; (b81dc <network_is_off+0xc>)
   b81d4:	681b      	ldr	r3, [r3, #0]
   b81d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b81d8:	9301      	str	r3, [sp, #4]
   b81da:	bd08      	pop	{r3, pc}
   b81dc:	00030240 	.word	0x00030240

000b81e0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b81e0:	b508      	push	{r3, lr}
   b81e2:	4b02      	ldr	r3, [pc, #8]	; (b81ec <malloc+0xc>)
   b81e4:	681b      	ldr	r3, [r3, #0]
   b81e6:	681b      	ldr	r3, [r3, #0]
   b81e8:	9301      	str	r3, [sp, #4]
   b81ea:	bd08      	pop	{r3, pc}
   b81ec:	0003021c 	.word	0x0003021c

000b81f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b81f0:	b508      	push	{r3, lr}
   b81f2:	4b02      	ldr	r3, [pc, #8]	; (b81fc <free+0xc>)
   b81f4:	681b      	ldr	r3, [r3, #0]
   b81f6:	685b      	ldr	r3, [r3, #4]
   b81f8:	9301      	str	r3, [sp, #4]
   b81fa:	bd08      	pop	{r3, pc}
   b81fc:	0003021c 	.word	0x0003021c

000b8200 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8200:	b508      	push	{r3, lr}
   b8202:	4b02      	ldr	r3, [pc, #8]	; (b820c <realloc+0xc>)
   b8204:	681b      	ldr	r3, [r3, #0]
   b8206:	689b      	ldr	r3, [r3, #8]
   b8208:	9301      	str	r3, [sp, #4]
   b820a:	bd08      	pop	{r3, pc}
   b820c:	0003021c 	.word	0x0003021c

000b8210 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b8210:	b508      	push	{r3, lr}
   b8212:	4b02      	ldr	r3, [pc, #8]	; (b821c <sprintf+0xc>)
   b8214:	681b      	ldr	r3, [r3, #0]
   b8216:	68db      	ldr	r3, [r3, #12]
   b8218:	9301      	str	r3, [sp, #4]
   b821a:	bd08      	pop	{r3, pc}
   b821c:	0003021c 	.word	0x0003021c

000b8220 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8220:	b508      	push	{r3, lr}
   b8222:	4b02      	ldr	r3, [pc, #8]	; (b822c <vsnprintf+0xc>)
   b8224:	681b      	ldr	r3, [r3, #0]
   b8226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8228:	9301      	str	r3, [sp, #4]
   b822a:	bd08      	pop	{r3, pc}
   b822c:	0003021c 	.word	0x0003021c

000b8230 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8230:	b508      	push	{r3, lr}
   b8232:	4b02      	ldr	r3, [pc, #8]	; (b823c <__errno+0xc>)
   b8234:	681b      	ldr	r3, [r3, #0]
   b8236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8238:	9301      	str	r3, [sp, #4]
   b823a:	bd08      	pop	{r3, pc}
   b823c:	0003021c 	.word	0x0003021c

000b8240 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8240:	b508      	push	{r3, lr}
   b8242:	4b02      	ldr	r3, [pc, #8]	; (b824c <__assert_func+0xc>)
   b8244:	681b      	ldr	r3, [r3, #0]
   b8246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8248:	9301      	str	r3, [sp, #4]
   b824a:	bd08      	pop	{r3, pc}
   b824c:	0003021c 	.word	0x0003021c

000b8250 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8250:	b508      	push	{r3, lr}
   b8252:	4b02      	ldr	r3, [pc, #8]	; (b825c <newlib_impure_ptr_callback+0xc>)
   b8254:	681b      	ldr	r3, [r3, #0]
   b8256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8258:	9301      	str	r3, [sp, #4]
   b825a:	bd08      	pop	{r3, pc}
   b825c:	0003021c 	.word	0x0003021c

000b8260 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8260:	2100      	movs	r1, #0
   b8262:	f7ff bf21 	b.w	b80a8 <system_delay_ms>

000b8266 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b8266:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8268:	6843      	ldr	r3, [r0, #4]
   b826a:	3b01      	subs	r3, #1
    {
   b826c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b826e:	6043      	str	r3, [r0, #4]
   b8270:	b963      	cbnz	r3, b828c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b8272:	6803      	ldr	r3, [r0, #0]
   b8274:	689b      	ldr	r3, [r3, #8]
   b8276:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8278:	68a3      	ldr	r3, [r4, #8]
   b827a:	3b01      	subs	r3, #1
   b827c:	60a3      	str	r3, [r4, #8]
   b827e:	b92b      	cbnz	r3, b828c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8280:	6823      	ldr	r3, [r4, #0]
   b8282:	4620      	mov	r0, r4
   b8284:	68db      	ldr	r3, [r3, #12]
        }
    }
   b8286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b828a:	4718      	bx	r3
    }
   b828c:	bd10      	pop	{r4, pc}

000b828e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b828e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8290:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8294:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8296:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b829a:	42ae      	cmp	r6, r5
   b829c:	d004      	beq.n	b82a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b829e:	4628      	mov	r0, r5
   b82a0:	f001 fdfa 	bl	b9e98 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b82a4:	3510      	adds	r5, #16
   b82a6:	e7f8      	b.n	b829a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b82a8:	6820      	ldr	r0, [r4, #0]
   b82aa:	f7ff ffa1 	bl	b81f0 <free>
    AllocatorT::free(data_);
}
   b82ae:	4620      	mov	r0, r4
   b82b0:	bd70      	pop	{r4, r5, r6, pc}

000b82b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b82b2:	b510      	push	{r4, lr}
   b82b4:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b82b6:	6800      	ldr	r0, [r0, #0]
   b82b8:	b108      	cbz	r0, b82be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b82ba:	f7ff ffd4 	bl	b8266 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b82be:	4620      	mov	r0, r4
   b82c0:	bd10      	pop	{r4, pc}
	...

000b82c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b82c4:	4802      	ldr	r0, [pc, #8]	; (b82d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b82c6:	2300      	movs	r3, #0
   b82c8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b82ca:	f7ff bcfd 	b.w	b7cc8 <os_mutex_recursive_create>
   b82ce:	bf00      	nop
   b82d0:	2003e694 	.word	0x2003e694

000b82d4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b82d4:	2200      	movs	r2, #0
   b82d6:	6840      	ldr	r0, [r0, #4]
   b82d8:	4611      	mov	r1, r2
   b82da:	f7ff bf59 	b.w	b8190 <network_listening>

000b82de <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b82de:	2200      	movs	r2, #0
   b82e0:	6840      	ldr	r0, [r0, #4]
   b82e2:	4611      	mov	r1, r2
   b82e4:	f7ff bf64 	b.w	b81b0 <network_get_listen_timeout>

000b82e8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b82e8:	6840      	ldr	r0, [r0, #4]
   b82ea:	2200      	movs	r2, #0
   b82ec:	f7ff bf58 	b.w	b81a0 <network_set_listen_timeout>

000b82f0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b82f0:	6840      	ldr	r0, [r0, #4]
   b82f2:	2200      	movs	r2, #0
   b82f4:	f081 0101 	eor.w	r1, r1, #1
   b82f8:	f7ff bf42 	b.w	b8180 <network_listen>

000b82fc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b82fc:	2300      	movs	r3, #0
   b82fe:	6840      	ldr	r0, [r0, #4]
   b8300:	461a      	mov	r2, r3
   b8302:	4619      	mov	r1, r3
   b8304:	f7ff bf34 	b.w	b8170 <network_off>

000b8308 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8308:	2300      	movs	r3, #0
   b830a:	6840      	ldr	r0, [r0, #4]
   b830c:	461a      	mov	r2, r3
   b830e:	4619      	mov	r1, r3
   b8310:	f7ff bf26 	b.w	b8160 <network_on>

000b8314 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8314:	2200      	movs	r2, #0
   b8316:	6840      	ldr	r0, [r0, #4]
   b8318:	4611      	mov	r1, r2
   b831a:	f7ff bf19 	b.w	b8150 <network_ready>

000b831e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b831e:	2200      	movs	r2, #0
   b8320:	6840      	ldr	r0, [r0, #4]
   b8322:	4611      	mov	r1, r2
   b8324:	f7ff bf04 	b.w	b8130 <network_connecting>

000b8328 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8328:	6840      	ldr	r0, [r0, #4]
   b832a:	2200      	movs	r2, #0
   b832c:	2102      	movs	r1, #2
   b832e:	f7ff bf07 	b.w	b8140 <network_disconnect>

000b8332 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8332:	2300      	movs	r3, #0
   b8334:	6840      	ldr	r0, [r0, #4]
   b8336:	461a      	mov	r2, r3
   b8338:	f7ff bef2 	b.w	b8120 <network_connect>

000b833c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b833c:	4b02      	ldr	r3, [pc, #8]	; (b8348 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b833e:	2203      	movs	r2, #3
   b8340:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8342:	4a02      	ldr	r2, [pc, #8]	; (b834c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8344:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8346:	4770      	bx	lr
   b8348:	2003e698 	.word	0x2003e698
   b834c:	000bc47c 	.word	0x000bc47c

000b8350 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8350:	4770      	bx	lr

000b8352 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8354:	4606      	mov	r6, r0
   b8356:	4615      	mov	r5, r2
   b8358:	460c      	mov	r4, r1
   b835a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b835c:	42bc      	cmp	r4, r7
   b835e:	d006      	beq.n	b836e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8360:	6833      	ldr	r3, [r6, #0]
   b8362:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8366:	689b      	ldr	r3, [r3, #8]
   b8368:	4630      	mov	r0, r6
   b836a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b836c:	e7f6      	b.n	b835c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b836e:	4628      	mov	r0, r5
   b8370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8372 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8372:	7c00      	ldrb	r0, [r0, #16]
   b8374:	2200      	movs	r2, #0
   b8376:	f7ff bd2f 	b.w	b7dd8 <hal_i2c_write>

000b837a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b837a:	7c00      	ldrb	r0, [r0, #16]
   b837c:	2100      	movs	r1, #0
   b837e:	f7ff bd33 	b.w	b7de8 <hal_i2c_available>

000b8382 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8382:	7c00      	ldrb	r0, [r0, #16]
   b8384:	2100      	movs	r1, #0
   b8386:	f7ff bd37 	b.w	b7df8 <hal_i2c_read>

000b838a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b838a:	7c00      	ldrb	r0, [r0, #16]
   b838c:	2100      	movs	r1, #0
   b838e:	f7ff bd3b 	b.w	b7e08 <hal_i2c_peek>

000b8392 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8392:	7c00      	ldrb	r0, [r0, #16]
   b8394:	2100      	movs	r1, #0
   b8396:	f7ff bd3f 	b.w	b7e18 <hal_i2c_flush>

000b839a <_ZN7TwoWireD0Ev>:
   b839a:	b510      	push	{r4, lr}
   b839c:	2114      	movs	r1, #20
   b839e:	4604      	mov	r4, r0
   b83a0:	f7fb fe7d 	bl	b409e <_ZdlPvj>
   b83a4:	4620      	mov	r0, r4
   b83a6:	bd10      	pop	{r4, pc}

000b83a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b83a8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b83aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b83ae:	4604      	mov	r4, r0
   b83b0:	4608      	mov	r0, r1
   b83b2:	2100      	movs	r1, #0
   b83b4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b83b8:	4b03      	ldr	r3, [pc, #12]	; (b83c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b83ba:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b83bc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b83be:	4611      	mov	r1, r2
   b83c0:	f7ff fd3a 	bl	b7e38 <hal_i2c_init>
}
   b83c4:	4620      	mov	r0, r4
   b83c6:	bd10      	pop	{r4, pc}
   b83c8:	000bc4b8 	.word	0x000bc4b8

000b83cc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b83cc:	2300      	movs	r3, #0
   b83ce:	7c00      	ldrb	r0, [r0, #16]
   b83d0:	461a      	mov	r2, r3
   b83d2:	4619      	mov	r1, r3
   b83d4:	f7ff bce8 	b.w	b7da8 <hal_i2c_begin>

000b83d8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b83d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b83da:	2200      	movs	r2, #0
   b83dc:	2314      	movs	r3, #20
   b83de:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b83e2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b83e6:	780b      	ldrb	r3, [r1, #0]
   b83e8:	f88d 3008 	strb.w	r3, [sp, #8]
   b83ec:	684b      	ldr	r3, [r1, #4]
   b83ee:	9303      	str	r3, [sp, #12]
   b83f0:	68cb      	ldr	r3, [r1, #12]
   b83f2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b83f4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b83f6:	7a0b      	ldrb	r3, [r1, #8]
   b83f8:	9305      	str	r3, [sp, #20]
   b83fa:	a901      	add	r1, sp, #4
   b83fc:	f7ff fd24 	bl	b7e48 <hal_i2c_request_ex>
}
   b8400:	b007      	add	sp, #28
   b8402:	f85d fb04 	ldr.w	pc, [sp], #4

000b8406 <_ZN7TwoWire11requestFromEhjh>:
{
   b8406:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8408:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b840a:	f88d 1000 	strb.w	r1, [sp]
   b840e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8412:	9103      	str	r1, [sp, #12]
   b8414:	bf18      	it	ne
   b8416:	2301      	movne	r3, #1
   b8418:	4669      	mov	r1, sp
    size_ = size;
   b841a:	9201      	str	r2, [sp, #4]
   b841c:	f88d 3008 	strb.w	r3, [sp, #8]
   b8420:	f7ff ffda 	bl	b83d8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8424:	b005      	add	sp, #20
   b8426:	f85d fb04 	ldr.w	pc, [sp], #4

000b842a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b842a:	2301      	movs	r3, #1
   b842c:	f7ff bfeb 	b.w	b8406 <_ZN7TwoWire11requestFromEhjh>

000b8430 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8430:	7c00      	ldrb	r0, [r0, #16]
   b8432:	2200      	movs	r2, #0
   b8434:	f7ff bcc0 	b.w	b7db8 <hal_i2c_begin_transmission>

000b8438 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8438:	b2c9      	uxtb	r1, r1
   b843a:	f7ff bff9 	b.w	b8430 <_ZN7TwoWire17beginTransmissionEh>

000b843e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b843e:	7c00      	ldrb	r0, [r0, #16]
   b8440:	2200      	movs	r2, #0
   b8442:	f7ff bcc1 	b.w	b7dc8 <hal_i2c_end_transmission>

000b8446 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8446:	2101      	movs	r1, #1
   b8448:	f7ff bff9 	b.w	b843e <_ZN7TwoWire15endTransmissionEh>

000b844c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b844c:	4770      	bx	lr

000b844e <_ZN9IPAddressD0Ev>:
   b844e:	b510      	push	{r4, lr}
   b8450:	2118      	movs	r1, #24
   b8452:	4604      	mov	r4, r0
   b8454:	f7fb fe23 	bl	b409e <_ZdlPvj>
   b8458:	4620      	mov	r0, r4
   b845a:	bd10      	pop	{r4, pc}

000b845c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b845c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b845e:	7d03      	ldrb	r3, [r0, #20]
   b8460:	2b06      	cmp	r3, #6
{
   b8462:	b08d      	sub	sp, #52	; 0x34
   b8464:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8466:	f100 0704 	add.w	r7, r0, #4
   b846a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b846e:	d012      	beq.n	b8496 <_ZNK9IPAddress7printToER5Print+0x3a>
   b8470:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8474:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8478:	220a      	movs	r2, #10
   b847a:	4630      	mov	r0, r6
   b847c:	f001 fa91 	bl	b99a2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8480:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8482:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8484:	d019      	beq.n	b84ba <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8486:	2c00      	cmp	r4, #0
   b8488:	d0f4      	beq.n	b8474 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b848a:	212e      	movs	r1, #46	; 0x2e
   b848c:	4630      	mov	r0, r6
   b848e:	f001 fa6d 	bl	b996c <_ZN5Print5printEc>
   b8492:	4404      	add	r4, r0
   b8494:	e7ee      	b.n	b8474 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8496:	232f      	movs	r3, #47	; 0x2f
   b8498:	466a      	mov	r2, sp
   b849a:	4639      	mov	r1, r7
   b849c:	200a      	movs	r0, #10
		buf[0] = 0;
   b849e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b84a2:	f7ff fcd9 	bl	b7e58 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b84a6:	4668      	mov	r0, sp
   b84a8:	f003 fc9d 	bl	bbde6 <strlen>
   b84ac:	6833      	ldr	r3, [r6, #0]
   b84ae:	4602      	mov	r2, r0
   b84b0:	68db      	ldr	r3, [r3, #12]
   b84b2:	4669      	mov	r1, sp
   b84b4:	4630      	mov	r0, r6
   b84b6:	4798      	blx	r3
   b84b8:	4604      	mov	r4, r0
    }
    return n;
}
   b84ba:	4620      	mov	r0, r4
   b84bc:	b00d      	add	sp, #52	; 0x34
   b84be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b84c0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b84c0:	b510      	push	{r4, lr}
   b84c2:	4b05      	ldr	r3, [pc, #20]	; (b84d8 <_ZN9IPAddressC1Ev+0x18>)
   b84c4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b84c6:	2211      	movs	r2, #17
   b84c8:	f840 3b04 	str.w	r3, [r0], #4
   b84cc:	2100      	movs	r1, #0
   b84ce:	f003 fbed 	bl	bbcac <memset>
}
   b84d2:	4620      	mov	r0, r4
   b84d4:	bd10      	pop	{r4, pc}
   b84d6:	bf00      	nop
   b84d8:	000bc4e0 	.word	0x000bc4e0

000b84dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b84dc:	4603      	mov	r3, r0
   b84de:	4a07      	ldr	r2, [pc, #28]	; (b84fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b84e0:	b510      	push	{r4, lr}
   b84e2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b84e6:	f101 0210 	add.w	r2, r1, #16
   b84ea:	f851 4b04 	ldr.w	r4, [r1], #4
   b84ee:	f843 4b04 	str.w	r4, [r3], #4
   b84f2:	4291      	cmp	r1, r2
   b84f4:	d1f9      	bne.n	b84ea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b84f6:	780a      	ldrb	r2, [r1, #0]
   b84f8:	701a      	strb	r2, [r3, #0]
}
   b84fa:	bd10      	pop	{r4, pc}
   b84fc:	000bc4e0 	.word	0x000bc4e0

000b8500 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8500:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8502:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8506:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b850a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b850e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8512:	2304      	movs	r3, #4
   b8514:	6041      	str	r1, [r0, #4]
   b8516:	7503      	strb	r3, [r0, #20]
}
   b8518:	bd10      	pop	{r4, pc}
	...

000b851c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b851c:	b507      	push	{r0, r1, r2, lr}
   b851e:	4b06      	ldr	r3, [pc, #24]	; (b8538 <_ZN9IPAddressC1EPKh+0x1c>)
   b8520:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8522:	78cb      	ldrb	r3, [r1, #3]
   b8524:	9300      	str	r3, [sp, #0]
   b8526:	788b      	ldrb	r3, [r1, #2]
   b8528:	784a      	ldrb	r2, [r1, #1]
   b852a:	7809      	ldrb	r1, [r1, #0]
   b852c:	f7ff ffe8 	bl	b8500 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8530:	b003      	add	sp, #12
   b8532:	f85d fb04 	ldr.w	pc, [sp], #4
   b8536:	bf00      	nop
   b8538:	000bc4e0 	.word	0x000bc4e0

000b853c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b853c:	f100 0310 	add.w	r3, r0, #16
   b8540:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b8542:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b8546:	2901      	cmp	r1, #1
   b8548:	4618      	mov	r0, r3
   b854a:	d108      	bne.n	b855e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b854c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b8550:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b8554:	3a01      	subs	r2, #1
   b8556:	f103 0310 	add.w	r3, r3, #16
   b855a:	d1f2      	bne.n	b8542 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b855c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b855e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b8560:	bf04      	itt	eq
   b8562:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b8566:	1852      	addeq	r2, r2, r1
   b8568:	e7f4      	b.n	b8554 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b856a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b856a:	b40e      	push	{r1, r2, r3}
   b856c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b856e:	b088      	sub	sp, #32
   b8570:	af00      	add	r7, sp, #0
   b8572:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8576:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b8578:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b857c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b857e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8580:	462b      	mov	r3, r5
   b8582:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b8584:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8586:	f7ff fe4b 	bl	b8220 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b858a:	280f      	cmp	r0, #15
   b858c:	687a      	ldr	r2, [r7, #4]
   b858e:	d91a      	bls.n	b85c6 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b8590:	f100 0308 	add.w	r3, r0, #8
   b8594:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b8598:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b859a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b859e:	1c41      	adds	r1, r0, #1
   b85a0:	462b      	mov	r3, r5
   b85a2:	4668      	mov	r0, sp
        va_start(args, fmt);
   b85a4:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b85a6:	f7ff fe3b 	bl	b8220 <vsnprintf>
        if (n > 0) {
   b85aa:	1e02      	subs	r2, r0, #0
   b85ac:	dd04      	ble.n	b85b8 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b85ae:	6823      	ldr	r3, [r4, #0]
   b85b0:	4669      	mov	r1, sp
   b85b2:	689b      	ldr	r3, [r3, #8]
   b85b4:	4620      	mov	r0, r4
   b85b6:	4798      	blx	r3
   b85b8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b85ba:	3720      	adds	r7, #32
   b85bc:	46bd      	mov	sp, r7
   b85be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b85c2:	b003      	add	sp, #12
   b85c4:	4770      	bx	lr
    } else if (n > 0) {
   b85c6:	2800      	cmp	r0, #0
   b85c8:	d0f7      	beq.n	b85ba <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b85ca:	6823      	ldr	r3, [r4, #0]
   b85cc:	4602      	mov	r2, r0
   b85ce:	689b      	ldr	r3, [r3, #8]
   b85d0:	f107 0110 	add.w	r1, r7, #16
   b85d4:	4620      	mov	r0, r4
   b85d6:	4798      	blx	r3
}
   b85d8:	e7ef      	b.n	b85ba <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b85da <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b85da:	b538      	push	{r3, r4, r5, lr}
   b85dc:	680b      	ldr	r3, [r1, #0]
   b85de:	6003      	str	r3, [r0, #0]
   b85e0:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b85e2:	6843      	ldr	r3, [r0, #4]
   b85e4:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b85e6:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b85e8:	d008      	beq.n	b85fc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b85ea:	b115      	cbz	r5, b85f2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b85ec:	686b      	ldr	r3, [r5, #4]
   b85ee:	3301      	adds	r3, #1
   b85f0:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b85f2:	6860      	ldr	r0, [r4, #4]
   b85f4:	b108      	cbz	r0, b85fa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b85f6:	f7ff fe36 	bl	b8266 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b85fa:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b85fc:	bd38      	pop	{r3, r4, r5, pc}

000b85fe <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b85fe:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b8600:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b8602:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b8606:	689b      	ldr	r3, [r3, #8]
   b8608:	2201      	movs	r2, #1
   b860a:	f10d 0107 	add.w	r1, sp, #7
   b860e:	4798      	blx	r3
}
   b8610:	b003      	add	sp, #12
   b8612:	f85d fb04 	ldr.w	pc, [sp], #4

000b8616 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b8616:	460b      	mov	r3, r1
   b8618:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b861a:	2200      	movs	r2, #0
   b861c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b861e:	e9c0 2200 	strd	r2, r2, [r0]
   b8622:	4604      	mov	r4, r0
        t_ = t;
   b8624:	6083      	str	r3, [r0, #8]
    if (t) {
   b8626:	b90b      	cbnz	r3, b862c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b8628:	4620      	mov	r0, r4
   b862a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b862c:	f7ff ffd5 	bl	b85da <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b8630:	e7fa      	b.n	b8628 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b8632 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b8632:	6883      	ldr	r3, [r0, #8]
   b8634:	b1eb      	cbz	r3, b8672 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b8636:	781a      	ldrb	r2, [r3, #0]
   b8638:	2a03      	cmp	r2, #3
   b863a:	d81a      	bhi.n	b8672 <_ZNK5spark9JSONValue4typeEv+0x40>
   b863c:	e8df f002 	tbb	[pc, r2]
   b8640:	1b021704 	.word	0x1b021704
   b8644:	2005      	movs	r0, #5
   b8646:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b8648:	6802      	ldr	r2, [r0, #0]
   b864a:	685b      	ldr	r3, [r3, #4]
   b864c:	6852      	ldr	r2, [r2, #4]
   b864e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b8650:	282d      	cmp	r0, #45	; 0x2d
   b8652:	d012      	beq.n	b867a <_ZNK5spark9JSONValue4typeEv+0x48>
   b8654:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8658:	2b09      	cmp	r3, #9
   b865a:	d90e      	bls.n	b867a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b865c:	2874      	cmp	r0, #116	; 0x74
   b865e:	d00e      	beq.n	b867e <_ZNK5spark9JSONValue4typeEv+0x4c>
   b8660:	2866      	cmp	r0, #102	; 0x66
   b8662:	d00c      	beq.n	b867e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b8664:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b8668:	4258      	negs	r0, r3
   b866a:	4158      	adcs	r0, r3
   b866c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b866e:	2006      	movs	r0, #6
   b8670:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b8672:	2000      	movs	r0, #0
   b8674:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b8676:	2004      	movs	r0, #4
   b8678:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b867a:	2003      	movs	r0, #3
   b867c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b867e:	2002      	movs	r0, #2
}
   b8680:	4770      	bx	lr

000b8682 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b8682:	b510      	push	{r4, lr}
   b8684:	4604      	mov	r4, r0
    switch (type()) {
   b8686:	f7ff ffd4 	bl	b8632 <_ZNK5spark9JSONValue4typeEv>
   b868a:	2802      	cmp	r0, #2
   b868c:	d00e      	beq.n	b86ac <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b868e:	1ec3      	subs	r3, r0, #3
   b8690:	b2db      	uxtb	r3, r3
   b8692:	2b01      	cmp	r3, #1
   b8694:	d814      	bhi.n	b86c0 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b8696:	6822      	ldr	r2, [r4, #0]
   b8698:	68a3      	ldr	r3, [r4, #8]
   b869a:	6850      	ldr	r0, [r2, #4]
   b869c:	685b      	ldr	r3, [r3, #4]
}
   b869e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b86a2:	220a      	movs	r2, #10
   b86a4:	2100      	movs	r1, #0
   b86a6:	4418      	add	r0, r3
   b86a8:	f003 bc62 	b.w	bbf70 <strtol>
        const char* const s = d_->json + t_->start;
   b86ac:	6822      	ldr	r2, [r4, #0]
   b86ae:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b86b0:	6852      	ldr	r2, [r2, #4]
   b86b2:	685b      	ldr	r3, [r3, #4]
   b86b4:	5cd0      	ldrb	r0, [r2, r3]
   b86b6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b86ba:	4258      	negs	r0, r3
   b86bc:	4158      	adcs	r0, r3
}
   b86be:	bd10      	pop	{r4, pc}
    switch (type()) {
   b86c0:	2000      	movs	r0, #0
   b86c2:	e7fc      	b.n	b86be <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b86c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b86c4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b86c6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b86c8:	e9c0 3300 	strd	r3, r3, [r0]
   b86cc:	4604      	mov	r4, r0
        n_(0) {
   b86ce:	480e      	ldr	r0, [pc, #56]	; (b8708 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b86d0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b86d4:	b1a9      	cbz	r1, b8702 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b86d6:	780b      	ldrb	r3, [r1, #0]
   b86d8:	2b03      	cmp	r3, #3
   b86da:	d006      	beq.n	b86ea <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b86dc:	b98b      	cbnz	r3, b8702 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b86de:	6813      	ldr	r3, [r2, #0]
   b86e0:	6858      	ldr	r0, [r3, #4]
   b86e2:	684b      	ldr	r3, [r1, #4]
   b86e4:	5cc3      	ldrb	r3, [r0, r3]
   b86e6:	2b6e      	cmp	r3, #110	; 0x6e
   b86e8:	d007      	beq.n	b86fa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b86ea:	6813      	ldr	r3, [r2, #0]
   b86ec:	684d      	ldr	r5, [r1, #4]
   b86ee:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b86f0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b86f2:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b86f4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b86f6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b86f8:	60e3      	str	r3, [r4, #12]
   b86fa:	4611      	mov	r1, r2
   b86fc:	4620      	mov	r0, r4
   b86fe:	f7ff ff6c 	bl	b85da <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b8702:	4620      	mov	r0, r4
   b8704:	bd38      	pop	{r3, r4, r5, pc}
   b8706:	bf00      	nop
   b8708:	000bc2e4 	.word	0x000bc2e4

000b870c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b870c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b870e:	2500      	movs	r5, #0
   b8710:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b8712:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b8716:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b871a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b871e:	4604      	mov	r4, r0
   b8720:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b8722:	b14b      	cbz	r3, b8738 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b8724:	781a      	ldrb	r2, [r3, #0]
   b8726:	2a01      	cmp	r2, #1
   b8728:	d106      	bne.n	b8738 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b872a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b872e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b8730:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b8732:	6143      	str	r3, [r0, #20]
   b8734:	f7ff ff51 	bl	b85da <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b8738:	4620      	mov	r0, r4
   b873a:	bd38      	pop	{r3, r4, r5, pc}

000b873c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b873c:	b510      	push	{r4, lr}
    if (!n_) {
   b873e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b8740:	4604      	mov	r4, r0
    if (!n_) {
   b8742:	b163      	cbz	r3, b875e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b8744:	6880      	ldr	r0, [r0, #8]
   b8746:	60e0      	str	r0, [r4, #12]
    --n_;
   b8748:	3b01      	subs	r3, #1
    ++t_;
   b874a:	3010      	adds	r0, #16
   b874c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b874e:	6120      	str	r0, [r4, #16]
    --n_;
   b8750:	6163      	str	r3, [r4, #20]
    if (n_) {
   b8752:	b113      	cbz	r3, b875a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b8754:	f7ff fef2 	bl	b853c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b8758:	60a0      	str	r0, [r4, #8]
    return true;
   b875a:	2001      	movs	r0, #1
   b875c:	e000      	b.n	b8760 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b875e:	4618      	mov	r0, r3
}
   b8760:	bd10      	pop	{r4, pc}

000b8762 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b8762:	b510      	push	{r4, lr}
    write('}');
   b8764:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b8766:	4604      	mov	r4, r0
    write('}');
   b8768:	f7ff ff49 	bl	b85fe <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b876c:	2301      	movs	r3, #1
   b876e:	7123      	strb	r3, [r4, #4]
}
   b8770:	4620      	mov	r0, r4
   b8772:	bd10      	pop	{r4, pc}

000b8774 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b8774:	b508      	push	{r3, lr}
    switch (state_) {
   b8776:	7903      	ldrb	r3, [r0, #4]
   b8778:	2b01      	cmp	r3, #1
   b877a:	d002      	beq.n	b8782 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b877c:	2b02      	cmp	r3, #2
   b877e:	d004      	beq.n	b878a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b8780:	bd08      	pop	{r3, pc}
        write(',');
   b8782:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b8784:	f7ff ff3b 	bl	b85fe <_ZN5spark10JSONWriter5writeEc>
}
   b8788:	e7fa      	b.n	b8780 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b878a:	213a      	movs	r1, #58	; 0x3a
   b878c:	e7fa      	b.n	b8784 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b878e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b878e:	b510      	push	{r4, lr}
   b8790:	4604      	mov	r4, r0
    writeSeparator();
   b8792:	f7ff ffef 	bl	b8774 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b8796:	4620      	mov	r0, r4
   b8798:	217b      	movs	r1, #123	; 0x7b
   b879a:	f7ff ff30 	bl	b85fe <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b879e:	2300      	movs	r3, #0
   b87a0:	7123      	strb	r3, [r4, #4]
}
   b87a2:	4620      	mov	r0, r4
   b87a4:	bd10      	pop	{r4, pc}
	...

000b87a8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b87a8:	b513      	push	{r0, r1, r4, lr}
   b87aa:	4604      	mov	r4, r0
   b87ac:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b87ae:	f7ff ffe1 	bl	b8774 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b87b2:	6823      	ldr	r3, [r4, #0]
   b87b4:	9a01      	ldr	r2, [sp, #4]
   b87b6:	68db      	ldr	r3, [r3, #12]
   b87b8:	4903      	ldr	r1, [pc, #12]	; (b87c8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b87ba:	4620      	mov	r0, r4
   b87bc:	4798      	blx	r3
    state_ = NEXT;
   b87be:	2301      	movs	r3, #1
}
   b87c0:	4620      	mov	r0, r4
    state_ = NEXT;
   b87c2:	7123      	strb	r3, [r4, #4]
}
   b87c4:	b002      	add	sp, #8
   b87c6:	bd10      	pop	{r4, pc}
   b87c8:	000bc12c 	.word	0x000bc12c

000b87cc <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b87cc:	b513      	push	{r0, r1, r4, lr}
   b87ce:	4604      	mov	r4, r0
   b87d0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b87d2:	f7ff ffcf 	bl	b8774 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b87d6:	6823      	ldr	r3, [r4, #0]
   b87d8:	9a01      	ldr	r2, [sp, #4]
   b87da:	68db      	ldr	r3, [r3, #12]
   b87dc:	4903      	ldr	r1, [pc, #12]	; (b87ec <_ZN5spark10JSONWriter5valueEj+0x20>)
   b87de:	4620      	mov	r0, r4
   b87e0:	4798      	blx	r3
    state_ = NEXT;
   b87e2:	2301      	movs	r3, #1
}
   b87e4:	4620      	mov	r0, r4
    state_ = NEXT;
   b87e6:	7123      	strb	r3, [r4, #4]
}
   b87e8:	b002      	add	sp, #8
   b87ea:	bd10      	pop	{r4, pc}
   b87ec:	000bc4ec 	.word	0x000bc4ec

000b87f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b87f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b87f4:	460d      	mov	r5, r1
    write('"');
   b87f6:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b87f8:	4690      	mov	r8, r2
   b87fa:	4604      	mov	r4, r0
    write('"');
   b87fc:	f7ff feff 	bl	b85fe <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b8800:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b88a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b8804:	44a8      	add	r8, r5
    const char *s = str;
   b8806:	462f      	mov	r7, r5
    while (s != end) {
   b8808:	4547      	cmp	r7, r8
   b880a:	46ba      	mov	sl, r7
   b880c:	d03d      	beq.n	b888a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b880e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b8812:	2e22      	cmp	r6, #34	; 0x22
   b8814:	d006      	beq.n	b8824 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b8816:	2e5c      	cmp	r6, #92	; 0x5c
   b8818:	d004      	beq.n	b8824 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b881a:	4630      	mov	r0, r6
   b881c:	f003 fa06 	bl	bbc2c <isprint>
   b8820:	2800      	cmp	r0, #0
   b8822:	d1f1      	bne.n	b8808 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b8824:	6823      	ldr	r3, [r4, #0]
   b8826:	ebaa 0205 	sub.w	r2, sl, r5
   b882a:	689b      	ldr	r3, [r3, #8]
   b882c:	4629      	mov	r1, r5
   b882e:	4620      	mov	r0, r4
   b8830:	4798      	blx	r3
            write('\\');
   b8832:	215c      	movs	r1, #92	; 0x5c
   b8834:	4620      	mov	r0, r4
   b8836:	f7ff fee2 	bl	b85fe <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b883a:	2e0d      	cmp	r6, #13
   b883c:	d80a      	bhi.n	b8854 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b883e:	2e07      	cmp	r6, #7
   b8840:	d91c      	bls.n	b887c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b8842:	f1a6 0308 	sub.w	r3, r6, #8
   b8846:	2b05      	cmp	r3, #5
   b8848:	d818      	bhi.n	b887c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b884a:	e8df f003 	tbb	[pc, r3]
   b884e:	0f0d      	.short	0x0f0d
   b8850:	15131711 	.word	0x15131711
   b8854:	2e22      	cmp	r6, #34	; 0x22
   b8856:	d001      	beq.n	b885c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b8858:	2e5c      	cmp	r6, #92	; 0x5c
   b885a:	d10f      	bne.n	b887c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b885c:	4631      	mov	r1, r6
                write('b');
   b885e:	4620      	mov	r0, r4
   b8860:	f7ff fecd 	bl	b85fe <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b8864:	463d      	mov	r5, r7
    while (s != end) {
   b8866:	e7cf      	b.n	b8808 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b8868:	2162      	movs	r1, #98	; 0x62
   b886a:	e7f8      	b.n	b885e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b886c:	2174      	movs	r1, #116	; 0x74
   b886e:	e7f6      	b.n	b885e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b8870:	216e      	movs	r1, #110	; 0x6e
   b8872:	e7f4      	b.n	b885e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b8874:	2166      	movs	r1, #102	; 0x66
   b8876:	e7f2      	b.n	b885e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b8878:	2172      	movs	r1, #114	; 0x72
   b887a:	e7f0      	b.n	b885e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b887c:	6823      	ldr	r3, [r4, #0]
   b887e:	4632      	mov	r2, r6
   b8880:	68db      	ldr	r3, [r3, #12]
   b8882:	4649      	mov	r1, r9
   b8884:	4620      	mov	r0, r4
   b8886:	4798      	blx	r3
                break;
   b8888:	e7ec      	b.n	b8864 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b888a:	42bd      	cmp	r5, r7
   b888c:	d005      	beq.n	b889a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b888e:	6823      	ldr	r3, [r4, #0]
   b8890:	1b7a      	subs	r2, r7, r5
   b8892:	689b      	ldr	r3, [r3, #8]
   b8894:	4629      	mov	r1, r5
   b8896:	4620      	mov	r0, r4
   b8898:	4798      	blx	r3
    }
    write('"');
   b889a:	2122      	movs	r1, #34	; 0x22
   b889c:	4620      	mov	r0, r4
   b889e:	f7ff feae 	bl	b85fe <_ZN5spark10JSONWriter5writeEc>
}
   b88a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b88a6:	bf00      	nop
   b88a8:	000bc4ef 	.word	0x000bc4ef

000b88ac <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b88ac:	b513      	push	{r0, r1, r4, lr}
   b88ae:	4604      	mov	r4, r0
   b88b0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b88b4:	f7ff ff5e 	bl	b8774 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b88b8:	4620      	mov	r0, r4
   b88ba:	e9dd 2100 	ldrd	r2, r1, [sp]
   b88be:	f7ff ff97 	bl	b87f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b88c2:	2302      	movs	r3, #2
}
   b88c4:	4620      	mov	r0, r4
    state_ = VALUE;
   b88c6:	7123      	strb	r3, [r4, #4]
}
   b88c8:	b002      	add	sp, #8
   b88ca:	bd10      	pop	{r4, pc}

000b88cc <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b88cc:	b513      	push	{r0, r1, r4, lr}
   b88ce:	4604      	mov	r4, r0
   b88d0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b88d4:	f7ff ff4e 	bl	b8774 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b88d8:	4620      	mov	r0, r4
   b88da:	e9dd 2100 	ldrd	r2, r1, [sp]
   b88de:	f7ff ff87 	bl	b87f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b88e2:	2301      	movs	r3, #1
}
   b88e4:	4620      	mov	r0, r4
    state_ = NEXT;
   b88e6:	7123      	strb	r3, [r4, #4]
}
   b88e8:	b002      	add	sp, #8
   b88ea:	bd10      	pop	{r4, pc}

000b88ec <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b88ec:	6880      	ldr	r0, [r0, #8]
   b88ee:	6803      	ldr	r3, [r0, #0]
   b88f0:	68db      	ldr	r3, [r3, #12]
   b88f2:	4718      	bx	r3

000b88f4 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b88f4:	4770      	bx	lr

000b88f6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b88f6:	4608      	mov	r0, r1
   b88f8:	b111      	cbz	r1, b8900 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b88fa:	680b      	ldr	r3, [r1, #0]
   b88fc:	685b      	ldr	r3, [r3, #4]
   b88fe:	4718      	bx	r3
}
   b8900:	4770      	bx	lr

000b8902 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b8902:	4770      	bx	lr

000b8904 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b8904:	4770      	bx	lr

000b8906 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b8906:	4770      	bx	lr

000b8908 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b8908:	4770      	bx	lr

000b890a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b890a:	b538      	push	{r3, r4, r5, lr}
   b890c:	4604      	mov	r4, r0
   b890e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b8910:	6800      	ldr	r0, [r0, #0]
   b8912:	212e      	movs	r1, #46	; 0x2e
   b8914:	f003 fa4b 	bl	bbdae <strchrnul>
    size = s - category;
   b8918:	6823      	ldr	r3, [r4, #0]
   b891a:	1ac3      	subs	r3, r0, r3
   b891c:	602b      	str	r3, [r5, #0]
    if (size) {
   b891e:	b123      	cbz	r3, b892a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b8920:	7803      	ldrb	r3, [r0, #0]
   b8922:	b103      	cbz	r3, b8926 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b8924:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b8926:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8928:	6020      	str	r0, [r4, #0]
}
   b892a:	4618      	mov	r0, r3
   b892c:	bd38      	pop	{r3, r4, r5, pc}

000b892e <_ZN5spark16JSONStreamWriterD0Ev>:
   b892e:	b510      	push	{r4, lr}
   b8930:	210c      	movs	r1, #12
   b8932:	4604      	mov	r4, r0
   b8934:	f7fb fbb3 	bl	b409e <_ZdlPvj>
   b8938:	4620      	mov	r0, r4
   b893a:	bd10      	pop	{r4, pc}

000b893c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b893c:	b510      	push	{r4, lr}
   b893e:	2104      	movs	r1, #4
   b8940:	4604      	mov	r4, r0
   b8942:	f7fb fbac 	bl	b409e <_ZdlPvj>
   b8946:	4620      	mov	r0, r4
   b8948:	bd10      	pop	{r4, pc}

000b894a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b894a:	b510      	push	{r4, lr}
   b894c:	2104      	movs	r1, #4
   b894e:	4604      	mov	r4, r0
   b8950:	f7fb fba5 	bl	b409e <_ZdlPvj>
   b8954:	4620      	mov	r0, r4
   b8956:	bd10      	pop	{r4, pc}

000b8958 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b8958:	f7ff b9c6 	b.w	b7ce8 <os_mutex_recursive_lock>

000b895c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b895c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b895e:	f003 fa30 	bl	bbdc2 <strcmp>
}
   b8962:	fab0 f080 	clz	r0, r0
   b8966:	0940      	lsrs	r0, r0, #5
   b8968:	bd08      	pop	{r3, pc}

000b896a <__tcf_1>:
   b896a:	4770      	bx	lr

000b896c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b896c:	b510      	push	{r4, lr}
   b896e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   b8970:	f001 fcdc 	bl	ba32c <_Z16_fetch_usbserialv>
   b8974:	4284      	cmp	r4, r0
   b8976:	d010      	beq.n	b899a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b8978:	f001 ff00 	bl	ba77c <_Z22__fetch_global_Serial1v>
   b897c:	4284      	cmp	r4, r0
   b897e:	d105      	bne.n	b898c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b8980:	f001 fefc 	bl	ba77c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   b8984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b8988:	f001 bc67 	b.w	ba25a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b898c:	b12c      	cbz	r4, b899a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b898e:	6823      	ldr	r3, [r4, #0]
   b8990:	4620      	mov	r0, r4
   b8992:	685b      	ldr	r3, [r3, #4]
}
   b8994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8998:	4718      	bx	r3
   b899a:	bd10      	pop	{r4, pc}

000b899c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b899c:	680b      	ldr	r3, [r1, #0]
   b899e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b89a0:	684b      	ldr	r3, [r1, #4]
   b89a2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b89a4:	b113      	cbz	r3, b89ac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b89a6:	685a      	ldr	r2, [r3, #4]
   b89a8:	3201      	adds	r2, #1
   b89aa:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b89ac:	4770      	bx	lr

000b89ae <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b89ae:	b513      	push	{r0, r1, r4, lr}
   b89b0:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b89b2:	4608      	mov	r0, r1
   b89b4:	9101      	str	r1, [sp, #4]
   b89b6:	f003 fa16 	bl	bbde6 <strlen>
   b89ba:	9901      	ldr	r1, [sp, #4]
   b89bc:	4602      	mov	r2, r0
   b89be:	4620      	mov	r0, r4
}
   b89c0:	b002      	add	sp, #8
   b89c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b89c6:	f7ff bf81 	b.w	b88cc <_ZN5spark10JSONWriter5valueEPKcj>

000b89ca <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b89ca:	b513      	push	{r0, r1, r4, lr}
   b89cc:	4604      	mov	r4, r0
    write(str, strlen(str));
   b89ce:	4608      	mov	r0, r1
   b89d0:	9101      	str	r1, [sp, #4]
   b89d2:	f003 fa08 	bl	bbde6 <strlen>
   b89d6:	6823      	ldr	r3, [r4, #0]
   b89d8:	9901      	ldr	r1, [sp, #4]
   b89da:	68db      	ldr	r3, [r3, #12]
   b89dc:	4602      	mov	r2, r0
   b89de:	4620      	mov	r0, r4
}
   b89e0:	b002      	add	sp, #8
   b89e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b89e6:	4718      	bx	r3

000b89e8 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b89e8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b89ea:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b89ec:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b89f0:	68db      	ldr	r3, [r3, #12]
   b89f2:	2201      	movs	r2, #1
   b89f4:	f10d 0107 	add.w	r1, sp, #7
   b89f8:	4798      	blx	r3
}
   b89fa:	b003      	add	sp, #12
   b89fc:	f85d fb04 	ldr.w	pc, [sp], #4

000b8a00 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b8a00:	b40e      	push	{r1, r2, r3}
   b8a02:	b503      	push	{r0, r1, lr}
   b8a04:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b8a06:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b8a08:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b8a0c:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b8a0e:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b8a10:	f001 f8d7 	bl	b9bc2 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b8a14:	b002      	add	sp, #8
   b8a16:	f85d eb04 	ldr.w	lr, [sp], #4
   b8a1a:	b003      	add	sp, #12
   b8a1c:	4770      	bx	lr

000b8a1e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b8a1e:	680a      	ldr	r2, [r1, #0]
   b8a20:	6002      	str	r2, [r0, #0]
   b8a22:	684a      	ldr	r2, [r1, #4]
   b8a24:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b8a26:	2200      	movs	r2, #0
   b8a28:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b8a2c:	b510      	push	{r4, lr}
   b8a2e:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8a30:	688c      	ldr	r4, [r1, #8]
   b8a32:	6084      	str	r4, [r0, #8]
   b8a34:	68cc      	ldr	r4, [r1, #12]
   b8a36:	60c4      	str	r4, [r0, #12]
   b8a38:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b8a3a:	608a      	str	r2, [r1, #8]
   b8a3c:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8a3e:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b8a40:	610a      	str	r2, [r1, #16]
   b8a42:	bd10      	pop	{r4, pc}

000b8a44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b8a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b8a48:	e9d0 8400 	ldrd	r8, r4, [r0]
   b8a4c:	f04f 0a14 	mov.w	sl, #20
   b8a50:	9300      	str	r3, [sp, #0]
   b8a52:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b8a56:	4b18      	ldr	r3, [pc, #96]	; (b8ab8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b8a58:	10a4      	asrs	r4, r4, #2
   b8a5a:	4617      	mov	r7, r2
   b8a5c:	435c      	muls	r4, r3
   b8a5e:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b8a60:	2c00      	cmp	r4, #0
   b8a62:	dd21      	ble.n	b8aa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b8a64:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b8a66:	fb0a f006 	mul.w	r0, sl, r6
   b8a6a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b8a6e:	463a      	mov	r2, r7
   b8a70:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b8a74:	5828      	ldr	r0, [r5, r0]
   b8a76:	9101      	str	r1, [sp, #4]
   b8a78:	455f      	cmp	r7, fp
   b8a7a:	bf28      	it	cs
   b8a7c:	465a      	movcs	r2, fp
   b8a7e:	f003 f9ba 	bl	bbdf6 <strncmp>
                if (cmp == 0) {
   b8a82:	2800      	cmp	r0, #0
   b8a84:	9901      	ldr	r1, [sp, #4]
   b8a86:	f04f 0301 	mov.w	r3, #1
   b8a8a:	d10b      	bne.n	b8aa4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b8a8c:	455f      	cmp	r7, fp
   b8a8e:	d103      	bne.n	b8a98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b8a90:	9a00      	ldr	r2, [sp, #0]
   b8a92:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b8a94:	4634      	mov	r4, r6
   b8a96:	e7e3      	b.n	b8a60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b8a98:	d9fc      	bls.n	b8a94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b8a9a:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b8a9c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b8aa0:	3e01      	subs	r6, #1
   b8aa2:	e7f7      	b.n	b8a94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b8aa4:	dbf9      	blt.n	b8a9a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b8aa6:	e7f5      	b.n	b8a94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b8aa8:	eba5 0508 	sub.w	r5, r5, r8
}
   b8aac:	4802      	ldr	r0, [pc, #8]	; (b8ab8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b8aae:	10ad      	asrs	r5, r5, #2
   b8ab0:	4368      	muls	r0, r5
   b8ab2:	b003      	add	sp, #12
   b8ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8ab8:	cccccccd 	.word	0xcccccccd

000b8abc <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b8abc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b8abe:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b8ac0:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b8ac2:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b8ac4:	b303      	cbz	r3, b8b08 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b8ac6:	b1f9      	cbz	r1, b8b08 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b8ac8:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b8aca:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b8ace:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b8ad0:	a903      	add	r1, sp, #12
   b8ad2:	a801      	add	r0, sp, #4
   b8ad4:	f7ff ff19 	bl	b890a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b8ad8:	4601      	mov	r1, r0
   b8ada:	b1a8      	cbz	r0, b8b08 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b8adc:	f10d 030b 	add.w	r3, sp, #11
   b8ae0:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b8ae2:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8ae6:	4620      	mov	r0, r4
   b8ae8:	f7ff ffac 	bl	b8a44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b8aec:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b8af0:	b153      	cbz	r3, b8b08 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b8af2:	6823      	ldr	r3, [r4, #0]
   b8af4:	2414      	movs	r4, #20
   b8af6:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b8afa:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b8afc:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b8b00:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b8b02:	bfa8      	it	ge
   b8b04:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b8b06:	e7e3      	b.n	b8ad0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b8b08:	4628      	mov	r0, r5
   b8b0a:	b004      	add	sp, #16
   b8b0c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8b10 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b8b10:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b8b12:	4c09      	ldr	r4, [pc, #36]	; (b8b38 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b8b14:	7823      	ldrb	r3, [r4, #0]
   b8b16:	f3bf 8f5b 	dmb	ish
   b8b1a:	07db      	lsls	r3, r3, #31
   b8b1c:	d409      	bmi.n	b8b32 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b8b1e:	4620      	mov	r0, r4
   b8b20:	f7fb faca 	bl	b40b8 <__cxa_guard_acquire>
   b8b24:	b128      	cbz	r0, b8b32 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b8b26:	4620      	mov	r0, r4
   b8b28:	f7fb facb 	bl	b40c2 <__cxa_guard_release>
   b8b2c:	4803      	ldr	r0, [pc, #12]	; (b8b3c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b8b2e:	f003 f877 	bl	bbc20 <atexit>
}
   b8b32:	4803      	ldr	r0, [pc, #12]	; (b8b40 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b8b34:	bd10      	pop	{r4, pc}
   b8b36:	bf00      	nop
   b8b38:	2003e6a4 	.word	0x2003e6a4
   b8b3c:	000b8903 	.word	0x000b8903
   b8b40:	2003dc14 	.word	0x2003dc14

000b8b44 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b8b44:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b8b46:	4c09      	ldr	r4, [pc, #36]	; (b8b6c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b8b48:	7823      	ldrb	r3, [r4, #0]
   b8b4a:	f3bf 8f5b 	dmb	ish
   b8b4e:	07db      	lsls	r3, r3, #31
   b8b50:	d409      	bmi.n	b8b66 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b8b52:	4620      	mov	r0, r4
   b8b54:	f7fb fab0 	bl	b40b8 <__cxa_guard_acquire>
   b8b58:	b128      	cbz	r0, b8b66 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b8b5a:	4620      	mov	r0, r4
   b8b5c:	f7fb fab1 	bl	b40c2 <__cxa_guard_release>
   b8b60:	4803      	ldr	r0, [pc, #12]	; (b8b70 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b8b62:	f003 f85d 	bl	bbc20 <atexit>
    return &factory;
}
   b8b66:	4803      	ldr	r0, [pc, #12]	; (b8b74 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b8b68:	bd10      	pop	{r4, pc}
   b8b6a:	bf00      	nop
   b8b6c:	2003e6a8 	.word	0x2003e6a8
   b8b70:	000b896b 	.word	0x000b896b
   b8b74:	2003dc18 	.word	0x2003dc18

000b8b78 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b8b78:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b8b7a:	2500      	movs	r5, #0
   b8b7c:	4604      	mov	r4, r0
   b8b7e:	e9c0 5500 	strd	r5, r5, [r0]
   b8b82:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b8b86:	6085      	str	r5, [r0, #8]
   b8b88:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b8b8a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b8b8e:	f7ff f89b 	bl	b7cc8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b8b92:	f7ff ffbd 	bl	b8b10 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b8b96:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b8b98:	f7ff ffd4 	bl	b8b44 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b8b9c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b8b9e:	6220      	str	r0, [r4, #32]
}
   b8ba0:	4620      	mov	r0, r4
   b8ba2:	bd38      	pop	{r3, r4, r5, pc}

000b8ba4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b8ba4:	b510      	push	{r4, lr}
    static LogManager mgr;
   b8ba6:	4c0a      	ldr	r4, [pc, #40]	; (b8bd0 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b8ba8:	7823      	ldrb	r3, [r4, #0]
   b8baa:	f3bf 8f5b 	dmb	ish
   b8bae:	07db      	lsls	r3, r3, #31
   b8bb0:	d40c      	bmi.n	b8bcc <_ZN5spark10LogManager8instanceEv+0x28>
   b8bb2:	4620      	mov	r0, r4
   b8bb4:	f7fb fa80 	bl	b40b8 <__cxa_guard_acquire>
   b8bb8:	b140      	cbz	r0, b8bcc <_ZN5spark10LogManager8instanceEv+0x28>
   b8bba:	4806      	ldr	r0, [pc, #24]	; (b8bd4 <_ZN5spark10LogManager8instanceEv+0x30>)
   b8bbc:	f7ff ffdc 	bl	b8b78 <_ZN5spark10LogManagerC1Ev>
   b8bc0:	4620      	mov	r0, r4
   b8bc2:	f7fb fa7e 	bl	b40c2 <__cxa_guard_release>
   b8bc6:	4804      	ldr	r0, [pc, #16]	; (b8bd8 <_ZN5spark10LogManager8instanceEv+0x34>)
   b8bc8:	f003 f82a 	bl	bbc20 <atexit>
    return &mgr;
}
   b8bcc:	4801      	ldr	r0, [pc, #4]	; (b8bd4 <_ZN5spark10LogManager8instanceEv+0x30>)
   b8bce:	bd10      	pop	{r4, pc}
   b8bd0:	2003e6a0 	.word	0x2003e6a0
   b8bd4:	2003e6b0 	.word	0x2003e6b0
   b8bd8:	000b90f9 	.word	0x000b90f9

000b8bdc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b8bdc:	4a02      	ldr	r2, [pc, #8]	; (b8be8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b8bde:	4903      	ldr	r1, [pc, #12]	; (b8bec <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b8be0:	4803      	ldr	r0, [pc, #12]	; (b8bf0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b8be2:	2300      	movs	r3, #0
   b8be4:	f7ff ba50 	b.w	b8088 <log_set_callbacks>
   b8be8:	000b8edd 	.word	0x000b8edd
   b8bec:	000b8e69 	.word	0x000b8e69
   b8bf0:	000b8de9 	.word	0x000b8de9

000b8bf4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b8bf4:	2300      	movs	r3, #0
   b8bf6:	461a      	mov	r2, r3
   b8bf8:	4619      	mov	r1, r3
   b8bfa:	4618      	mov	r0, r3
   b8bfc:	f7ff ba44 	b.w	b8088 <log_set_callbacks>

000b8c00 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b8c02:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8c04:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8c06:	4668      	mov	r0, sp
   b8c08:	f7ff fec8 	bl	b899c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b8c0c:	466a      	mov	r2, sp
   b8c0e:	4629      	mov	r1, r5
   b8c10:	4620      	mov	r0, r4
   b8c12:	f7ff fd7b 	bl	b870c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b8c16:	a801      	add	r0, sp, #4
   b8c18:	f7ff fb4b 	bl	b82b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c1c:	4620      	mov	r0, r4
   b8c1e:	b003      	add	sp, #12
   b8c20:	bd30      	pop	{r4, r5, pc}

000b8c22 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8c22:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b8c24:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8c26:	4604      	mov	r4, r0
   b8c28:	4668      	mov	r0, sp
   b8c2a:	f7ff feb7 	bl	b899c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b8c2e:	466a      	mov	r2, sp
   b8c30:	4629      	mov	r1, r5
   b8c32:	4620      	mov	r0, r4
   b8c34:	f7ff fd46 	bl	b86c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8c38:	a801      	add	r0, sp, #4
   b8c3a:	f7ff fb3a 	bl	b82b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c3e:	4620      	mov	r0, r4
   b8c40:	b003      	add	sp, #12
   b8c42:	bd30      	pop	{r4, r5, pc}

000b8c44 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b8c46:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8c48:	4604      	mov	r4, r0
   b8c4a:	4668      	mov	r0, sp
   b8c4c:	f7ff fea6 	bl	b899c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b8c50:	466a      	mov	r2, sp
   b8c52:	4629      	mov	r1, r5
   b8c54:	4620      	mov	r0, r4
   b8c56:	f7ff fcde 	bl	b8616 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8c5a:	a801      	add	r0, sp, #4
   b8c5c:	f7ff fb29 	bl	b82b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c60:	4620      	mov	r0, r4
   b8c62:	b003      	add	sp, #12
   b8c64:	bd30      	pop	{r4, r5, pc}
	...

000b8c68 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b8c68:	b570      	push	{r4, r5, r6, lr}
   b8c6a:	b08a      	sub	sp, #40	; 0x28
   b8c6c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b8c6e:	4601      	mov	r1, r0
   b8c70:	a804      	add	r0, sp, #16
   b8c72:	f7ff ffc5 	bl	b8c00 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b8c76:	4e14      	ldr	r6, [pc, #80]	; (b8cc8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b8c78:	a804      	add	r0, sp, #16
   b8c7a:	f7ff fd5f 	bl	b873c <_ZN5spark18JSONObjectIterator4nextEv>
   b8c7e:	b1e8      	cbz	r0, b8cbc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b8c80:	a904      	add	r1, sp, #16
   b8c82:	4668      	mov	r0, sp
   b8c84:	f7ff ffcd 	bl	b8c22 <_ZNK5spark18JSONObjectIterator4nameEv>
   b8c88:	9802      	ldr	r0, [sp, #8]
   b8c8a:	4631      	mov	r1, r6
   b8c8c:	f7ff fe66 	bl	b895c <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b8c90:	4604      	mov	r4, r0
   b8c92:	b110      	cbz	r0, b8c9a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b8c94:	1e2c      	subs	r4, r5, #0
   b8c96:	bf18      	it	ne
   b8c98:	2401      	movne	r4, #1
   b8c9a:	a801      	add	r0, sp, #4
   b8c9c:	f7ff fb09 	bl	b82b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8ca0:	2c00      	cmp	r4, #0
   b8ca2:	d0e9      	beq.n	b8c78 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b8ca4:	a904      	add	r1, sp, #16
   b8ca6:	4668      	mov	r0, sp
   b8ca8:	f7ff ffcc 	bl	b8c44 <_ZNK5spark18JSONObjectIterator5valueEv>
   b8cac:	4668      	mov	r0, sp
   b8cae:	f7ff fce8 	bl	b8682 <_ZNK5spark9JSONValue5toIntEv>
   b8cb2:	6028      	str	r0, [r5, #0]
   b8cb4:	a801      	add	r0, sp, #4
   b8cb6:	f7ff fafc 	bl	b82b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8cba:	e7dd      	b.n	b8c78 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b8cbc:	a805      	add	r0, sp, #20
   b8cbe:	f7ff faf8 	bl	b82b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8cc2:	b00a      	add	sp, #40	; 0x28
   b8cc4:	bd70      	pop	{r4, r5, r6, pc}
   b8cc6:	bf00      	nop
   b8cc8:	000bc4f5 	.word	0x000bc4f5

000b8ccc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b8ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8cce:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b8cd0:	4620      	mov	r0, r4
   b8cd2:	4913      	ldr	r1, [pc, #76]	; (b8d20 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b8cd4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b8cd6:	f003 f874 	bl	bbdc2 <strcmp>
   b8cda:	b950      	cbnz	r0, b8cf2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b8cdc:	f001 fb26 	bl	ba32c <_Z16_fetch_usbserialv>
   b8ce0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b8ce4:	f001 fb0e 	bl	ba304 <_ZN9USBSerial5beginEl>
}
   b8ce8:	b003      	add	sp, #12
   b8cea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b8cee:	f001 bb1d 	b.w	ba32c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b8cf2:	490c      	ldr	r1, [pc, #48]	; (b8d24 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b8cf4:	4620      	mov	r0, r4
   b8cf6:	f003 f864 	bl	bbdc2 <strcmp>
   b8cfa:	b978      	cbnz	r0, b8d1c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b8cfc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b8d00:	a901      	add	r1, sp, #4
   b8d02:	4628      	mov	r0, r5
        int baud = 9600;
   b8d04:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b8d06:	f7ff ffaf 	bl	b8c68 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b8d0a:	f001 fd37 	bl	ba77c <_Z22__fetch_global_Serial1v>
   b8d0e:	9901      	ldr	r1, [sp, #4]
   b8d10:	f001 faa0 	bl	ba254 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b8d14:	f001 fd32 	bl	ba77c <_Z22__fetch_global_Serial1v>
}
   b8d18:	b003      	add	sp, #12
   b8d1a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b8d1c:	2000      	movs	r0, #0
   b8d1e:	e7fb      	b.n	b8d18 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b8d20:	000bc4fa 	.word	0x000bc4fa
   b8d24:	000bc501 	.word	0x000bc501

000b8d28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8d28:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8d2a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b8d2e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8d30:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8d32:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8d36:	42ae      	cmp	r6, r5
   b8d38:	d005      	beq.n	b8d46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b8d3a:	f105 0008 	add.w	r0, r5, #8
   b8d3e:	f7ff fff3 	bl	b8d28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8d42:	3514      	adds	r5, #20
   b8d44:	e7f7      	b.n	b8d36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b8d46:	6820      	ldr	r0, [r4, #0]
   b8d48:	f7ff fa52 	bl	b81f0 <free>
}
   b8d4c:	4620      	mov	r0, r4
   b8d4e:	bd70      	pop	{r4, r5, r6, pc}

000b8d50 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b8d50:	b510      	push	{r4, lr}
   b8d52:	4604      	mov	r4, r0
   b8d54:	300c      	adds	r0, #12
   b8d56:	f7ff ffe7 	bl	b8d28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8d5a:	4620      	mov	r0, r4
   b8d5c:	f7ff fa97 	bl	b828e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b8d60:	4620      	mov	r0, r4
   b8d62:	bd10      	pop	{r4, pc}

000b8d64 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b8d64:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b8d66:	4b04      	ldr	r3, [pc, #16]	; (b8d78 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b8d68:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b8d6a:	f840 3b04 	str.w	r3, [r0], #4
   b8d6e:	f7ff ffef 	bl	b8d50 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b8d72:	4620      	mov	r0, r4
   b8d74:	bd10      	pop	{r4, pc}
   b8d76:	bf00      	nop
   b8d78:	000bc440 	.word	0x000bc440

000b8d7c <_ZN5spark16StreamLogHandlerD0Ev>:
   b8d7c:	b510      	push	{r4, lr}
   b8d7e:	4604      	mov	r4, r0
   b8d80:	f7ff fff0 	bl	b8d64 <_ZN5spark16StreamLogHandlerD1Ev>
   b8d84:	4620      	mov	r0, r4
   b8d86:	2124      	movs	r1, #36	; 0x24
   b8d88:	f7fb f989 	bl	b409e <_ZdlPvj>
   b8d8c:	4620      	mov	r0, r4
   b8d8e:	bd10      	pop	{r4, pc}

000b8d90 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b8d90:	b510      	push	{r4, lr}
   b8d92:	4b03      	ldr	r3, [pc, #12]	; (b8da0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b8d94:	6003      	str	r3, [r0, #0]
   b8d96:	4604      	mov	r4, r0
   b8d98:	f7ff ffe4 	bl	b8d64 <_ZN5spark16StreamLogHandlerD1Ev>
   b8d9c:	4620      	mov	r0, r4
   b8d9e:	bd10      	pop	{r4, pc}
   b8da0:	000bc59c 	.word	0x000bc59c

000b8da4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b8da4:	b510      	push	{r4, lr}
   b8da6:	4604      	mov	r4, r0
   b8da8:	f7ff fff2 	bl	b8d90 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b8dac:	4620      	mov	r0, r4
   b8dae:	2124      	movs	r1, #36	; 0x24
   b8db0:	f7fb f975 	bl	b409e <_ZdlPvj>
   b8db4:	4620      	mov	r0, r4
   b8db6:	bd10      	pop	{r4, pc}

000b8db8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b8db8:	2200      	movs	r2, #0
   b8dba:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b8dbe:	b510      	push	{r4, lr}
        capacity_(0) {
   b8dc0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8dc2:	680c      	ldr	r4, [r1, #0]
   b8dc4:	6004      	str	r4, [r0, #0]
   b8dc6:	684c      	ldr	r4, [r1, #4]
   b8dc8:	6044      	str	r4, [r0, #4]
   b8dca:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8dcc:	600a      	str	r2, [r1, #0]
   b8dce:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8dd0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8dd2:	608a      	str	r2, [r1, #8]
}
   b8dd4:	bd10      	pop	{r4, pc}

000b8dd6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b8dd6:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b8dd8:	6803      	ldr	r3, [r0, #0]
   b8dda:	4604      	mov	r4, r0
   b8ddc:	6818      	ldr	r0, [r3, #0]
   b8dde:	f7fe ff8b 	bl	b7cf8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b8de2:	4620      	mov	r0, r4
   b8de4:	bd10      	pop	{r4, pc}
	...

000b8de8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b8de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8dec:	b087      	sub	sp, #28
   b8dee:	4680      	mov	r8, r0
   b8df0:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b8df2:	4b1c      	ldr	r3, [pc, #112]	; (b8e64 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b8df4:	685b      	ldr	r3, [r3, #4]
   b8df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8dfa:	4689      	mov	r9, r1
   b8dfc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b8dfe:	b96b      	cbnz	r3, b8e1c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b8e00:	f7ff fed0 	bl	b8ba4 <_ZN5spark10LogManager8instanceEv>
   b8e04:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8e06:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b8e0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8e0c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b8e0e:	f7ff fda3 	bl	b8958 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b8e12:	7b23      	ldrb	r3, [r4, #12]
   b8e14:	b12b      	cbz	r3, b8e22 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b8e16:	a805      	add	r0, sp, #20
   b8e18:	f7ff ffdd 	bl	b8dd6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b8e1c:	b007      	add	sp, #28
   b8e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b8e22:	2301      	movs	r3, #1
   b8e24:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b8e26:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b8e2a:	fa5f f989 	uxtb.w	r9, r9
   b8e2e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8e32:	45aa      	cmp	sl, r5
   b8e34:	d012      	beq.n	b8e5c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b8e36:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b8e3a:	4631      	mov	r1, r6
   b8e3c:	1d38      	adds	r0, r7, #4
   b8e3e:	f7ff fe3d 	bl	b8abc <_ZNK5spark6detail9LogFilter5levelEPKc>
   b8e42:	4581      	cmp	r9, r0
   b8e44:	d3f5      	bcc.n	b8e32 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b8e46:	683b      	ldr	r3, [r7, #0]
   b8e48:	9a03      	ldr	r2, [sp, #12]
   b8e4a:	9200      	str	r2, [sp, #0]
   b8e4c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b8e50:	464a      	mov	r2, r9
   b8e52:	4633      	mov	r3, r6
   b8e54:	4641      	mov	r1, r8
   b8e56:	4638      	mov	r0, r7
   b8e58:	47d8      	blx	fp
   b8e5a:	e7ea      	b.n	b8e32 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b8e5c:	2300      	movs	r3, #0
   b8e5e:	7323      	strb	r3, [r4, #12]
   b8e60:	e7d9      	b.n	b8e16 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b8e62:	bf00      	nop
   b8e64:	e000ed00 	.word	0xe000ed00

000b8e68 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b8e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e6c:	469b      	mov	fp, r3
   b8e6e:	4b1a      	ldr	r3, [pc, #104]	; (b8ed8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b8e70:	685b      	ldr	r3, [r3, #4]
   b8e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8e76:	4680      	mov	r8, r0
   b8e78:	4689      	mov	r9, r1
   b8e7a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b8e7c:	b96b      	cbnz	r3, b8e9a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b8e7e:	f7ff fe91 	bl	b8ba4 <_ZN5spark10LogManager8instanceEv>
   b8e82:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8e84:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b8e88:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8e8a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8e8c:	f7ff fd64 	bl	b8958 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b8e90:	7b23      	ldrb	r3, [r4, #12]
   b8e92:	b12b      	cbz	r3, b8ea0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b8e94:	a801      	add	r0, sp, #4
   b8e96:	f7ff ff9e 	bl	b8dd6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b8e9a:	b003      	add	sp, #12
   b8e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b8ea0:	2301      	movs	r3, #1
   b8ea2:	7323      	strb	r3, [r4, #12]
   b8ea4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b8ea8:	b2f6      	uxtb	r6, r6
   b8eaa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8eae:	4555      	cmp	r5, sl
   b8eb0:	d00e      	beq.n	b8ed0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b8eb2:	f855 7b04 	ldr.w	r7, [r5], #4
   b8eb6:	4659      	mov	r1, fp
   b8eb8:	1d38      	adds	r0, r7, #4
   b8eba:	f7ff fdff 	bl	b8abc <_ZNK5spark6detail9LogFilter5levelEPKc>
   b8ebe:	4286      	cmp	r6, r0
   b8ec0:	d3f5      	bcc.n	b8eae <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b8ec2:	683b      	ldr	r3, [r7, #0]
   b8ec4:	464a      	mov	r2, r9
   b8ec6:	68db      	ldr	r3, [r3, #12]
   b8ec8:	4641      	mov	r1, r8
   b8eca:	4638      	mov	r0, r7
   b8ecc:	4798      	blx	r3
   b8ece:	e7ee      	b.n	b8eae <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b8ed0:	2300      	movs	r3, #0
   b8ed2:	7323      	strb	r3, [r4, #12]
   b8ed4:	e7de      	b.n	b8e94 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b8ed6:	bf00      	nop
   b8ed8:	e000ed00 	.word	0xe000ed00

000b8edc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b8edc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8ee0:	4b16      	ldr	r3, [pc, #88]	; (b8f3c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b8ee2:	685b      	ldr	r3, [r3, #4]
   b8ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8ee8:	4605      	mov	r5, r0
   b8eea:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b8eec:	bb1b      	cbnz	r3, b8f36 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b8eee:	f7ff fe59 	bl	b8ba4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b8ef2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b8ef6:	4604      	mov	r4, r0
   b8ef8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8efa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8efc:	f7ff fd2c 	bl	b8958 <_ZN14RecursiveMutex4lockEv.isra.0>
   b8f00:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b8f04:	2446      	movs	r4, #70	; 0x46
   b8f06:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8f0a:	45b0      	cmp	r8, r6
   b8f0c:	d109      	bne.n	b8f22 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b8f0e:	a801      	add	r0, sp, #4
   b8f10:	f7ff ff61 	bl	b8dd6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b8f14:	42a5      	cmp	r5, r4
   b8f16:	bfb4      	ite	lt
   b8f18:	2000      	movlt	r0, #0
   b8f1a:	2001      	movge	r0, #1
}
   b8f1c:	b002      	add	sp, #8
   b8f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b8f22:	f856 0b04 	ldr.w	r0, [r6], #4
   b8f26:	4639      	mov	r1, r7
   b8f28:	3004      	adds	r0, #4
   b8f2a:	f7ff fdc7 	bl	b8abc <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b8f2e:	4284      	cmp	r4, r0
   b8f30:	bfa8      	it	ge
   b8f32:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b8f34:	e7e9      	b.n	b8f0a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b8f36:	2000      	movs	r0, #0
   b8f38:	e7f0      	b.n	b8f1c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b8f3a:	bf00      	nop
   b8f3c:	e000ed00 	.word	0xe000ed00

000b8f40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8f42:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b8f46:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8f48:	4604      	mov	r4, r0
   b8f4a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8f4c:	db0d      	blt.n	b8f6a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b8f4e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b8f50:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8f52:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8f54:	dd04      	ble.n	b8f60 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b8f56:	00b9      	lsls	r1, r7, #2
   b8f58:	f7ff f952 	bl	b8200 <realloc>
            if (!d) {
   b8f5c:	b918      	cbnz	r0, b8f66 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b8f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b8f60:	f7ff f946 	bl	b81f0 <free>
        T* d = nullptr;
   b8f64:	2000      	movs	r0, #0
        data_ = d;
   b8f66:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8f68:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8f6a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8f6c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8f6e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b8f72:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8f74:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b8f78:	1d08      	adds	r0, r1, #4
   b8f7a:	f002 fe7d 	bl	bbc78 <memmove>
    new(p) T(std::move(value));
   b8f7e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b8f82:	6863      	ldr	r3, [r4, #4]
   b8f84:	3301      	adds	r3, #1
   b8f86:	6063      	str	r3, [r4, #4]
    return true;
   b8f88:	2001      	movs	r0, #1
   b8f8a:	e7e8      	b.n	b8f5e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b8f8c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b8f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b8f8e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b8f92:	4604      	mov	r4, r0
   b8f94:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8f96:	9301      	str	r3, [sp, #4]
   b8f98:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b8f9a:	f7ff fcdd 	bl	b8958 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b8f9e:	e9d4 3200 	ldrd	r3, r2, [r4]
   b8fa2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b8fa6:	4293      	cmp	r3, r2
   b8fa8:	4619      	mov	r1, r3
   b8faa:	d00b      	beq.n	b8fc4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b8fac:	6809      	ldr	r1, [r1, #0]
   b8fae:	42a9      	cmp	r1, r5
   b8fb0:	f103 0304 	add.w	r3, r3, #4
   b8fb4:	d1f7      	bne.n	b8fa6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b8fb6:	a801      	add	r0, sp, #4
   b8fb8:	f7ff ff0d 	bl	b8dd6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b8fbc:	2500      	movs	r5, #0
}
   b8fbe:	4628      	mov	r0, r5
   b8fc0:	b003      	add	sp, #12
   b8fc2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b8fc4:	4629      	mov	r1, r5
   b8fc6:	4620      	mov	r0, r4
   b8fc8:	f7ff ffba 	bl	b8f40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b8fcc:	4605      	mov	r5, r0
   b8fce:	2800      	cmp	r0, #0
   b8fd0:	d0f1      	beq.n	b8fb6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b8fd2:	6863      	ldr	r3, [r4, #4]
   b8fd4:	2b01      	cmp	r3, #1
   b8fd6:	d101      	bne.n	b8fdc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b8fd8:	f7ff fe00 	bl	b8bdc <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8fdc:	a801      	add	r0, sp, #4
   b8fde:	f7ff fefa 	bl	b8dd6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b8fe2:	e7ec      	b.n	b8fbe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b8fe4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8fe4:	b570      	push	{r4, r5, r6, lr}
   b8fe6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b8fe8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8fec:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b8fee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b8ff2:	4282      	cmp	r2, r0
   b8ff4:	d00f      	beq.n	b9016 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b8ff6:	4601      	mov	r1, r0
            if (*p == value) {
   b8ff8:	681d      	ldr	r5, [r3, #0]
   b8ffa:	f851 6b04 	ldr.w	r6, [r1], #4
   b8ffe:	42ae      	cmp	r6, r5
   b9000:	d107      	bne.n	b9012 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9002:	1a52      	subs	r2, r2, r1
   b9004:	f002 fe38 	bl	bbc78 <memmove>
    --size_;
   b9008:	6863      	ldr	r3, [r4, #4]
   b900a:	3b01      	subs	r3, #1
   b900c:	6063      	str	r3, [r4, #4]
    return true;
   b900e:	2001      	movs	r0, #1
}
   b9010:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b9012:	4608      	mov	r0, r1
   b9014:	e7ed      	b.n	b8ff2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b9016:	2000      	movs	r0, #0
   b9018:	e7fa      	b.n	b9010 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b901a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b901a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b901c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9020:	4604      	mov	r4, r0
   b9022:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b9024:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9026:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b9028:	f7ff fc96 	bl	b8958 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b902c:	a901      	add	r1, sp, #4
   b902e:	4620      	mov	r0, r4
   b9030:	f7ff ffd8 	bl	b8fe4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b9034:	b118      	cbz	r0, b903e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b9036:	6863      	ldr	r3, [r4, #4]
   b9038:	b90b      	cbnz	r3, b903e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b903a:	f7ff fddb 	bl	b8bf4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b903e:	a803      	add	r0, sp, #12
   b9040:	f7ff fec9 	bl	b8dd6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9044:	b004      	add	sp, #16
   b9046:	bd10      	pop	{r4, pc}

000b9048 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b9048:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b904a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b904e:	2318      	movs	r3, #24
   b9050:	4604      	mov	r4, r0
   b9052:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b9056:	42ae      	cmp	r6, r5
   b9058:	d015      	beq.n	b9086 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b905a:	f105 0110 	add.w	r1, r5, #16
   b905e:	4620      	mov	r0, r4
   b9060:	f7ff ffc0 	bl	b8fe4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b9064:	6863      	ldr	r3, [r4, #4]
   b9066:	b90b      	cbnz	r3, b906c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b9068:	f7ff fdc4 	bl	b8bf4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b906c:	69e0      	ldr	r0, [r4, #28]
   b906e:	6929      	ldr	r1, [r5, #16]
   b9070:	6803      	ldr	r3, [r0, #0]
   b9072:	68db      	ldr	r3, [r3, #12]
   b9074:	4798      	blx	r3
        if (h.stream) {
   b9076:	6969      	ldr	r1, [r5, #20]
   b9078:	b119      	cbz	r1, b9082 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b907a:	6a20      	ldr	r0, [r4, #32]
   b907c:	6803      	ldr	r3, [r0, #0]
   b907e:	68db      	ldr	r3, [r3, #12]
   b9080:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b9082:	3518      	adds	r5, #24
   b9084:	e7e7      	b.n	b9056 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b9086:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b908a:	2618      	movs	r6, #24
   b908c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9090:	42ae      	cmp	r6, r5
   b9092:	d004      	beq.n	b909e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b9094:	4628      	mov	r0, r5
   b9096:	f000 feff 	bl	b9e98 <_ZN6StringD1Ev>
   b909a:	3518      	adds	r5, #24
   b909c:	e7f8      	b.n	b9090 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b909e:	2300      	movs	r3, #0
   b90a0:	6163      	str	r3, [r4, #20]
}
   b90a2:	bd70      	pop	{r4, r5, r6, pc}

000b90a4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b90a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b90a6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b90a8:	f7ff fda4 	bl	b8bf4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b90ac:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b90b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b90b2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b90b4:	f7ff fc50 	bl	b8958 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b90b8:	4620      	mov	r0, r4
   b90ba:	f7ff ffc5 	bl	b9048 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b90be:	a801      	add	r0, sp, #4
   b90c0:	f7ff fe89 	bl	b8dd6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b90c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b90c6:	b108      	cbz	r0, b90cc <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b90c8:	f7fe fe06 	bl	b7cd8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b90cc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b90d0:	2618      	movs	r6, #24
   b90d2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b90d6:	42ae      	cmp	r6, r5
   b90d8:	d004      	beq.n	b90e4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b90da:	4628      	mov	r0, r5
   b90dc:	f000 fedc 	bl	b9e98 <_ZN6StringD1Ev>
   b90e0:	3518      	adds	r5, #24
   b90e2:	e7f8      	b.n	b90d6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b90e4:	6920      	ldr	r0, [r4, #16]
   b90e6:	f7ff f883 	bl	b81f0 <free>
   b90ea:	6820      	ldr	r0, [r4, #0]
   b90ec:	f7ff f880 	bl	b81f0 <free>
}
   b90f0:	4620      	mov	r0, r4
   b90f2:	b002      	add	sp, #8
   b90f4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b90f8 <__tcf_2>:
    static LogManager mgr;
   b90f8:	4801      	ldr	r0, [pc, #4]	; (b9100 <__tcf_2+0x8>)
   b90fa:	f7ff bfd3 	b.w	b90a4 <_ZN5spark10LogManagerD1Ev>
   b90fe:	bf00      	nop
   b9100:	2003e6b0 	.word	0x2003e6b0

000b9104 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b9104:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9108:	4604      	mov	r4, r0
   b910a:	460d      	mov	r5, r1
   b910c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b910e:	d915      	bls.n	b913c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b9110:	4290      	cmp	r0, r2
   b9112:	d214      	bcs.n	b913e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b9114:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b9118:	1a75      	subs	r5, r6, r1
   b911a:	f1a1 0714 	sub.w	r7, r1, #20
   b911e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9120:	42b7      	cmp	r7, r6
   b9122:	d01a      	beq.n	b915a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b9124:	b11c      	cbz	r4, b912e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b9126:	4631      	mov	r1, r6
   b9128:	4620      	mov	r0, r4
   b912a:	f7ff fc78 	bl	b8a1e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b912e:	f106 0008 	add.w	r0, r6, #8
   b9132:	f7ff fdf9 	bl	b8d28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b9136:	3e14      	subs	r6, #20
   b9138:	3c14      	subs	r4, #20
   b913a:	e7f1      	b.n	b9120 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b913c:	d00d      	beq.n	b915a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b913e:	42b5      	cmp	r5, r6
   b9140:	d00b      	beq.n	b915a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b9142:	b11c      	cbz	r4, b914c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b9144:	4629      	mov	r1, r5
   b9146:	4620      	mov	r0, r4
   b9148:	f7ff fc69 	bl	b8a1e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b914c:	f105 0008 	add.w	r0, r5, #8
   b9150:	f7ff fdea 	bl	b8d28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b9154:	3514      	adds	r5, #20
   b9156:	3414      	adds	r4, #20
   b9158:	e7f1      	b.n	b913e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b915a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b915c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b915c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b915e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9160:	4604      	mov	r4, r0
   b9162:	460d      	mov	r5, r1
   b9164:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9166:	d914      	bls.n	b9192 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b9168:	4290      	cmp	r0, r2
   b916a:	d213      	bcs.n	b9194 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b916c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b9170:	1a75      	subs	r5, r6, r1
   b9172:	f1a1 0710 	sub.w	r7, r1, #16
   b9176:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9178:	42b7      	cmp	r7, r6
   b917a:	d018      	beq.n	b91ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b917c:	b11c      	cbz	r4, b9186 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b917e:	4631      	mov	r1, r6
   b9180:	4620      	mov	r0, r4
   b9182:	f000 ff05 	bl	b9f90 <_ZN6StringC1EOS_>
                end->~T();
   b9186:	4630      	mov	r0, r6
   b9188:	f000 fe86 	bl	b9e98 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b918c:	3e10      	subs	r6, #16
   b918e:	3c10      	subs	r4, #16
   b9190:	e7f2      	b.n	b9178 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b9192:	d00c      	beq.n	b91ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b9194:	42b5      	cmp	r5, r6
   b9196:	d00a      	beq.n	b91ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b9198:	b11c      	cbz	r4, b91a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b919a:	4629      	mov	r1, r5
   b919c:	4620      	mov	r0, r4
   b919e:	f000 fef7 	bl	b9f90 <_ZN6StringC1EOS_>
                p->~T();
   b91a2:	4628      	mov	r0, r5
   b91a4:	f000 fe78 	bl	b9e98 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b91a8:	3510      	adds	r5, #16
   b91aa:	3410      	adds	r4, #16
   b91ac:	e7f2      	b.n	b9194 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b91ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b91b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b91b0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b91b2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b91b4:	4605      	mov	r5, r0
        if (n > 0) {
   b91b6:	dd11      	ble.n	b91dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b91b8:	0130      	lsls	r0, r6, #4
   b91ba:	f7ff f811 	bl	b81e0 <malloc>
            if (!d) {
   b91be:	4604      	mov	r4, r0
   b91c0:	b158      	cbz	r0, b91da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b91c2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b91c6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b91ca:	f7ff ffc7 	bl	b915c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b91ce:	6828      	ldr	r0, [r5, #0]
   b91d0:	f7ff f80e 	bl	b81f0 <free>
        data_ = d;
   b91d4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b91d6:	60ae      	str	r6, [r5, #8]
        return true;
   b91d8:	2001      	movs	r0, #1
    }
   b91da:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b91dc:	2400      	movs	r4, #0
   b91de:	e7f6      	b.n	b91ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b91e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b91e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b91e4:	4690      	mov	r8, r2
   b91e6:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b91e8:	2300      	movs	r3, #0
   b91ea:	9103      	str	r1, [sp, #12]
    return size_;
   b91ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b91f0:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b91f2:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b91f4:	4299      	cmp	r1, r3
        capacity_(0) {
   b91f6:	e9c0 3300 	strd	r3, r3, [r0]
   b91fa:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b91fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b9202:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9206:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9208:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b920a:	dc23      	bgt.n	b9254 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b920c:	e9d8 5700 	ldrd	r5, r7, [r8]
   b9210:	2314      	movs	r3, #20
   b9212:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b9216:	42af      	cmp	r7, r5
   b9218:	d03b      	beq.n	b9292 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b921a:	4629      	mov	r1, r5
   b921c:	a80b      	add	r0, sp, #44	; 0x2c
   b921e:	f000 feb7 	bl	b9f90 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b9222:	a90b      	add	r1, sp, #44	; 0x2c
   b9224:	a80f      	add	r0, sp, #60	; 0x3c
   b9226:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b9228:	f000 feb2 	bl	b9f90 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b922c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b9230:	4299      	cmp	r1, r3
   b9232:	da1b      	bge.n	b926c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b9234:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b9236:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b9238:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b923c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b9240:	4631      	mov	r1, r6
   b9242:	f106 0010 	add.w	r0, r6, #16
   b9246:	f7ff ff89 	bl	b915c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b924a:	b9ee      	cbnz	r6, b9288 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b924c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b924e:	3301      	adds	r3, #1
   b9250:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b9252:	e011      	b.n	b9278 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b9254:	a808      	add	r0, sp, #32
   b9256:	f7ff ffab 	bl	b91b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b925a:	2800      	cmp	r0, #0
   b925c:	d1d6      	bne.n	b920c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b925e:	a808      	add	r0, sp, #32
   b9260:	f7ff f815 	bl	b828e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9264:	4620      	mov	r0, r4
   b9266:	b015      	add	sp, #84	; 0x54
   b9268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b926c:	3101      	adds	r1, #1
   b926e:	a808      	add	r0, sp, #32
   b9270:	f7ff ff9e 	bl	b91b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9274:	2800      	cmp	r0, #0
   b9276:	d1dd      	bne.n	b9234 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b9278:	a80f      	add	r0, sp, #60	; 0x3c
   b927a:	f000 fe0d 	bl	b9e98 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b927e:	a80b      	add	r0, sp, #44	; 0x2c
   b9280:	f000 fe0a 	bl	b9e98 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b9284:	3514      	adds	r5, #20
   b9286:	e7c6      	b.n	b9216 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b9288:	a90f      	add	r1, sp, #60	; 0x3c
   b928a:	4630      	mov	r0, r6
   b928c:	f000 fe80 	bl	b9f90 <_ZN6StringC1EOS_>
   b9290:	e7dc      	b.n	b924c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b9292:	2600      	movs	r6, #0
   b9294:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b9298:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b929a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b929e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b92a2:	429e      	cmp	r6, r3
   b92a4:	da7c      	bge.n	b93a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b92a6:	0133      	lsls	r3, r6, #4
   b92a8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b92aa:	9306      	str	r3, [sp, #24]
        if (!category) {
   b92ac:	b90b      	cbnz	r3, b92b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b92ae:	3601      	adds	r6, #1
   b92b0:	e7f5      	b.n	b929e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b92b2:	2300      	movs	r3, #0
   b92b4:	9307      	str	r3, [sp, #28]
   b92b6:	fb09 f306 	mul.w	r3, r9, r6
   b92ba:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b92bc:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b92be:	a907      	add	r1, sp, #28
   b92c0:	a806      	add	r0, sp, #24
   b92c2:	f7ff fb22 	bl	b890a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b92c6:	4682      	mov	sl, r0
   b92c8:	2800      	cmp	r0, #0
   b92ca:	d0f0      	beq.n	b92ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b92cc:	f04f 0300 	mov.w	r3, #0
   b92d0:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b92d4:	4601      	mov	r1, r0
   b92d6:	9a07      	ldr	r2, [sp, #28]
   b92d8:	f10d 0317 	add.w	r3, sp, #23
   b92dc:	4628      	mov	r0, r5
   b92de:	f7ff fbb1 	bl	b8a44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b92e2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b92e6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b92e8:	2f00      	cmp	r7, #0
   b92ea:	d14a      	bne.n	b9382 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b92ec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b92f0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b92f4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b92f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b92fc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b9300:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b9304:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9306:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b930a:	4293      	cmp	r3, r2
   b930c:	db17      	blt.n	b933e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b930e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b9312:	f1ba 0f00 	cmp.w	sl, #0
   b9316:	dd30      	ble.n	b937a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b9318:	fb09 f00a 	mul.w	r0, r9, sl
   b931c:	f7fe ff60 	bl	b81e0 <malloc>
            if (!d) {
   b9320:	4683      	mov	fp, r0
   b9322:	b360      	cbz	r0, b937e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b9324:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9328:	fb09 1202 	mla	r2, r9, r2, r1
   b932c:	f7ff feea 	bl	b9104 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b9330:	6828      	ldr	r0, [r5, #0]
   b9332:	f7fe ff5d 	bl	b81f0 <free>
        data_ = d;
   b9336:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b933a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b933e:	682b      	ldr	r3, [r5, #0]
   b9340:	9a01      	ldr	r2, [sp, #4]
   b9342:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b9346:	686a      	ldr	r2, [r5, #4]
   b9348:	4651      	mov	r1, sl
   b934a:	fb09 3202 	mla	r2, r9, r2, r3
   b934e:	f10a 0014 	add.w	r0, sl, #20
   b9352:	f7ff fed7 	bl	b9104 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b9356:	f1ba 0f00 	cmp.w	sl, #0
   b935a:	d003      	beq.n	b9364 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b935c:	a90f      	add	r1, sp, #60	; 0x3c
   b935e:	4650      	mov	r0, sl
   b9360:	f7ff fb5d 	bl	b8a1e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b9364:	686b      	ldr	r3, [r5, #4]
   b9366:	3301      	adds	r3, #1
   b9368:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b936a:	a811      	add	r0, sp, #68	; 0x44
   b936c:	f7ff fcdc 	bl	b8d28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9370:	b13f      	cbz	r7, b9382 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b9372:	a80b      	add	r0, sp, #44	; 0x2c
   b9374:	f7ff fcd8 	bl	b8d28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9378:	e771      	b.n	b925e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b937a:	46bb      	mov	fp, r7
   b937c:	e7d8      	b.n	b9330 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b937e:	2701      	movs	r7, #1
   b9380:	e7f3      	b.n	b936a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b9382:	9b01      	ldr	r3, [sp, #4]
   b9384:	682d      	ldr	r5, [r5, #0]
   b9386:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b938a:	9b06      	ldr	r3, [sp, #24]
   b938c:	781b      	ldrb	r3, [r3, #0]
   b938e:	b92b      	cbnz	r3, b939c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b9390:	f8d8 3000 	ldr.w	r3, [r8]
   b9394:	9a02      	ldr	r2, [sp, #8]
   b9396:	4413      	add	r3, r2
   b9398:	7c1b      	ldrb	r3, [r3, #16]
   b939a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b939c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b939e:	e78e      	b.n	b92be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b93a0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b93a2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b93a4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b93a6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b93a8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b93aa:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b93ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b93ae:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b93b0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b93b2:	60a2      	str	r2, [r4, #8]
   b93b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b93b6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b93b8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b93ba:	60e2      	str	r2, [r4, #12]
   b93bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b93be:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b93c0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b93c2:	6122      	str	r2, [r4, #16]
   b93c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b93c6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b93c8:	9b03      	ldr	r3, [sp, #12]
   b93ca:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b93cc:	6162      	str	r2, [r4, #20]
   b93ce:	7623      	strb	r3, [r4, #24]
   b93d0:	e7cf      	b.n	b9372 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b93d4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b93d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b93d6:	4604      	mov	r4, r0
   b93d8:	b087      	sub	sp, #28
   b93da:	460d      	mov	r5, r1
        filter_(level, filters) {
   b93dc:	4626      	mov	r6, r4
        stream_(&stream) {
   b93de:	4619      	mov	r1, r3
   b93e0:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b93e2:	4617      	mov	r7, r2
        stream_(&stream) {
   b93e4:	f7fb ff2b 	bl	b523e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b93e8:	4b0b      	ldr	r3, [pc, #44]	; (b9418 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b93ea:	f846 3b04 	str.w	r3, [r6], #4
   b93ee:	4669      	mov	r1, sp
   b93f0:	a803      	add	r0, sp, #12
   b93f2:	f7fb ff24 	bl	b523e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b93f6:	aa03      	add	r2, sp, #12
   b93f8:	4639      	mov	r1, r7
   b93fa:	4630      	mov	r0, r6
   b93fc:	f7ff fef0 	bl	b91e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9400:	a803      	add	r0, sp, #12
   b9402:	f7fb fedb 	bl	b51bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b9406:	4668      	mov	r0, sp
   b9408:	f7fb fed8 	bl	b51bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b940c:	4b03      	ldr	r3, [pc, #12]	; (b941c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b940e:	6023      	str	r3, [r4, #0]
}
   b9410:	4620      	mov	r0, r4
        stream_(&stream) {
   b9412:	6225      	str	r5, [r4, #32]
}
   b9414:	b007      	add	sp, #28
   b9416:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9418:	000bc440 	.word	0x000bc440
   b941c:	000bc584 	.word	0x000bc584

000b9420 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b9420:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9422:	460f      	mov	r7, r1
   b9424:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9426:	491d      	ldr	r1, [pc, #116]	; (b949c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b9428:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b942a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b942c:	4616      	mov	r6, r2
   b942e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9430:	f002 fcc7 	bl	bbdc2 <strcmp>
   b9434:	b9c0      	cbnz	r0, b9468 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b9436:	b1a4      	cbz	r4, b9462 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b9438:	4629      	mov	r1, r5
   b943a:	a801      	add	r0, sp, #4
   b943c:	f7ff fcbc 	bl	b8db8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b9440:	4917      	ldr	r1, [pc, #92]	; (b94a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b9442:	2024      	movs	r0, #36	; 0x24
   b9444:	f001 f9be 	bl	ba7c4 <_ZnwjRKSt9nothrow_t>
   b9448:	4605      	mov	r5, r0
   b944a:	b130      	cbz	r0, b945a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b944c:	ab01      	add	r3, sp, #4
   b944e:	4632      	mov	r2, r6
   b9450:	4621      	mov	r1, r4
   b9452:	f7ff ffbf 	bl	b93d4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9456:	4b13      	ldr	r3, [pc, #76]	; (b94a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b9458:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b945a:	a801      	add	r0, sp, #4
   b945c:	f7fb feae 	bl	b51bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b9460:	462c      	mov	r4, r5
}
   b9462:	4620      	mov	r0, r4
   b9464:	b005      	add	sp, #20
   b9466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b9468:	490f      	ldr	r1, [pc, #60]	; (b94a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b946a:	4638      	mov	r0, r7
   b946c:	f002 fca9 	bl	bbdc2 <strcmp>
   b9470:	b990      	cbnz	r0, b9498 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b9472:	2c00      	cmp	r4, #0
   b9474:	d0f5      	beq.n	b9462 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b9476:	4629      	mov	r1, r5
   b9478:	a801      	add	r0, sp, #4
   b947a:	f7ff fc9d 	bl	b8db8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b947e:	4908      	ldr	r1, [pc, #32]	; (b94a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b9480:	2024      	movs	r0, #36	; 0x24
   b9482:	f001 f99f 	bl	ba7c4 <_ZnwjRKSt9nothrow_t>
   b9486:	4605      	mov	r5, r0
   b9488:	2800      	cmp	r0, #0
   b948a:	d0e6      	beq.n	b945a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b948c:	ab01      	add	r3, sp, #4
   b948e:	4632      	mov	r2, r6
   b9490:	4621      	mov	r1, r4
   b9492:	f7ff ff9f 	bl	b93d4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9496:	e7e0      	b.n	b945a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b9498:	2400      	movs	r4, #0
   b949a:	e7e2      	b.n	b9462 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b949c:	000bc509 	.word	0x000bc509
   b94a0:	000bc6e4 	.word	0x000bc6e4
   b94a4:	000bc59c 	.word	0x000bc59c
   b94a8:	000bc50d 	.word	0x000bc50d

000b94ac <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b94ac:	4b01      	ldr	r3, [pc, #4]	; (b94b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b94ae:	4a02      	ldr	r2, [pc, #8]	; (b94b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b94b0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b94b2:	4770      	bx	lr
   b94b4:	2003e6ac 	.word	0x2003e6ac
   b94b8:	000bc51e 	.word	0x000bc51e

000b94bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b94bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b94c0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b94c2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b94c6:	4604      	mov	r4, r0
   b94c8:	460e      	mov	r6, r1
   b94ca:	4617      	mov	r7, r2
   b94cc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b94ce:	f000 ff2d 	bl	ba32c <_Z16_fetch_usbserialv>
   b94d2:	4581      	cmp	r9, r0
   b94d4:	d04c      	beq.n	b9570 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b94d6:	792b      	ldrb	r3, [r5, #4]
   b94d8:	0719      	lsls	r1, r3, #28
   b94da:	d504      	bpl.n	b94e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b94dc:	696a      	ldr	r2, [r5, #20]
   b94de:	4954      	ldr	r1, [pc, #336]	; (b9630 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b94e0:	4620      	mov	r0, r4
   b94e2:	f7ff fa8d 	bl	b8a00 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b94e6:	f1b8 0f00 	cmp.w	r8, #0
   b94ea:	d00d      	beq.n	b9508 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b94ec:	215b      	movs	r1, #91	; 0x5b
   b94ee:	4620      	mov	r0, r4
   b94f0:	f7ff fa7a 	bl	b89e8 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b94f4:	4641      	mov	r1, r8
   b94f6:	4620      	mov	r0, r4
   b94f8:	f7ff fa67 	bl	b89ca <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b94fc:	6823      	ldr	r3, [r4, #0]
   b94fe:	494d      	ldr	r1, [pc, #308]	; (b9634 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b9500:	68db      	ldr	r3, [r3, #12]
   b9502:	2202      	movs	r2, #2
   b9504:	4620      	mov	r0, r4
   b9506:	4798      	blx	r3
    if (attr.has_file) {
   b9508:	792b      	ldrb	r3, [r5, #4]
   b950a:	07da      	lsls	r2, r3, #31
   b950c:	d523      	bpl.n	b9556 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b950e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b9512:	212f      	movs	r1, #47	; 0x2f
   b9514:	4640      	mov	r0, r8
   b9516:	f002 fc95 	bl	bbe44 <strrchr>
    if (s1) {
   b951a:	b108      	cbz	r0, b9520 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b951c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b9520:	4641      	mov	r1, r8
   b9522:	4620      	mov	r0, r4
   b9524:	f7ff fa51 	bl	b89ca <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b9528:	792b      	ldrb	r3, [r5, #4]
   b952a:	079b      	lsls	r3, r3, #30
   b952c:	d508      	bpl.n	b9540 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b952e:	213a      	movs	r1, #58	; 0x3a
   b9530:	4620      	mov	r0, r4
   b9532:	f7ff fa59 	bl	b89e8 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b9536:	68ea      	ldr	r2, [r5, #12]
   b9538:	493f      	ldr	r1, [pc, #252]	; (b9638 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b953a:	4620      	mov	r0, r4
   b953c:	f7ff fa60 	bl	b8a00 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b9540:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b9542:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b9544:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b9548:	68db      	ldr	r3, [r3, #12]
   b954a:	bf14      	ite	ne
   b954c:	493b      	ldrne	r1, [pc, #236]	; (b963c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b954e:	493c      	ldreq	r1, [pc, #240]	; (b9640 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b9550:	2202      	movs	r2, #2
            write(": ", 2);
   b9552:	4620      	mov	r0, r4
   b9554:	4798      	blx	r3
    if (attr.has_function) {
   b9556:	792b      	ldrb	r3, [r5, #4]
   b9558:	0758      	lsls	r0, r3, #29
   b955a:	d51d      	bpl.n	b9598 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b955c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b955e:	460b      	mov	r3, r1
   b9560:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b9562:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9566:	b160      	cbz	r0, b9582 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b9568:	2820      	cmp	r0, #32
   b956a:	d108      	bne.n	b957e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b956c:	4619      	mov	r1, r3
   b956e:	e7f7      	b.n	b9560 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b9570:	4834      	ldr	r0, [pc, #208]	; (b9644 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b9572:	f000 f966 	bl	b9842 <_ZN5spark12NetworkClass9listeningEv>
   b9576:	2800      	cmp	r0, #0
   b9578:	d0ad      	beq.n	b94d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b957a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b957e:	2828      	cmp	r0, #40	; 0x28
   b9580:	d1ee      	bne.n	b9560 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b9582:	6823      	ldr	r3, [r4, #0]
   b9584:	1a52      	subs	r2, r2, r1
   b9586:	68db      	ldr	r3, [r3, #12]
   b9588:	4620      	mov	r0, r4
   b958a:	4798      	blx	r3
        write("(): ", 4);
   b958c:	6823      	ldr	r3, [r4, #0]
   b958e:	492e      	ldr	r1, [pc, #184]	; (b9648 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b9590:	68db      	ldr	r3, [r3, #12]
   b9592:	2204      	movs	r2, #4
   b9594:	4620      	mov	r0, r4
   b9596:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b9598:	2100      	movs	r1, #0
   b959a:	4638      	mov	r0, r7
   b959c:	f7fe fd6c 	bl	b8078 <log_level_name>
   b95a0:	4601      	mov	r1, r0
    write(s);
   b95a2:	4620      	mov	r0, r4
   b95a4:	f7ff fa11 	bl	b89ca <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b95a8:	6823      	ldr	r3, [r4, #0]
   b95aa:	4925      	ldr	r1, [pc, #148]	; (b9640 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b95ac:	68db      	ldr	r3, [r3, #12]
   b95ae:	2202      	movs	r2, #2
   b95b0:	4620      	mov	r0, r4
   b95b2:	4798      	blx	r3
    if (msg) {
   b95b4:	b11e      	cbz	r6, b95be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b95b6:	4631      	mov	r1, r6
   b95b8:	4620      	mov	r0, r4
   b95ba:	f7ff fa06 	bl	b89ca <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b95be:	792b      	ldrb	r3, [r5, #4]
   b95c0:	f013 0f30 	tst.w	r3, #48	; 0x30
   b95c4:	d02c      	beq.n	b9620 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b95c6:	6823      	ldr	r3, [r4, #0]
   b95c8:	4920      	ldr	r1, [pc, #128]	; (b964c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b95ca:	68db      	ldr	r3, [r3, #12]
   b95cc:	2202      	movs	r2, #2
   b95ce:	4620      	mov	r0, r4
   b95d0:	4798      	blx	r3
        if (attr.has_code) {
   b95d2:	792b      	ldrb	r3, [r5, #4]
   b95d4:	06d9      	lsls	r1, r3, #27
   b95d6:	d50a      	bpl.n	b95ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b95d8:	6823      	ldr	r3, [r4, #0]
   b95da:	491d      	ldr	r1, [pc, #116]	; (b9650 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b95dc:	68db      	ldr	r3, [r3, #12]
   b95de:	2207      	movs	r2, #7
   b95e0:	4620      	mov	r0, r4
   b95e2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b95e4:	69aa      	ldr	r2, [r5, #24]
   b95e6:	491b      	ldr	r1, [pc, #108]	; (b9654 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b95e8:	4620      	mov	r0, r4
   b95ea:	f7ff fa09 	bl	b8a00 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b95ee:	792b      	ldrb	r3, [r5, #4]
   b95f0:	069a      	lsls	r2, r3, #26
   b95f2:	d511      	bpl.n	b9618 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b95f4:	06db      	lsls	r3, r3, #27
   b95f6:	d505      	bpl.n	b9604 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b95f8:	6823      	ldr	r3, [r4, #0]
   b95fa:	4910      	ldr	r1, [pc, #64]	; (b963c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b95fc:	68db      	ldr	r3, [r3, #12]
   b95fe:	2202      	movs	r2, #2
   b9600:	4620      	mov	r0, r4
   b9602:	4798      	blx	r3
            write("details = ", 10);
   b9604:	6823      	ldr	r3, [r4, #0]
   b9606:	4914      	ldr	r1, [pc, #80]	; (b9658 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b9608:	68db      	ldr	r3, [r3, #12]
   b960a:	4620      	mov	r0, r4
   b960c:	220a      	movs	r2, #10
   b960e:	4798      	blx	r3
            write(attr.details);
   b9610:	69e9      	ldr	r1, [r5, #28]
   b9612:	4620      	mov	r0, r4
   b9614:	f7ff f9d9 	bl	b89ca <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b9618:	215d      	movs	r1, #93	; 0x5d
   b961a:	4620      	mov	r0, r4
   b961c:	f7ff f9e4 	bl	b89e8 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b9620:	6823      	ldr	r3, [r4, #0]
   b9622:	490e      	ldr	r1, [pc, #56]	; (b965c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b9624:	68db      	ldr	r3, [r3, #12]
   b9626:	4620      	mov	r0, r4
   b9628:	2202      	movs	r2, #2
}
   b962a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b962e:	4718      	bx	r3
   b9630:	000bc522 	.word	0x000bc522
   b9634:	000bc529 	.word	0x000bc529
   b9638:	000bc12c 	.word	0x000bc12c
   b963c:	000bc52c 	.word	0x000bc52c
   b9640:	000bc531 	.word	0x000bc531
   b9644:	2003e6d8 	.word	0x2003e6d8
   b9648:	000bc52f 	.word	0x000bc52f
   b964c:	000bc534 	.word	0x000bc534
   b9650:	000bc537 	.word	0x000bc537
   b9654:	000bc53f 	.word	0x000bc53f
   b9658:	000bc542 	.word	0x000bc542
   b965c:	000bc54d 	.word	0x000bc54d

000b9660 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9664:	b085      	sub	sp, #20
    return stream_;
   b9666:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b966a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b966c:	4605      	mov	r5, r0
   b966e:	460f      	mov	r7, r1
   b9670:	4690      	mov	r8, r2
   b9672:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b9674:	f000 fe5a 	bl	ba32c <_Z16_fetch_usbserialv>
   b9678:	4581      	cmp	r9, r0
   b967a:	d105      	bne.n	b9688 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b967c:	4849      	ldr	r0, [pc, #292]	; (b97a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b967e:	f000 f8e0 	bl	b9842 <_ZN5spark12NetworkClass9listeningEv>
   b9682:	2800      	cmp	r0, #0
   b9684:	f040 808a 	bne.w	b979c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b9688:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b968a:	4a47      	ldr	r2, [pc, #284]	; (b97a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b968c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b968e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b9692:	a801      	add	r0, sp, #4
        strm_(stream) {
   b9694:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b9696:	f88d 9008 	strb.w	r9, [sp, #8]
   b969a:	f7ff f878 	bl	b878e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b969e:	4649      	mov	r1, r9
   b96a0:	4640      	mov	r0, r8
   b96a2:	f7fe fce9 	bl	b8078 <log_level_name>
    json.name("l", 1).value(s);
   b96a6:	4941      	ldr	r1, [pc, #260]	; (b97ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b96a8:	4680      	mov	r8, r0
   b96aa:	2201      	movs	r2, #1
   b96ac:	a801      	add	r0, sp, #4
   b96ae:	f7ff f8fd 	bl	b88ac <_ZN5spark10JSONWriter4nameEPKcj>
   b96b2:	4641      	mov	r1, r8
   b96b4:	f7ff f97b 	bl	b89ae <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b96b8:	b13f      	cbz	r7, b96ca <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b96ba:	493d      	ldr	r1, [pc, #244]	; (b97b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b96bc:	2201      	movs	r2, #1
   b96be:	a801      	add	r0, sp, #4
   b96c0:	f7ff f8f4 	bl	b88ac <_ZN5spark10JSONWriter4nameEPKcj>
   b96c4:	4639      	mov	r1, r7
   b96c6:	f7ff f972 	bl	b89ae <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b96ca:	b13e      	cbz	r6, b96dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b96cc:	4939      	ldr	r1, [pc, #228]	; (b97b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b96ce:	2201      	movs	r2, #1
   b96d0:	a801      	add	r0, sp, #4
   b96d2:	f7ff f8eb 	bl	b88ac <_ZN5spark10JSONWriter4nameEPKcj>
   b96d6:	4631      	mov	r1, r6
   b96d8:	f7ff f969 	bl	b89ae <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b96dc:	7923      	ldrb	r3, [r4, #4]
   b96de:	07df      	lsls	r7, r3, #31
   b96e0:	d50e      	bpl.n	b9700 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b96e2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b96e4:	212f      	movs	r1, #47	; 0x2f
   b96e6:	4630      	mov	r0, r6
   b96e8:	f002 fbac 	bl	bbe44 <strrchr>
    if (s1) {
   b96ec:	b100      	cbz	r0, b96f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b96ee:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b96f0:	4931      	ldr	r1, [pc, #196]	; (b97b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b96f2:	2201      	movs	r2, #1
   b96f4:	a801      	add	r0, sp, #4
   b96f6:	f7ff f8d9 	bl	b88ac <_ZN5spark10JSONWriter4nameEPKcj>
   b96fa:	4631      	mov	r1, r6
   b96fc:	f7ff f957 	bl	b89ae <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b9700:	7923      	ldrb	r3, [r4, #4]
   b9702:	079e      	lsls	r6, r3, #30
   b9704:	d507      	bpl.n	b9716 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b9706:	492d      	ldr	r1, [pc, #180]	; (b97bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b9708:	2202      	movs	r2, #2
   b970a:	a801      	add	r0, sp, #4
   b970c:	f7ff f8ce 	bl	b88ac <_ZN5spark10JSONWriter4nameEPKcj>
   b9710:	68e1      	ldr	r1, [r4, #12]
   b9712:	f7ff f849 	bl	b87a8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b9716:	7923      	ldrb	r3, [r4, #4]
   b9718:	0758      	lsls	r0, r3, #29
   b971a:	d514      	bpl.n	b9746 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b971c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b971e:	4633      	mov	r3, r6
   b9720:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b9722:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9726:	b12a      	cbz	r2, b9734 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b9728:	2a20      	cmp	r2, #32
   b972a:	d101      	bne.n	b9730 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b972c:	461e      	mov	r6, r3
   b972e:	e7f7      	b.n	b9720 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b9730:	2a28      	cmp	r2, #40	; 0x28
   b9732:	d1f5      	bne.n	b9720 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b9734:	4922      	ldr	r1, [pc, #136]	; (b97c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b9736:	2202      	movs	r2, #2
   b9738:	a801      	add	r0, sp, #4
   b973a:	f7ff f8b7 	bl	b88ac <_ZN5spark10JSONWriter4nameEPKcj>
   b973e:	1bba      	subs	r2, r7, r6
   b9740:	4631      	mov	r1, r6
   b9742:	f7ff f8c3 	bl	b88cc <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b9746:	7923      	ldrb	r3, [r4, #4]
   b9748:	0719      	lsls	r1, r3, #28
   b974a:	d507      	bpl.n	b975c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b974c:	491d      	ldr	r1, [pc, #116]	; (b97c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b974e:	2201      	movs	r2, #1
   b9750:	a801      	add	r0, sp, #4
   b9752:	f7ff f8ab 	bl	b88ac <_ZN5spark10JSONWriter4nameEPKcj>
   b9756:	6961      	ldr	r1, [r4, #20]
   b9758:	f7ff f838 	bl	b87cc <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b975c:	7923      	ldrb	r3, [r4, #4]
   b975e:	06da      	lsls	r2, r3, #27
   b9760:	d508      	bpl.n	b9774 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b9762:	2204      	movs	r2, #4
   b9764:	4918      	ldr	r1, [pc, #96]	; (b97c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b9766:	eb0d 0002 	add.w	r0, sp, r2
   b976a:	f7ff f89f 	bl	b88ac <_ZN5spark10JSONWriter4nameEPKcj>
   b976e:	69a1      	ldr	r1, [r4, #24]
   b9770:	f7ff f81a 	bl	b87a8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b9774:	7923      	ldrb	r3, [r4, #4]
   b9776:	069b      	lsls	r3, r3, #26
   b9778:	d507      	bpl.n	b978a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b977a:	4914      	ldr	r1, [pc, #80]	; (b97cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b977c:	2206      	movs	r2, #6
   b977e:	a801      	add	r0, sp, #4
   b9780:	f7ff f894 	bl	b88ac <_ZN5spark10JSONWriter4nameEPKcj>
   b9784:	69e1      	ldr	r1, [r4, #28]
   b9786:	f7ff f912 	bl	b89ae <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b978a:	a801      	add	r0, sp, #4
   b978c:	f7fe ffe9 	bl	b8762 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b9790:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b9792:	490f      	ldr	r1, [pc, #60]	; (b97d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b9794:	6803      	ldr	r3, [r0, #0]
   b9796:	2202      	movs	r2, #2
   b9798:	68db      	ldr	r3, [r3, #12]
   b979a:	4798      	blx	r3
}
   b979c:	b005      	add	sp, #20
   b979e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b97a2:	bf00      	nop
   b97a4:	2003e6d8 	.word	0x2003e6d8
   b97a8:	000bc56c 	.word	0x000bc56c
   b97ac:	000bc4ff 	.word	0x000bc4ff
   b97b0:	000bc550 	.word	0x000bc550
   b97b4:	000bc757 	.word	0x000bc757
   b97b8:	000bc61e 	.word	0x000bc61e
   b97bc:	000bc552 	.word	0x000bc552
   b97c0:	000bc555 	.word	0x000bc555
   b97c4:	000bc138 	.word	0x000bc138
   b97c8:	000bc558 	.word	0x000bc558
   b97cc:	000bc55d 	.word	0x000bc55d
   b97d0:	000bc54d 	.word	0x000bc54d

000b97d4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b97d4:	2300      	movs	r3, #0
   b97d6:	6840      	ldr	r0, [r0, #4]
   b97d8:	461a      	mov	r2, r3
   b97da:	f7fe bca1 	b.w	b8120 <network_connect>

000b97de <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b97de:	6840      	ldr	r0, [r0, #4]
   b97e0:	2200      	movs	r2, #0
   b97e2:	2102      	movs	r1, #2
   b97e4:	f7fe bcac 	b.w	b8140 <network_disconnect>

000b97e8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b97e8:	2200      	movs	r2, #0
   b97ea:	6840      	ldr	r0, [r0, #4]
   b97ec:	4611      	mov	r1, r2
   b97ee:	f7fe bc9f 	b.w	b8130 <network_connecting>

000b97f2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b97f2:	2200      	movs	r2, #0
   b97f4:	6840      	ldr	r0, [r0, #4]
   b97f6:	4611      	mov	r1, r2
   b97f8:	f7fe bcaa 	b.w	b8150 <network_ready>

000b97fc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b97fc:	2300      	movs	r3, #0
   b97fe:	6840      	ldr	r0, [r0, #4]
   b9800:	461a      	mov	r2, r3
   b9802:	4619      	mov	r1, r3
   b9804:	f7fe bcac 	b.w	b8160 <network_on>

000b9808 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9808:	2300      	movs	r3, #0
   b980a:	6840      	ldr	r0, [r0, #4]
   b980c:	461a      	mov	r2, r3
   b980e:	4619      	mov	r1, r3
   b9810:	f7fe bcae 	b.w	b8170 <network_off>

000b9814 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9814:	6840      	ldr	r0, [r0, #4]
   b9816:	2100      	movs	r1, #0
   b9818:	f7fe bcd2 	b.w	b81c0 <network_is_on>

000b981c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b981c:	6840      	ldr	r0, [r0, #4]
   b981e:	2100      	movs	r1, #0
   b9820:	f7fe bcd6 	b.w	b81d0 <network_is_off>

000b9824 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9824:	6840      	ldr	r0, [r0, #4]
   b9826:	2200      	movs	r2, #0
   b9828:	f081 0101 	eor.w	r1, r1, #1
   b982c:	f7fe bca8 	b.w	b8180 <network_listen>

000b9830 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9830:	6840      	ldr	r0, [r0, #4]
   b9832:	2200      	movs	r2, #0
   b9834:	f7fe bcb4 	b.w	b81a0 <network_set_listen_timeout>

000b9838 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9838:	2200      	movs	r2, #0
   b983a:	6840      	ldr	r0, [r0, #4]
   b983c:	4611      	mov	r1, r2
   b983e:	f7fe bcb7 	b.w	b81b0 <network_get_listen_timeout>

000b9842 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9842:	2200      	movs	r2, #0
   b9844:	6840      	ldr	r0, [r0, #4]
   b9846:	4611      	mov	r1, r2
   b9848:	f7fe bca2 	b.w	b8190 <network_listening>

000b984c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b984c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9850:	b095      	sub	sp, #84	; 0x54
   b9852:	4614      	mov	r4, r2
   b9854:	460d      	mov	r5, r1
   b9856:	4607      	mov	r7, r0
    IPAddress addr;
   b9858:	f7fe fe32 	bl	b84c0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b985c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b985e:	221c      	movs	r2, #28
   b9860:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9862:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9864:	f002 fa22 	bl	bbcac <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9868:	2340      	movs	r3, #64	; 0x40
   b986a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b986c:	4620      	mov	r0, r4
   b986e:	466b      	mov	r3, sp
   b9870:	aa0c      	add	r2, sp, #48	; 0x30
   b9872:	2100      	movs	r1, #0
   b9874:	f7fe fb00 	bl	b7e78 <netdb_getaddrinfo>
    if (!r) {
   b9878:	4604      	mov	r4, r0
   b987a:	2800      	cmp	r0, #0
   b987c:	d14b      	bne.n	b9916 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b987e:	4602      	mov	r2, r0
   b9880:	2101      	movs	r1, #1
   b9882:	6868      	ldr	r0, [r5, #4]
   b9884:	f7fe fc64 	bl	b8150 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9888:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b988a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b988c:	4622      	mov	r2, r4
   b988e:	6868      	ldr	r0, [r5, #4]
   b9890:	f7fe fc5e 	bl	b8150 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9894:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9896:	4681      	mov	r9, r0
        bool ok = false;
   b9898:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b989a:	2e00      	cmp	r6, #0
   b989c:	d03b      	beq.n	b9916 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b989e:	2900      	cmp	r1, #0
   b98a0:	d139      	bne.n	b9916 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b98a2:	6873      	ldr	r3, [r6, #4]
   b98a4:	2b02      	cmp	r3, #2
   b98a6:	d003      	beq.n	b98b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b98a8:	2b0a      	cmp	r3, #10
   b98aa:	d011      	beq.n	b98d0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b98ac:	69f6      	ldr	r6, [r6, #28]
   b98ae:	e7f4      	b.n	b989a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b98b0:	f1b8 0f00 	cmp.w	r8, #0
   b98b4:	d0fa      	beq.n	b98ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b98b6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b98b8:	a806      	add	r0, sp, #24
   b98ba:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b98bc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b98be:	f7fe fe2d 	bl	b851c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b98c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b98c4:	1d3c      	adds	r4, r7, #4
   b98c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b98c8:	682b      	ldr	r3, [r5, #0]
   b98ca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b98cc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b98ce:	e7ed      	b.n	b98ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b98d0:	f1b9 0f00 	cmp.w	r9, #0
   b98d4:	d0ea      	beq.n	b98ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b98d6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b98d8:	2210      	movs	r2, #16
   b98da:	a801      	add	r0, sp, #4
   b98dc:	f002 f9e6 	bl	bbcac <memset>
                    a.v = 6;
   b98e0:	2306      	movs	r3, #6
   b98e2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b98e6:	ad01      	add	r5, sp, #4
   b98e8:	f104 0308 	add.w	r3, r4, #8
   b98ec:	3418      	adds	r4, #24
   b98ee:	6818      	ldr	r0, [r3, #0]
   b98f0:	6859      	ldr	r1, [r3, #4]
   b98f2:	462a      	mov	r2, r5
   b98f4:	c203      	stmia	r2!, {r0, r1}
   b98f6:	3308      	adds	r3, #8
   b98f8:	42a3      	cmp	r3, r4
   b98fa:	4615      	mov	r5, r2
   b98fc:	d1f7      	bne.n	b98ee <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b98fe:	a901      	add	r1, sp, #4
   b9900:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9902:	ad07      	add	r5, sp, #28
   b9904:	f7fe fdea 	bl	b84dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b990a:	1d3c      	adds	r4, r7, #4
   b990c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b990e:	682b      	ldr	r3, [r5, #0]
   b9910:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9912:	4649      	mov	r1, r9
   b9914:	e7ca      	b.n	b98ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9916:	9800      	ldr	r0, [sp, #0]
   b9918:	f7fe faa6 	bl	b7e68 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b991c:	4638      	mov	r0, r7
   b991e:	b015      	add	sp, #84	; 0x54
   b9920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9924 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9924:	4b02      	ldr	r3, [pc, #8]	; (b9930 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9926:	4a03      	ldr	r2, [pc, #12]	; (b9934 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9928:	601a      	str	r2, [r3, #0]
   b992a:	2200      	movs	r2, #0
   b992c:	605a      	str	r2, [r3, #4]

} // spark
   b992e:	4770      	bx	lr
   b9930:	2003e6d8 	.word	0x2003e6d8
   b9934:	000bc5e4 	.word	0x000bc5e4

000b9938 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b993a:	4606      	mov	r6, r0
   b993c:	460d      	mov	r5, r1
  size_t n = 0;
   b993e:	188f      	adds	r7, r1, r2
   b9940:	2400      	movs	r4, #0
  while (size--) {
   b9942:	42bd      	cmp	r5, r7
   b9944:	d00c      	beq.n	b9960 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9946:	6833      	ldr	r3, [r6, #0]
   b9948:	f815 1b01 	ldrb.w	r1, [r5], #1
   b994c:	689b      	ldr	r3, [r3, #8]
   b994e:	4630      	mov	r0, r6
   b9950:	4798      	blx	r3
     if (chunk>=0)
   b9952:	1e03      	subs	r3, r0, #0
   b9954:	db01      	blt.n	b995a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b9956:	441c      	add	r4, r3
  while (size--) {
   b9958:	e7f3      	b.n	b9942 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b995a:	2c00      	cmp	r4, #0
   b995c:	bf08      	it	eq
   b995e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b9960:	4620      	mov	r0, r4
   b9962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9964 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b9964:	b508      	push	{r3, lr}
  return write(str);
   b9966:	f7fd fbba 	bl	b70de <_ZN5Print5writeEPKc>
}
   b996a:	bd08      	pop	{r3, pc}

000b996c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b996c:	6803      	ldr	r3, [r0, #0]
   b996e:	689b      	ldr	r3, [r3, #8]
   b9970:	4718      	bx	r3

000b9972 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b9972:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9974:	210d      	movs	r1, #13
{
   b9976:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9978:	f7ff fff8 	bl	b996c <_ZN5Print5printEc>
  n += print('\n');
   b997c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b997e:	4604      	mov	r4, r0
  n += print('\n');
   b9980:	4628      	mov	r0, r5
   b9982:	f7ff fff3 	bl	b996c <_ZN5Print5printEc>
  return n;
}
   b9986:	4420      	add	r0, r4
   b9988:	bd38      	pop	{r3, r4, r5, pc}

000b998a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b998a:	b538      	push	{r3, r4, r5, lr}
   b998c:	4605      	mov	r5, r0
  return write(str);
   b998e:	f7fd fba6 	bl	b70de <_ZN5Print5writeEPKc>
   b9992:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9994:	4628      	mov	r0, r5
   b9996:	f7ff ffec 	bl	b9972 <_ZN5Print7printlnEv>
  return n;
}
   b999a:	4420      	add	r0, r4
   b999c:	bd38      	pop	{r3, r4, r5, pc}

000b999e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   b999e:	f7ff bff4 	b.w	b998a <_ZN5Print7printlnEPKc>

000b99a2 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b99a2:	b530      	push	{r4, r5, lr}
   b99a4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b99a6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b99a8:	2a01      	cmp	r2, #1
  *str = '\0';
   b99aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b99ae:	bf98      	it	ls
   b99b0:	220a      	movls	r2, #10
   b99b2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b99b4:	460d      	mov	r5, r1
   b99b6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b99ba:	fb01 5312 	mls	r3, r1, r2, r5
   b99be:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b99c2:	2b09      	cmp	r3, #9
   b99c4:	bf94      	ite	ls
   b99c6:	3330      	addls	r3, #48	; 0x30
   b99c8:	3337      	addhi	r3, #55	; 0x37
   b99ca:	b2db      	uxtb	r3, r3
  } while(n);
   b99cc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b99ce:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b99d2:	d9ef      	bls.n	b99b4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b99d4:	4621      	mov	r1, r4
   b99d6:	f7fd fb82 	bl	b70de <_ZN5Print5writeEPKc>
}
   b99da:	b00b      	add	sp, #44	; 0x2c
   b99dc:	bd30      	pop	{r4, r5, pc}
	...

000b99e0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b99e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b99e4:	ec55 4b10 	vmov	r4, r5, d0
   b99e8:	4606      	mov	r6, r0
   b99ea:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b99ec:	ee10 2a10 	vmov	r2, s0
   b99f0:	ee10 0a10 	vmov	r0, s0
   b99f4:	462b      	mov	r3, r5
   b99f6:	4629      	mov	r1, r5
   b99f8:	f001 fec4 	bl	bb784 <__aeabi_dcmpun>
   b99fc:	b140      	cbz	r0, b9a10 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b99fe:	4953      	ldr	r1, [pc, #332]	; (b9b4c <_ZN5Print10printFloatEdh+0x16c>)
   b9a00:	4630      	mov	r0, r6
   b9a02:	f7fd fb6c 	bl	b70de <_ZN5Print5writeEPKc>
   b9a06:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b9a08:	4650      	mov	r0, sl
   b9a0a:	b003      	add	sp, #12
   b9a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b9a10:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b9a14:	4b4e      	ldr	r3, [pc, #312]	; (b9b50 <_ZN5Print10printFloatEdh+0x170>)
   b9a16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9a1a:	4620      	mov	r0, r4
   b9a1c:	4649      	mov	r1, r9
   b9a1e:	f001 feb1 	bl	bb784 <__aeabi_dcmpun>
   b9a22:	b948      	cbnz	r0, b9a38 <_ZN5Print10printFloatEdh+0x58>
   b9a24:	4b4a      	ldr	r3, [pc, #296]	; (b9b50 <_ZN5Print10printFloatEdh+0x170>)
   b9a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9a2a:	4620      	mov	r0, r4
   b9a2c:	4649      	mov	r1, r9
   b9a2e:	f001 fe8b 	bl	bb748 <__aeabi_dcmple>
   b9a32:	b908      	cbnz	r0, b9a38 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b9a34:	4947      	ldr	r1, [pc, #284]	; (b9b54 <_ZN5Print10printFloatEdh+0x174>)
   b9a36:	e7e3      	b.n	b9a00 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b9a38:	4b47      	ldr	r3, [pc, #284]	; (b9b58 <_ZN5Print10printFloatEdh+0x178>)
   b9a3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b9a3e:	4620      	mov	r0, r4
   b9a40:	4629      	mov	r1, r5
   b9a42:	f001 fe95 	bl	bb770 <__aeabi_dcmpgt>
   b9a46:	b108      	cbz	r0, b9a4c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b9a48:	4944      	ldr	r1, [pc, #272]	; (b9b5c <_ZN5Print10printFloatEdh+0x17c>)
   b9a4a:	e7d9      	b.n	b9a00 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b9a4c:	4b44      	ldr	r3, [pc, #272]	; (b9b60 <_ZN5Print10printFloatEdh+0x180>)
   b9a4e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b9a52:	4620      	mov	r0, r4
   b9a54:	4629      	mov	r1, r5
   b9a56:	f001 fe6d 	bl	bb734 <__aeabi_dcmplt>
   b9a5a:	2800      	cmp	r0, #0
   b9a5c:	d1f4      	bne.n	b9a48 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b9a5e:	2200      	movs	r2, #0
   b9a60:	2300      	movs	r3, #0
   b9a62:	4620      	mov	r0, r4
   b9a64:	4629      	mov	r1, r5
   b9a66:	f001 fe65 	bl	bb734 <__aeabi_dcmplt>
   b9a6a:	b1d0      	cbz	r0, b9aa2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b9a6c:	212d      	movs	r1, #45	; 0x2d
   b9a6e:	4630      	mov	r0, r6
   b9a70:	f7ff ff7c 	bl	b996c <_ZN5Print5printEc>
     number = -number;
   b9a74:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b9a78:	4682      	mov	sl, r0
     number = -number;
   b9a7a:	461d      	mov	r5, r3
  double rounding = 0.5;
   b9a7c:	4939      	ldr	r1, [pc, #228]	; (b9b64 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b9a7e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b9b6c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b9a82:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b9a86:	2000      	movs	r0, #0
    rounding /= 10.0;
   b9a88:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b9a8c:	fa5f f38b 	uxtb.w	r3, fp
   b9a90:	429f      	cmp	r7, r3
   b9a92:	d908      	bls.n	b9aa6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b9a94:	4642      	mov	r2, r8
   b9a96:	464b      	mov	r3, r9
   b9a98:	f001 fd04 	bl	bb4a4 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b9a9c:	f10b 0b01 	add.w	fp, fp, #1
   b9aa0:	e7f4      	b.n	b9a8c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b9aa2:	4682      	mov	sl, r0
   b9aa4:	e7ea      	b.n	b9a7c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b9aa6:	4622      	mov	r2, r4
   b9aa8:	462b      	mov	r3, r5
   b9aaa:	f001 fa1b 	bl	baee4 <__adddf3>
   b9aae:	460d      	mov	r5, r1
   b9ab0:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b9ab2:	f001 fea5 	bl	bb800 <__aeabi_d2uiz>
   b9ab6:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b9ab8:	f001 fb50 	bl	bb15c <__aeabi_ui2d>
   b9abc:	4602      	mov	r2, r0
   b9abe:	460b      	mov	r3, r1
   b9ac0:	4620      	mov	r0, r4
   b9ac2:	4629      	mov	r1, r5
   b9ac4:	f001 fa0c 	bl	baee0 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b9ac8:	220a      	movs	r2, #10
   b9aca:	4604      	mov	r4, r0
   b9acc:	460d      	mov	r5, r1
   b9ace:	4630      	mov	r0, r6
   b9ad0:	4641      	mov	r1, r8
   b9ad2:	f7ff ff66 	bl	b99a2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b9ad6:	4482      	add	sl, r0
  if (digits > 0) {
   b9ad8:	2f00      	cmp	r7, #0
   b9ada:	d095      	beq.n	b9a08 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b9adc:	4922      	ldr	r1, [pc, #136]	; (b9b68 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b9ade:	f8df 908c 	ldr.w	r9, [pc, #140]	; b9b6c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b9ae2:	4630      	mov	r0, r6
   b9ae4:	f7fd fafb 	bl	b70de <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b9ae8:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b9aec:	4482      	add	sl, r0
  while (digits-- > 0)
   b9aee:	2f00      	cmp	r7, #0
   b9af0:	d08a      	beq.n	b9a08 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b9af2:	4642      	mov	r2, r8
   b9af4:	464b      	mov	r3, r9
   b9af6:	4620      	mov	r0, r4
   b9af8:	4629      	mov	r1, r5
   b9afa:	f001 fba9 	bl	bb250 <__aeabi_dmul>
   b9afe:	4604      	mov	r4, r0
   b9b00:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b9b02:	f001 fe55 	bl	bb7b0 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b9b06:	f1b0 0b00 	subs.w	fp, r0, #0
   b9b0a:	da1c      	bge.n	b9b46 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b9b0c:	212d      	movs	r1, #45	; 0x2d
   b9b0e:	4630      	mov	r0, r6
   b9b10:	f7ff ff2c 	bl	b996c <_ZN5Print5printEc>
            val = -n;
   b9b14:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b9b18:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b9b1a:	220a      	movs	r2, #10
   b9b1c:	4630      	mov	r0, r6
   b9b1e:	9301      	str	r3, [sp, #4]
   b9b20:	f7ff ff3f 	bl	b99a2 <_ZN5Print11printNumberEmh>
   b9b24:	9b01      	ldr	r3, [sp, #4]
   b9b26:	4418      	add	r0, r3
    n += print(toPrint);
   b9b28:	4482      	add	sl, r0
    remainder -= toPrint;
   b9b2a:	4658      	mov	r0, fp
   b9b2c:	f001 fb26 	bl	bb17c <__aeabi_i2d>
   b9b30:	4602      	mov	r2, r0
   b9b32:	460b      	mov	r3, r1
   b9b34:	4620      	mov	r0, r4
   b9b36:	4629      	mov	r1, r5
   b9b38:	f001 f9d2 	bl	baee0 <__aeabi_dsub>
   b9b3c:	3f01      	subs	r7, #1
   b9b3e:	4604      	mov	r4, r0
   b9b40:	460d      	mov	r5, r1
   b9b42:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b9b44:	e7d3      	b.n	b9aee <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b9b46:	4659      	mov	r1, fp
        size_t t = 0;
   b9b48:	2300      	movs	r3, #0
   b9b4a:	e7e6      	b.n	b9b1a <_ZN5Print10printFloatEdh+0x13a>
   b9b4c:	000bc618 	.word	0x000bc618
   b9b50:	7fefffff 	.word	0x7fefffff
   b9b54:	000bc61c 	.word	0x000bc61c
   b9b58:	41efffff 	.word	0x41efffff
   b9b5c:	000bc620 	.word	0x000bc620
   b9b60:	c1efffff 	.word	0xc1efffff
   b9b64:	3fe00000 	.word	0x3fe00000
   b9b68:	000bc169 	.word	0x000bc169
   b9b6c:	40240000 	.word	0x40240000

000b9b70 <_ZN5Print5printEfi>:
{
   b9b70:	b538      	push	{r3, r4, r5, lr}
   b9b72:	4604      	mov	r4, r0
   b9b74:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b9b78:	b2cd      	uxtb	r5, r1
   b9b7a:	f001 fb11 	bl	bb1a0 <__aeabi_f2d>
   b9b7e:	ec41 0b10 	vmov	d0, r0, r1
   b9b82:	4629      	mov	r1, r5
   b9b84:	4620      	mov	r0, r4
}
   b9b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b9b8a:	f7ff bf29 	b.w	b99e0 <_ZN5Print10printFloatEdh>

000b9b8e <_ZN5Print7printlnEdi>:
{
   b9b8e:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b9b90:	b2c9      	uxtb	r1, r1
{
   b9b92:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b9b94:	f7ff ff24 	bl	b99e0 <_ZN5Print10printFloatEdh>
   b9b98:	4604      	mov	r4, r0
  n += println();
   b9b9a:	4628      	mov	r0, r5
   b9b9c:	f7ff fee9 	bl	b9972 <_ZN5Print7printlnEv>
}
   b9ba0:	4420      	add	r0, r4
   b9ba2:	bd38      	pop	{r3, r4, r5, pc}

000b9ba4 <_ZN5Print7printlnEfi>:
{
   b9ba4:	b538      	push	{r3, r4, r5, lr}
   b9ba6:	4604      	mov	r4, r0
   b9ba8:	ee10 0a10 	vmov	r0, s0
   b9bac:	460d      	mov	r5, r1
    return println((double)num, digits);
   b9bae:	f001 faf7 	bl	bb1a0 <__aeabi_f2d>
   b9bb2:	ec41 0b10 	vmov	d0, r0, r1
   b9bb6:	4629      	mov	r1, r5
   b9bb8:	4620      	mov	r0, r4
}
   b9bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b9bbe:	f7ff bfe6 	b.w	b9b8e <_ZN5Print7printlnEdi>

000b9bc2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9bc6:	b086      	sub	sp, #24
   b9bc8:	af00      	add	r7, sp, #0
   b9bca:	4605      	mov	r5, r0
   b9bcc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b9bce:	1d38      	adds	r0, r7, #4
   b9bd0:	2114      	movs	r1, #20
{
   b9bd2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9bd4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9bd6:	f7fe fb23 	bl	b8220 <vsnprintf>

    if (n<bufsize)
   b9bda:	2813      	cmp	r0, #19
   b9bdc:	d80e      	bhi.n	b9bfc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b9bde:	1d39      	adds	r1, r7, #4
   b9be0:	4628      	mov	r0, r5
   b9be2:	f7fd fa7c 	bl	b70de <_ZN5Print5writeEPKc>
   b9be6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9be8:	b11e      	cbz	r6, b9bf2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9bea:	4628      	mov	r0, r5
   b9bec:	f7ff fec1 	bl	b9972 <_ZN5Print7printlnEv>
   b9bf0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b9bf2:	4620      	mov	r0, r4
   b9bf4:	3718      	adds	r7, #24
   b9bf6:	46bd      	mov	sp, r7
   b9bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9bfc:	f100 0308 	add.w	r3, r0, #8
   b9c00:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9c04:	46e8      	mov	r8, sp
        char bigger[n+1];
   b9c06:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b9c0a:	4622      	mov	r2, r4
   b9c0c:	1c41      	adds	r1, r0, #1
   b9c0e:	683b      	ldr	r3, [r7, #0]
   b9c10:	4668      	mov	r0, sp
   b9c12:	f7fe fb05 	bl	b8220 <vsnprintf>
  return write(str);
   b9c16:	4669      	mov	r1, sp
   b9c18:	4628      	mov	r0, r5
   b9c1a:	f7fd fa60 	bl	b70de <_ZN5Print5writeEPKc>
   b9c1e:	4604      	mov	r4, r0
   b9c20:	46c5      	mov	sp, r8
   b9c22:	e7e1      	b.n	b9be8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b9c24 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   b9c24:	b510      	push	{r4, lr}
  if (0 == max) {
   b9c26:	4604      	mov	r4, r0
   b9c28:	b128      	cbz	r0, b9c36 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   b9c2a:	f002 f875 	bl	bbd18 <rand>
   b9c2e:	fb90 f3f4 	sdiv	r3, r0, r4
   b9c32:	fb03 0414 	mls	r4, r3, r4, r0
}
   b9c36:	4620      	mov	r0, r4
   b9c38:	bd10      	pop	{r4, pc}

000b9c3a <_Z10randomSeedj>:
  return random(max - min) + min;
}

void randomSeed(unsigned int seed)
{
  srand(seed);
   b9c3a:	f002 b83f 	b.w	bbcbc <srand>
	...

000b9c40 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b9c40:	4b01      	ldr	r3, [pc, #4]	; (b9c48 <_GLOBAL__sub_I_RGB+0x8>)
   b9c42:	2200      	movs	r2, #0
   b9c44:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b9c46:	4770      	bx	lr
   b9c48:	2003e6e0 	.word	0x2003e6e0

000b9c4c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b9c4c:	2100      	movs	r1, #0
   b9c4e:	f7fe b963 	b.w	b7f18 <hal_spi_release>

000b9c52 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b9c52:	2100      	movs	r1, #0
   b9c54:	f7fe b958 	b.w	b7f08 <hal_spi_acquire>

000b9c58 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b9c58:	b510      	push	{r4, lr}
   b9c5a:	4604      	mov	r4, r0
   b9c5c:	4608      	mov	r0, r1
{
    _spi = spi;
   b9c5e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b9c60:	f7fe f922 	bl	b7ea8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b9c64:	2300      	movs	r3, #0
   b9c66:	6063      	str	r3, [r4, #4]
}
   b9c68:	4620      	mov	r0, r4
   b9c6a:	bd10      	pop	{r4, pc}

000b9c6c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b9c6c:	b513      	push	{r0, r1, r4, lr}
   b9c6e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b9c70:	7800      	ldrb	r0, [r0, #0]
   b9c72:	f7ff ffee 	bl	b9c52 <_ZN8SPIClass4lockEv.isra.0>
   b9c76:	b958      	cbnz	r0, b9c90 <_ZN8SPIClass5beginEv+0x24>
   b9c78:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b9c7a:	9001      	str	r0, [sp, #4]
   b9c7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b9c80:	f7fe f902 	bl	b7e88 <hal_spi_begin>
        unlock();
   b9c84:	9801      	ldr	r0, [sp, #4]
    }
}
   b9c86:	b002      	add	sp, #8
   b9c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9c8c:	f7ff bfde 	b.w	b9c4c <_ZN8SPIClass6unlockEv.isra.0>
   b9c90:	b002      	add	sp, #8
   b9c92:	bd10      	pop	{r4, pc}

000b9c94 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b9c94:	7800      	ldrb	r0, [r0, #0]
   b9c96:	f7ff bfd9 	b.w	b9c4c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b9c9c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b9c9c:	0840      	lsrs	r0, r0, #1
{
   b9c9e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b9ca0:	6018      	str	r0, [r3, #0]
   b9ca2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b9ca4:	6818      	ldr	r0, [r3, #0]
   b9ca6:	4288      	cmp	r0, r1
   b9ca8:	b2e5      	uxtb	r5, r4
   b9caa:	d906      	bls.n	b9cba <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b9cac:	3401      	adds	r4, #1
   b9cae:	2c08      	cmp	r4, #8
   b9cb0:	d002      	beq.n	b9cb8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b9cb2:	0840      	lsrs	r0, r0, #1
   b9cb4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b9cb6:	e7f5      	b.n	b9ca4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b9cb8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b9cba:	4b02      	ldr	r3, [pc, #8]	; (b9cc4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b9cbc:	5d5b      	ldrb	r3, [r3, r5]
   b9cbe:	7013      	strb	r3, [r2, #0]
}
   b9cc0:	bd30      	pop	{r4, r5, pc}
   b9cc2:	bf00      	nop
   b9cc4:	000bc624 	.word	0x000bc624

000b9cc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b9cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9ccc:	4606      	mov	r6, r0
   b9cce:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b9cd0:	7800      	ldrb	r0, [r0, #0]
{
   b9cd2:	460c      	mov	r4, r1
    CHECK(lock());
   b9cd4:	f7ff ffbd 	bl	b9c52 <_ZN8SPIClass4lockEv.isra.0>
   b9cd8:	2800      	cmp	r0, #0
   b9cda:	db1b      	blt.n	b9d14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b9cdc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b9cde:	2214      	movs	r2, #20
   b9ce0:	2100      	movs	r1, #0
   b9ce2:	a809      	add	r0, sp, #36	; 0x24
   b9ce4:	f001 ffe2 	bl	bbcac <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b9ce8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b9cea:	2200      	movs	r2, #0
   b9cec:	a909      	add	r1, sp, #36	; 0x24
   b9cee:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b9cf0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b9cf4:	f7fe f8e8 	bl	b7ec8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b9cf8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b9cfc:	b113      	cbz	r3, b9d04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b9cfe:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b9d02:	b155      	cbz	r5, b9d1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b9d04:	2700      	movs	r7, #0
   b9d06:	46b9      	mov	r9, r7
   b9d08:	46b8      	mov	r8, r7
   b9d0a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b9d0c:	7923      	ldrb	r3, [r4, #4]
   b9d0e:	b15d      	cbz	r5, b9d28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b9d10:	b1c3      	cbz	r3, b9d44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b9d12:	2000      	movs	r0, #0
}
   b9d14:	b00f      	add	sp, #60	; 0x3c
   b9d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b9d1a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b9d1e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b9d22:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b9d26:	e7f1      	b.n	b9d0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b9d28:	2b00      	cmp	r3, #0
   b9d2a:	d135      	bne.n	b9d98 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b9d2c:	68a3      	ldr	r3, [r4, #8]
   b9d2e:	4543      	cmp	r3, r8
   b9d30:	d108      	bne.n	b9d44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b9d32:	f88d 9020 	strb.w	r9, [sp, #32]
   b9d36:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b9d3a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b9d3e:	89a3      	ldrh	r3, [r4, #12]
   b9d40:	429a      	cmp	r2, r3
   b9d42:	d0e6      	beq.n	b9d12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b9d44:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b9d46:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b9d48:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b9d4c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b9d4e:	ab04      	add	r3, sp, #16
   b9d50:	f10d 020f 	add.w	r2, sp, #15
   b9d54:	f7ff ffa2 	bl	b9c9c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b9d58:	7921      	ldrb	r1, [r4, #4]
   b9d5a:	b985      	cbnz	r5, b9d7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b9d5c:	b989      	cbnz	r1, b9d82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b9d5e:	68a3      	ldr	r3, [r4, #8]
   b9d60:	4543      	cmp	r3, r8
   b9d62:	d30e      	bcc.n	b9d82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b9d64:	f88d 9020 	strb.w	r9, [sp, #32]
   b9d68:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b9d6c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b9d70:	89a3      	ldrh	r3, [r4, #12]
   b9d72:	429a      	cmp	r2, r3
   b9d74:	d105      	bne.n	b9d82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b9d76:	9b04      	ldr	r3, [sp, #16]
   b9d78:	4543      	cmp	r3, r8
   b9d7a:	d102      	bne.n	b9d82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b9d7c:	e7c9      	b.n	b9d12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b9d7e:	2900      	cmp	r1, #0
   b9d80:	d1f9      	bne.n	b9d76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b9d82:	2300      	movs	r3, #0
   b9d84:	9301      	str	r3, [sp, #4]
   b9d86:	7b63      	ldrb	r3, [r4, #13]
   b9d88:	9300      	str	r3, [sp, #0]
   b9d8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b9d8e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b9d90:	7830      	ldrb	r0, [r6, #0]
   b9d92:	f7fe f8b1 	bl	b7ef8 <hal_spi_set_settings>
   b9d96:	e7bc      	b.n	b9d12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b9d98:	e9cd 5500 	strd	r5, r5, [sp]
   b9d9c:	462b      	mov	r3, r5
   b9d9e:	462a      	mov	r2, r5
   b9da0:	2101      	movs	r1, #1
   b9da2:	e7f5      	b.n	b9d90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b9da4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b9da4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b9da6:	7800      	ldrb	r0, [r0, #0]
   b9da8:	f7fe f876 	bl	b7e98 <hal_spi_transfer>
}
   b9dac:	b2c0      	uxtb	r0, r0
   b9dae:	bd08      	pop	{r3, pc}

000b9db0 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b9db0:	b530      	push	{r4, r5, lr}
   b9db2:	b087      	sub	sp, #28
   b9db4:	4604      	mov	r4, r0
   b9db6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b9db8:	9500      	str	r5, [sp, #0]
   b9dba:	7800      	ldrb	r0, [r0, #0]
   b9dbc:	f7fe f88c 	bl	b7ed8 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b9dc0:	b93d      	cbnz	r5, b9dd2 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b9dc2:	7820      	ldrb	r0, [r4, #0]
   b9dc4:	a902      	add	r1, sp, #8
   b9dc6:	f7fe f88f 	bl	b7ee8 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b9dca:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b9dce:	07db      	lsls	r3, r3, #31
   b9dd0:	d4f7      	bmi.n	b9dc2 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b9dd2:	b007      	add	sp, #28
   b9dd4:	bd30      	pop	{r4, r5, pc}
	...

000b9dd8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b9dd8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9ddc:	ec57 6b10 	vmov	r6, r7, d0
   b9de0:	4680      	mov	r8, r0
   b9de2:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b9de4:	ee10 0a10 	vmov	r0, s0
   b9de8:	2200      	movs	r2, #0
   b9dea:	2300      	movs	r3, #0
   b9dec:	4639      	mov	r1, r7
   b9dee:	f001 fca1 	bl	bb734 <__aeabi_dcmplt>
   b9df2:	b128      	cbz	r0, b9e00 <_Z4dtoadhPc+0x28>
        val = -val;
   b9df4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b9df8:	461f      	mov	r7, r3
        *sout++ = '-';
   b9dfa:	232d      	movs	r3, #45	; 0x2d
   b9dfc:	f804 3b01 	strb.w	r3, [r4], #1
   b9e00:	2300      	movs	r3, #0
    }
    long scale = 1;
   b9e02:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b9e06:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b9e08:	b2d9      	uxtb	r1, r3
   b9e0a:	4588      	cmp	r8, r1
   b9e0c:	d903      	bls.n	b9e16 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b9e0e:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b9e12:	3301      	adds	r3, #1
   b9e14:	e7f8      	b.n	b9e08 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b9e16:	4648      	mov	r0, r9
   b9e18:	f001 f9b0 	bl	bb17c <__aeabi_i2d>
   b9e1c:	4632      	mov	r2, r6
   b9e1e:	463b      	mov	r3, r7
   b9e20:	f001 fa16 	bl	bb250 <__aeabi_dmul>
   b9e24:	4606      	mov	r6, r0
   b9e26:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b9e28:	f001 fd72 	bl	bb910 <__aeabi_d2ulz>
   b9e2c:	468a      	mov	sl, r1
   b9e2e:	4605      	mov	r5, r0
   b9e30:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b9e32:	f001 f9d7 	bl	bb1e4 <__aeabi_ul2d>
   b9e36:	4602      	mov	r2, r0
   b9e38:	460b      	mov	r3, r1
   b9e3a:	4630      	mov	r0, r6
   b9e3c:	4639      	mov	r1, r7
   b9e3e:	f001 f84f 	bl	baee0 <__aeabi_dsub>
   b9e42:	4b14      	ldr	r3, [pc, #80]	; (b9e94 <_Z4dtoadhPc+0xbc>)
   b9e44:	2200      	movs	r2, #0
   b9e46:	f001 fc89 	bl	bb75c <__aeabi_dcmpge>
   b9e4a:	b110      	cbz	r0, b9e52 <_Z4dtoadhPc+0x7a>
        fixed++;
   b9e4c:	3501      	adds	r5, #1
   b9e4e:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b9e52:	464a      	mov	r2, r9
   b9e54:	4628      	mov	r0, r5
   b9e56:	17d3      	asrs	r3, r2, #31
   b9e58:	4659      	mov	r1, fp
   b9e5a:	f001 fd41 	bl	bb8e0 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b9e5e:	2301      	movs	r3, #1
   b9e60:	4615      	mov	r5, r2
   b9e62:	4621      	mov	r1, r4
   b9e64:	220a      	movs	r2, #10
   b9e66:	f000 fad6 	bl	ba416 <ultoa>
    if (prec) {
   b9e6a:	f1b8 0f00 	cmp.w	r8, #0
   b9e6e:	d00e      	beq.n	b9e8e <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b9e70:	4620      	mov	r0, r4
   b9e72:	f001 ffb8 	bl	bbde6 <strlen>
        *sout++ = '.';
   b9e76:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b9e78:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b9e7a:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b9e7c:	220a      	movs	r2, #10
   b9e7e:	4643      	mov	r3, r8
   b9e80:	3101      	adds	r1, #1
   b9e82:	4628      	mov	r0, r5
    }
}
   b9e84:	b001      	add	sp, #4
   b9e86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b9e8a:	f000 bac4 	b.w	ba416 <ultoa>
}
   b9e8e:	b001      	add	sp, #4
   b9e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9e94:	3fe00000 	.word	0x3fe00000

000b9e98 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b9e98:	b510      	push	{r4, lr}
   b9e9a:	4604      	mov	r4, r0
{
	free(buffer);
   b9e9c:	6800      	ldr	r0, [r0, #0]
   b9e9e:	f7fe f9a7 	bl	b81f0 <free>
}
   b9ea2:	4620      	mov	r0, r4
   b9ea4:	bd10      	pop	{r4, pc}

000b9ea6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b9ea6:	b510      	push	{r4, lr}
   b9ea8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b9eaa:	6800      	ldr	r0, [r0, #0]
   b9eac:	b108      	cbz	r0, b9eb2 <_ZN6String10invalidateEv+0xc>
   b9eae:	f7fe f99f 	bl	b81f0 <free>
	buffer = NULL;
   b9eb2:	2300      	movs	r3, #0
	capacity = len = 0;
   b9eb4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b9eb8:	6023      	str	r3, [r4, #0]
}
   b9eba:	bd10      	pop	{r4, pc}

000b9ebc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b9ebc:	b538      	push	{r3, r4, r5, lr}
   b9ebe:	4604      	mov	r4, r0
   b9ec0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b9ec2:	6800      	ldr	r0, [r0, #0]
   b9ec4:	3101      	adds	r1, #1
   b9ec6:	f7fe f99b 	bl	b8200 <realloc>
	if (newbuffer) {
   b9eca:	b110      	cbz	r0, b9ed2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b9ecc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b9ed0:	2001      	movs	r0, #1
	}
	return 0;
}
   b9ed2:	bd38      	pop	{r3, r4, r5, pc}

000b9ed4 <_ZN6String7reserveEj>:
{
   b9ed4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b9ed6:	6803      	ldr	r3, [r0, #0]
{
   b9ed8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b9eda:	b123      	cbz	r3, b9ee6 <_ZN6String7reserveEj+0x12>
   b9edc:	6843      	ldr	r3, [r0, #4]
   b9ede:	428b      	cmp	r3, r1
   b9ee0:	d301      	bcc.n	b9ee6 <_ZN6String7reserveEj+0x12>
   b9ee2:	2001      	movs	r0, #1
}
   b9ee4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b9ee6:	4620      	mov	r0, r4
   b9ee8:	f7ff ffe8 	bl	b9ebc <_ZN6String12changeBufferEj>
   b9eec:	2800      	cmp	r0, #0
   b9eee:	d0f9      	beq.n	b9ee4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b9ef0:	68a3      	ldr	r3, [r4, #8]
   b9ef2:	2b00      	cmp	r3, #0
   b9ef4:	d1f5      	bne.n	b9ee2 <_ZN6String7reserveEj+0xe>
   b9ef6:	6822      	ldr	r2, [r4, #0]
   b9ef8:	7013      	strb	r3, [r2, #0]
   b9efa:	e7f2      	b.n	b9ee2 <_ZN6String7reserveEj+0xe>

000b9efc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b9efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9efe:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b9f00:	4611      	mov	r1, r2
   b9f02:	9201      	str	r2, [sp, #4]
{
   b9f04:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b9f06:	f7ff ffe5 	bl	b9ed4 <_ZN6String7reserveEj>
   b9f0a:	9a01      	ldr	r2, [sp, #4]
   b9f0c:	b928      	cbnz	r0, b9f1a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b9f0e:	4620      	mov	r0, r4
   b9f10:	f7ff ffc9 	bl	b9ea6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b9f14:	4620      	mov	r0, r4
   b9f16:	b003      	add	sp, #12
   b9f18:	bd30      	pop	{r4, r5, pc}
	len = length;
   b9f1a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b9f1c:	4629      	mov	r1, r5
   b9f1e:	6820      	ldr	r0, [r4, #0]
   b9f20:	f001 fe9c 	bl	bbc5c <memcpy>
	buffer[len] = 0;
   b9f24:	6822      	ldr	r2, [r4, #0]
   b9f26:	68a3      	ldr	r3, [r4, #8]
   b9f28:	2100      	movs	r1, #0
   b9f2a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b9f2c:	e7f2      	b.n	b9f14 <_ZN6String4copyEPKcj+0x18>

000b9f2e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b9f2e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b9f30:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b9f32:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b9f36:	4604      	mov	r4, r0
	len = 0;
   b9f38:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9f3a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b9f3c:	b141      	cbz	r1, b9f50 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b9f3e:	4608      	mov	r0, r1
   b9f40:	9101      	str	r1, [sp, #4]
   b9f42:	f001 ff50 	bl	bbde6 <strlen>
   b9f46:	9901      	ldr	r1, [sp, #4]
   b9f48:	4602      	mov	r2, r0
   b9f4a:	4620      	mov	r0, r4
   b9f4c:	f7ff ffd6 	bl	b9efc <_ZN6String4copyEPKcj>
}
   b9f50:	4620      	mov	r0, r4
   b9f52:	b002      	add	sp, #8
   b9f54:	bd10      	pop	{r4, pc}

000b9f56 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b9f56:	b538      	push	{r3, r4, r5, lr}
   b9f58:	4605      	mov	r5, r0
	if (buffer) {
   b9f5a:	6800      	ldr	r0, [r0, #0]
{
   b9f5c:	460c      	mov	r4, r1
	if (buffer) {
   b9f5e:	b168      	cbz	r0, b9f7c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b9f60:	686a      	ldr	r2, [r5, #4]
   b9f62:	688b      	ldr	r3, [r1, #8]
   b9f64:	429a      	cmp	r2, r3
   b9f66:	d307      	bcc.n	b9f78 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b9f68:	6809      	ldr	r1, [r1, #0]
   b9f6a:	f001 ff34 	bl	bbdd6 <strcpy>
			len = rhs.len;
   b9f6e:	68a3      	ldr	r3, [r4, #8]
   b9f70:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b9f72:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b9f74:	60a3      	str	r3, [r4, #8]
}
   b9f76:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b9f78:	f7fe f93a 	bl	b81f0 <free>
	buffer = rhs.buffer;
   b9f7c:	6823      	ldr	r3, [r4, #0]
   b9f7e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b9f80:	6863      	ldr	r3, [r4, #4]
   b9f82:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b9f84:	68a3      	ldr	r3, [r4, #8]
   b9f86:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b9f88:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b9f8a:	e9c4 3300 	strd	r3, r3, [r4]
   b9f8e:	e7f1      	b.n	b9f74 <_ZN6String4moveERS_+0x1e>

000b9f90 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b9f90:	b510      	push	{r4, lr}
	buffer = NULL;
   b9f92:	2300      	movs	r3, #0
	capacity = 0;
   b9f94:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b9f98:	4604      	mov	r4, r0
	len = 0;
   b9f9a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9f9c:	7303      	strb	r3, [r0, #12]
	move(rval);
   b9f9e:	f7ff ffda 	bl	b9f56 <_ZN6String4moveERS_>
}
   b9fa2:	4620      	mov	r0, r4
   b9fa4:	bd10      	pop	{r4, pc}

000b9fa6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b9fa6:	4288      	cmp	r0, r1
{
   b9fa8:	b510      	push	{r4, lr}
   b9faa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b9fac:	d005      	beq.n	b9fba <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b9fae:	680b      	ldr	r3, [r1, #0]
   b9fb0:	b12b      	cbz	r3, b9fbe <_ZN6StringaSERKS_+0x18>
   b9fb2:	688a      	ldr	r2, [r1, #8]
   b9fb4:	4619      	mov	r1, r3
   b9fb6:	f7ff ffa1 	bl	b9efc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9fba:	4620      	mov	r0, r4
   b9fbc:	bd10      	pop	{r4, pc}
	else invalidate();
   b9fbe:	f7ff ff72 	bl	b9ea6 <_ZN6String10invalidateEv>
   b9fc2:	e7fa      	b.n	b9fba <_ZN6StringaSERKS_+0x14>

000b9fc4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b9fc4:	b510      	push	{r4, lr}
	buffer = NULL;
   b9fc6:	2300      	movs	r3, #0
String::String(const String &value)
   b9fc8:	4604      	mov	r4, r0
	capacity = 0;
   b9fca:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b9fce:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9fd0:	7303      	strb	r3, [r0, #12]
	*this = value;
   b9fd2:	f7ff ffe8 	bl	b9fa6 <_ZN6StringaSERKS_>
}
   b9fd6:	4620      	mov	r0, r4
   b9fd8:	bd10      	pop	{r4, pc}

000b9fda <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b9fda:	4288      	cmp	r0, r1
{
   b9fdc:	b510      	push	{r4, lr}
   b9fde:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b9fe0:	d001      	beq.n	b9fe6 <_ZN6StringaSEOS_+0xc>
   b9fe2:	f7ff ffb8 	bl	b9f56 <_ZN6String4moveERS_>
	return *this;
}
   b9fe6:	4620      	mov	r0, r4
   b9fe8:	bd10      	pop	{r4, pc}

000b9fea <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b9fea:	b513      	push	{r0, r1, r4, lr}
   b9fec:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b9fee:	b159      	cbz	r1, ba008 <_ZN6StringaSEPKc+0x1e>
   b9ff0:	4608      	mov	r0, r1
   b9ff2:	9101      	str	r1, [sp, #4]
   b9ff4:	f001 fef7 	bl	bbde6 <strlen>
   b9ff8:	9901      	ldr	r1, [sp, #4]
   b9ffa:	4602      	mov	r2, r0
   b9ffc:	4620      	mov	r0, r4
   b9ffe:	f7ff ff7d 	bl	b9efc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba002:	4620      	mov	r0, r4
   ba004:	b002      	add	sp, #8
   ba006:	bd10      	pop	{r4, pc}
	else invalidate();
   ba008:	f7ff ff4d 	bl	b9ea6 <_ZN6String10invalidateEv>
   ba00c:	e7f9      	b.n	ba002 <_ZN6StringaSEPKc+0x18>

000ba00e <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   ba00e:	b530      	push	{r4, r5, lr}
   ba010:	4604      	mov	r4, r0
	buffer = NULL;
   ba012:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   ba014:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   ba016:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   ba01a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   ba01c:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   ba01e:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   ba022:	b2cd      	uxtb	r5, r1
   ba024:	f001 f8bc 	bl	bb1a0 <__aeabi_f2d>
   ba028:	ec41 0b10 	vmov	d0, r0, r1
   ba02c:	a901      	add	r1, sp, #4
   ba02e:	4628      	mov	r0, r5
   ba030:	f7ff fed2 	bl	b9dd8 <_Z4dtoadhPc>
        *this = buf;
   ba034:	a901      	add	r1, sp, #4
   ba036:	4620      	mov	r0, r4
   ba038:	f7ff ffd7 	bl	b9fea <_ZN6StringaSEPKc>
}
   ba03c:	4620      	mov	r0, r4
   ba03e:	b00b      	add	sp, #44	; 0x2c
   ba040:	bd30      	pop	{r4, r5, pc}

000ba042 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   ba042:	b510      	push	{r4, lr}
   ba044:	4604      	mov	r4, r0
   ba046:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   ba048:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   ba04a:	4608      	mov	r0, r1
	capacity = 0;
   ba04c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   ba050:	60a3      	str	r3, [r4, #8]
	flags = 0;
   ba052:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   ba054:	a901      	add	r1, sp, #4
   ba056:	b2c0      	uxtb	r0, r0
   ba058:	f7ff febe 	bl	b9dd8 <_Z4dtoadhPc>
        *this = buf;
   ba05c:	a901      	add	r1, sp, #4
   ba05e:	4620      	mov	r0, r4
   ba060:	f7ff ffc3 	bl	b9fea <_ZN6StringaSEPKc>
}
   ba064:	4620      	mov	r0, r4
   ba066:	b00a      	add	sp, #40	; 0x28
   ba068:	bd10      	pop	{r4, pc}

000ba06a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba06a:	b570      	push	{r4, r5, r6, lr}
   ba06c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba06e:	460e      	mov	r6, r1
   ba070:	b909      	cbnz	r1, ba076 <_ZN6String6concatEPKcj+0xc>
   ba072:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba074:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba076:	b16a      	cbz	r2, ba094 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba078:	6884      	ldr	r4, [r0, #8]
   ba07a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba07c:	4621      	mov	r1, r4
   ba07e:	f7ff ff29 	bl	b9ed4 <_ZN6String7reserveEj>
   ba082:	2800      	cmp	r0, #0
   ba084:	d0f5      	beq.n	ba072 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba086:	6828      	ldr	r0, [r5, #0]
   ba088:	68ab      	ldr	r3, [r5, #8]
   ba08a:	4631      	mov	r1, r6
   ba08c:	4418      	add	r0, r3
   ba08e:	f001 fea2 	bl	bbdd6 <strcpy>
	len = newlen;
   ba092:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba094:	2001      	movs	r0, #1
   ba096:	e7ed      	b.n	ba074 <_ZN6String6concatEPKcj+0xa>

000ba098 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   ba098:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba09a:	688a      	ldr	r2, [r1, #8]
   ba09c:	6809      	ldr	r1, [r1, #0]
{
   ba09e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba0a0:	f7ff ffe3 	bl	ba06a <_ZN6String6concatEPKcj>
   ba0a4:	b910      	cbnz	r0, ba0ac <_ZplRK15StringSumHelperRK6String+0x14>
   ba0a6:	4620      	mov	r0, r4
   ba0a8:	f7ff fefd 	bl	b9ea6 <_ZN6String10invalidateEv>
	return a;
}
   ba0ac:	4620      	mov	r0, r4
   ba0ae:	bd10      	pop	{r4, pc}

000ba0b0 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   ba0b0:	b513      	push	{r0, r1, r4, lr}
   ba0b2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba0b4:	b929      	cbnz	r1, ba0c2 <_ZplRK15StringSumHelperPKc+0x12>
   ba0b6:	4620      	mov	r0, r4
   ba0b8:	f7ff fef5 	bl	b9ea6 <_ZN6String10invalidateEv>
	return a;
}
   ba0bc:	4620      	mov	r0, r4
   ba0be:	b002      	add	sp, #8
   ba0c0:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba0c2:	4608      	mov	r0, r1
   ba0c4:	9101      	str	r1, [sp, #4]
   ba0c6:	f001 fe8e 	bl	bbde6 <strlen>
   ba0ca:	9901      	ldr	r1, [sp, #4]
   ba0cc:	4602      	mov	r2, r0
   ba0ce:	4620      	mov	r0, r4
   ba0d0:	f7ff ffcb 	bl	ba06a <_ZN6String6concatEPKcj>
   ba0d4:	2800      	cmp	r0, #0
   ba0d6:	d0ee      	beq.n	ba0b6 <_ZplRK15StringSumHelperPKc+0x6>
   ba0d8:	e7f0      	b.n	ba0bc <_ZplRK15StringSumHelperPKc+0xc>

000ba0da <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   ba0da:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba0dc:	6882      	ldr	r2, [r0, #8]
   ba0de:	b93a      	cbnz	r2, ba0f0 <_ZNK6String6equalsEPKc+0x16>
   ba0e0:	b121      	cbz	r1, ba0ec <_ZNK6String6equalsEPKc+0x12>
   ba0e2:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   ba0e4:	fab0 f080 	clz	r0, r0
   ba0e8:	0940      	lsrs	r0, r0, #5
   ba0ea:	e000      	b.n	ba0ee <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba0ec:	2001      	movs	r0, #1
}
   ba0ee:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   ba0f0:	6800      	ldr	r0, [r0, #0]
   ba0f2:	b909      	cbnz	r1, ba0f8 <_ZNK6String6equalsEPKc+0x1e>
   ba0f4:	7800      	ldrb	r0, [r0, #0]
   ba0f6:	e7f5      	b.n	ba0e4 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   ba0f8:	f001 fe63 	bl	bbdc2 <strcmp>
   ba0fc:	e7f2      	b.n	ba0e4 <_ZNK6String6equalsEPKc+0xa>

000ba0fe <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   ba0fe:	b558      	push	{r3, r4, r6, lr}
   ba100:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   ba102:	b12a      	cbz	r2, ba110 <_ZNK6String8getBytesEPhjj+0x12>
   ba104:	b121      	cbz	r1, ba110 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   ba106:	6884      	ldr	r4, [r0, #8]
   ba108:	42a3      	cmp	r3, r4
   ba10a:	d302      	bcc.n	ba112 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   ba10c:	2300      	movs	r3, #0
   ba10e:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   ba110:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   ba112:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   ba114:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   ba116:	6801      	ldr	r1, [r0, #0]
   ba118:	4294      	cmp	r4, r2
   ba11a:	bf28      	it	cs
   ba11c:	4614      	movcs	r4, r2
   ba11e:	4419      	add	r1, r3
   ba120:	4622      	mov	r2, r4
   ba122:	4630      	mov	r0, r6
   ba124:	f001 fe7b 	bl	bbe1e <strncpy>
	buf[n] = 0;
   ba128:	2300      	movs	r3, #0
   ba12a:	5533      	strb	r3, [r6, r4]
   ba12c:	e7f0      	b.n	ba110 <_ZNK6String8getBytesEPhjj+0x12>
	...

000ba130 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   ba130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   ba132:	429a      	cmp	r2, r3
{
   ba134:	460f      	mov	r7, r1
   ba136:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   ba138:	490c      	ldr	r1, [pc, #48]	; (ba16c <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   ba13a:	bf88      	it	hi
   ba13c:	4613      	movhi	r3, r2
{
   ba13e:	4614      	mov	r4, r2
   ba140:	4606      	mov	r6, r0
	if (left > right) {
   ba142:	bf84      	itt	hi
   ba144:	462c      	movhi	r4, r5
   ba146:	461d      	movhi	r5, r3
	String out;
   ba148:	f7ff fef1 	bl	b9f2e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   ba14c:	68bb      	ldr	r3, [r7, #8]
   ba14e:	42a3      	cmp	r3, r4
   ba150:	d30a      	bcc.n	ba168 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   ba152:	6839      	ldr	r1, [r7, #0]
   ba154:	42ab      	cmp	r3, r5
   ba156:	bf94      	ite	ls
   ba158:	ebc4 0203 	rsbls	r2, r4, r3
   ba15c:	ebc4 0205 	rsbhi	r2, r4, r5
   ba160:	4421      	add	r1, r4
   ba162:	4630      	mov	r0, r6
   ba164:	f7ff feca 	bl	b9efc <_ZN6String4copyEPKcj>
	return out;
}
   ba168:	4630      	mov	r0, r6
   ba16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba16c:	000bc2e4 	.word	0x000bc2e4

000ba170 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ba170:	4b05      	ldr	r3, [pc, #20]	; (ba188 <_GLOBAL__sub_I_System+0x18>)
   ba172:	2202      	movs	r2, #2
   ba174:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   ba176:	4b05      	ldr	r3, [pc, #20]	; (ba18c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   ba178:	4a05      	ldr	r2, [pc, #20]	; (ba190 <_GLOBAL__sub_I_System+0x20>)
   ba17a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   ba17c:	2000      	movs	r0, #0
   ba17e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ba182:	f7fd bf89 	b.w	b8098 <set_system_mode>
   ba186:	bf00      	nop
   ba188:	2003e6fc 	.word	0x2003e6fc
   ba18c:	2003e6f0 	.word	0x2003e6f0
   ba190:	ffff0000 	.word	0xffff0000

000ba194 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba194:	4b02      	ldr	r3, [pc, #8]	; (ba1a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba196:	681a      	ldr	r2, [r3, #0]
   ba198:	4b02      	ldr	r3, [pc, #8]	; (ba1a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba19a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba19c:	4770      	bx	lr
   ba19e:	bf00      	nop
   ba1a0:	2003dc1c 	.word	0x2003dc1c
   ba1a4:	2003e700 	.word	0x2003e700

000ba1a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba1a8:	4770      	bx	lr

000ba1aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba1aa:	7441      	strb	r1, [r0, #17]
}
   ba1ac:	4770      	bx	lr

000ba1ae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba1ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba1b0:	7c00      	ldrb	r0, [r0, #16]
   ba1b2:	f7fd fef1 	bl	b7f98 <hal_usart_available_data_for_write>
}
   ba1b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba1ba:	bd08      	pop	{r3, pc}

000ba1bc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba1bc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba1be:	7c00      	ldrb	r0, [r0, #16]
   ba1c0:	f7fd fec2 	bl	b7f48 <hal_usart_available>
}
   ba1c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba1c8:	bd08      	pop	{r3, pc}

000ba1ca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba1ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba1cc:	7c00      	ldrb	r0, [r0, #16]
   ba1ce:	f7fd fecb 	bl	b7f68 <hal_usart_peek>
}
   ba1d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba1d6:	bd08      	pop	{r3, pc}

000ba1d8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba1d8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba1da:	7c00      	ldrb	r0, [r0, #16]
   ba1dc:	f7fd febc 	bl	b7f58 <hal_usart_read>
}
   ba1e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba1e4:	bd08      	pop	{r3, pc}

000ba1e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba1e6:	7c00      	ldrb	r0, [r0, #16]
   ba1e8:	f7fd bec6 	b.w	b7f78 <hal_usart_flush>

000ba1ec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba1ee:	7c45      	ldrb	r5, [r0, #17]
{
   ba1f0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba1f2:	b12d      	cbz	r5, ba200 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba1f4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba1f6:	b003      	add	sp, #12
   ba1f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba1fc:	f7fd be9c 	b.w	b7f38 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba200:	7c00      	ldrb	r0, [r0, #16]
   ba202:	9101      	str	r1, [sp, #4]
   ba204:	f7fd fec8 	bl	b7f98 <hal_usart_available_data_for_write>
   ba208:	2800      	cmp	r0, #0
   ba20a:	9901      	ldr	r1, [sp, #4]
   ba20c:	dcf2      	bgt.n	ba1f4 <_ZN11USARTSerial5writeEh+0x8>
}
   ba20e:	4628      	mov	r0, r5
   ba210:	b003      	add	sp, #12
   ba212:	bd30      	pop	{r4, r5, pc}

000ba214 <_ZN11USARTSerialD0Ev>:
   ba214:	b510      	push	{r4, lr}
   ba216:	2114      	movs	r1, #20
   ba218:	4604      	mov	r4, r0
   ba21a:	f7f9 ff40 	bl	b409e <_ZdlPvj>
   ba21e:	4620      	mov	r0, r4
   ba220:	bd10      	pop	{r4, pc}
	...

000ba224 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba224:	b510      	push	{r4, lr}
   ba226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba22a:	4604      	mov	r4, r0
   ba22c:	4608      	mov	r0, r1
   ba22e:	4611      	mov	r1, r2
   ba230:	2200      	movs	r2, #0
   ba232:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba236:	4b04      	ldr	r3, [pc, #16]	; (ba248 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   ba238:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba23a:	2301      	movs	r3, #1
  _serial = serial;
   ba23c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba23e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   ba240:	f7fd feba 	bl	b7fb8 <hal_usart_init_ex>
}
   ba244:	4620      	mov	r0, r4
   ba246:	bd10      	pop	{r4, pc}
   ba248:	000bc650 	.word	0x000bc650

000ba24c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   ba24c:	7c00      	ldrb	r0, [r0, #16]
   ba24e:	2300      	movs	r3, #0
   ba250:	f7fd beaa 	b.w	b7fa8 <hal_usart_begin_config>

000ba254 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   ba254:	2200      	movs	r2, #0
   ba256:	f7ff bff9 	b.w	ba24c <_ZN11USARTSerial5beginEmm>

000ba25a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   ba25a:	7c00      	ldrb	r0, [r0, #16]
   ba25c:	f7fd be64 	b.w	b7f28 <hal_usart_end>

000ba260 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba260:	7441      	strb	r1, [r0, #17]
}
   ba262:	4770      	bx	lr

000ba264 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba264:	4770      	bx	lr

000ba266 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba266:	4770      	bx	lr

000ba268 <_ZN9USBSerial4readEv>:
{
   ba268:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba26a:	2100      	movs	r1, #0
   ba26c:	7c00      	ldrb	r0, [r0, #16]
   ba26e:	f7fd fed3 	bl	b8018 <HAL_USB_USART_Receive_Data>
}
   ba272:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba276:	bd08      	pop	{r3, pc}

000ba278 <_ZN9USBSerial4peekEv>:
{
   ba278:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba27a:	2101      	movs	r1, #1
   ba27c:	7c00      	ldrb	r0, [r0, #16]
   ba27e:	f7fd fecb 	bl	b8018 <HAL_USB_USART_Receive_Data>
}
   ba282:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba286:	bd08      	pop	{r3, pc}

000ba288 <_ZN9USBSerial17availableForWriteEv>:
{
   ba288:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba28a:	7c00      	ldrb	r0, [r0, #16]
   ba28c:	f7fd febc 	bl	b8008 <HAL_USB_USART_Available_Data_For_Write>
}
   ba290:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba294:	bd08      	pop	{r3, pc}

000ba296 <_ZN9USBSerial9availableEv>:
{
   ba296:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba298:	7c00      	ldrb	r0, [r0, #16]
   ba29a:	f7fd fead 	bl	b7ff8 <HAL_USB_USART_Available_Data>
}
   ba29e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba2a2:	bd08      	pop	{r3, pc}

000ba2a4 <_ZN9USBSerial5writeEh>:
{
   ba2a4:	b513      	push	{r0, r1, r4, lr}
   ba2a6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba2a8:	7c00      	ldrb	r0, [r0, #16]
{
   ba2aa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba2ac:	f7fd feac 	bl	b8008 <HAL_USB_USART_Available_Data_For_Write>
   ba2b0:	2800      	cmp	r0, #0
   ba2b2:	9901      	ldr	r1, [sp, #4]
   ba2b4:	dc01      	bgt.n	ba2ba <_ZN9USBSerial5writeEh+0x16>
   ba2b6:	7c60      	ldrb	r0, [r4, #17]
   ba2b8:	b120      	cbz	r0, ba2c4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba2ba:	7c20      	ldrb	r0, [r4, #16]
   ba2bc:	f7fd feb4 	bl	b8028 <HAL_USB_USART_Send_Data>
   ba2c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba2c4:	b002      	add	sp, #8
   ba2c6:	bd10      	pop	{r4, pc}

000ba2c8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba2c8:	7c00      	ldrb	r0, [r0, #16]
   ba2ca:	f7fd beb5 	b.w	b8038 <HAL_USB_USART_Flush_Data>

000ba2ce <_ZN9USBSerialD0Ev>:
   ba2ce:	b510      	push	{r4, lr}
   ba2d0:	2114      	movs	r1, #20
   ba2d2:	4604      	mov	r4, r0
   ba2d4:	f7f9 fee3 	bl	b409e <_ZdlPvj>
   ba2d8:	4620      	mov	r0, r4
   ba2da:	bd10      	pop	{r4, pc}

000ba2dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba2dc:	b510      	push	{r4, lr}
   ba2de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba2e2:	4604      	mov	r4, r0
   ba2e4:	4608      	mov	r0, r1
   ba2e6:	2100      	movs	r1, #0
   ba2e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba2ec:	4b04      	ldr	r3, [pc, #16]	; (ba300 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba2ee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba2f0:	2301      	movs	r3, #1
  _serial = serial;
   ba2f2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba2f4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba2f6:	4611      	mov	r1, r2
   ba2f8:	f7fd fe66 	bl	b7fc8 <HAL_USB_USART_Init>
}
   ba2fc:	4620      	mov	r0, r4
   ba2fe:	bd10      	pop	{r4, pc}
   ba300:	000bc680 	.word	0x000bc680

000ba304 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ba304:	7c00      	ldrb	r0, [r0, #16]
   ba306:	2200      	movs	r2, #0
   ba308:	f7fd be66 	b.w	b7fd8 <HAL_USB_USART_Begin>

000ba30c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   ba30c:	7c00      	ldrb	r0, [r0, #16]
   ba30e:	f7fd be6b 	b.w	b7fe8 <HAL_USB_USART_End>

000ba312 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   ba312:	7c00      	ldrb	r0, [r0, #16]
   ba314:	f7fd be98 	b.w	b8048 <HAL_USB_USART_Is_Enabled>

000ba318 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   ba318:	f7ff bffb 	b.w	ba312 <_ZN9USBSerial9isEnabledEv>

000ba31c <_Z19acquireSerialBufferv>:
{
   ba31c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba31e:	2214      	movs	r2, #20
{
   ba320:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba322:	2100      	movs	r1, #0
   ba324:	f001 fcc2 	bl	bbcac <memset>
}
   ba328:	4620      	mov	r0, r4
   ba32a:	bd10      	pop	{r4, pc}

000ba32c <_Z16_fetch_usbserialv>:
{
   ba32c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba32e:	4c0f      	ldr	r4, [pc, #60]	; (ba36c <_Z16_fetch_usbserialv+0x40>)
{
   ba330:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba332:	a803      	add	r0, sp, #12
   ba334:	f7ff fff2 	bl	ba31c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba338:	7821      	ldrb	r1, [r4, #0]
   ba33a:	f3bf 8f5b 	dmb	ish
   ba33e:	f011 0101 	ands.w	r1, r1, #1
   ba342:	d10f      	bne.n	ba364 <_Z16_fetch_usbserialv+0x38>
   ba344:	4620      	mov	r0, r4
   ba346:	9101      	str	r1, [sp, #4]
   ba348:	f7f9 feb6 	bl	b40b8 <__cxa_guard_acquire>
   ba34c:	9901      	ldr	r1, [sp, #4]
   ba34e:	b148      	cbz	r0, ba364 <_Z16_fetch_usbserialv+0x38>
   ba350:	aa03      	add	r2, sp, #12
   ba352:	4807      	ldr	r0, [pc, #28]	; (ba370 <_Z16_fetch_usbserialv+0x44>)
   ba354:	f7ff ffc2 	bl	ba2dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba358:	4620      	mov	r0, r4
   ba35a:	f7f9 feb2 	bl	b40c2 <__cxa_guard_release>
   ba35e:	4805      	ldr	r0, [pc, #20]	; (ba374 <_Z16_fetch_usbserialv+0x48>)
   ba360:	f001 fc5e 	bl	bbc20 <atexit>
	return _usbserial;
}
   ba364:	4802      	ldr	r0, [pc, #8]	; (ba370 <_Z16_fetch_usbserialv+0x44>)
   ba366:	b008      	add	sp, #32
   ba368:	bd10      	pop	{r4, pc}
   ba36a:	bf00      	nop
   ba36c:	2003e704 	.word	0x2003e704
   ba370:	2003e708 	.word	0x2003e708
   ba374:	000ba265 	.word	0x000ba265

000ba378 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   ba378:	2200      	movs	r2, #0
   ba37a:	6840      	ldr	r0, [r0, #4]
   ba37c:	4611      	mov	r1, r2
   ba37e:	f7fd bee7 	b.w	b8150 <network_ready>

000ba382 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba382:	2200      	movs	r2, #0
   ba384:	6840      	ldr	r0, [r0, #4]
   ba386:	4611      	mov	r1, r2
   ba388:	f7fd bf02 	b.w	b8190 <network_listening>

000ba38c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba38c:	2200      	movs	r2, #0
   ba38e:	6840      	ldr	r0, [r0, #4]
   ba390:	4611      	mov	r1, r2
   ba392:	f7fd bf0d 	b.w	b81b0 <network_get_listen_timeout>

000ba396 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba396:	6840      	ldr	r0, [r0, #4]
   ba398:	2200      	movs	r2, #0
   ba39a:	f7fd bf01 	b.w	b81a0 <network_set_listen_timeout>

000ba39e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba39e:	6840      	ldr	r0, [r0, #4]
   ba3a0:	2200      	movs	r2, #0
   ba3a2:	f081 0101 	eor.w	r1, r1, #1
   ba3a6:	f7fd beeb 	b.w	b8180 <network_listen>

000ba3aa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba3aa:	2300      	movs	r3, #0
   ba3ac:	6840      	ldr	r0, [r0, #4]
   ba3ae:	461a      	mov	r2, r3
   ba3b0:	4619      	mov	r1, r3
   ba3b2:	f7fd bedd 	b.w	b8170 <network_off>

000ba3b6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba3b6:	2300      	movs	r3, #0
   ba3b8:	6840      	ldr	r0, [r0, #4]
   ba3ba:	461a      	mov	r2, r3
   ba3bc:	4619      	mov	r1, r3
   ba3be:	f7fd becf 	b.w	b8160 <network_on>

000ba3c2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba3c2:	2200      	movs	r2, #0
   ba3c4:	6840      	ldr	r0, [r0, #4]
   ba3c6:	4611      	mov	r1, r2
   ba3c8:	f7fd beb2 	b.w	b8130 <network_connecting>

000ba3cc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba3cc:	6840      	ldr	r0, [r0, #4]
   ba3ce:	2200      	movs	r2, #0
   ba3d0:	2102      	movs	r1, #2
   ba3d2:	f7fd beb5 	b.w	b8140 <network_disconnect>

000ba3d6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba3d6:	2300      	movs	r3, #0
   ba3d8:	6840      	ldr	r0, [r0, #4]
   ba3da:	461a      	mov	r2, r3
   ba3dc:	f7fd bea0 	b.w	b8120 <network_connect>

000ba3e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   ba3e0:	4b02      	ldr	r3, [pc, #8]	; (ba3ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   ba3e2:	2204      	movs	r2, #4
   ba3e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   ba3e6:	4a02      	ldr	r2, [pc, #8]	; (ba3f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   ba3e8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   ba3ea:	4770      	bx	lr
   ba3ec:	2003e71c 	.word	0x2003e71c
   ba3f0:	000bc6b0 	.word	0x000bc6b0

000ba3f4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   ba3f4:	b510      	push	{r4, lr}
   ba3f6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   ba3f8:	f001 fcf5 	bl	bbde6 <strlen>
   ba3fc:	3801      	subs	r0, #1
   ba3fe:	1823      	adds	r3, r4, r0
   ba400:	4620      	mov	r0, r4
	while(i<j){
   ba402:	4283      	cmp	r3, r0
   ba404:	d906      	bls.n	ba414 <_Z11str_reversePc+0x20>
		c = *i;
   ba406:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   ba408:	7819      	ldrb	r1, [r3, #0]
   ba40a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   ba40e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   ba412:	e7f6      	b.n	ba402 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   ba414:	bd10      	pop	{r4, pc}

000ba416 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   ba416:	b570      	push	{r4, r5, r6, lr}
   ba418:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   ba41a:	1e91      	subs	r1, r2, #2
   ba41c:	2922      	cmp	r1, #34	; 0x22
   ba41e:	d81d      	bhi.n	ba45c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   ba420:	4625      	mov	r5, r4

	div_t result;
	while(a){
   ba422:	b930      	cbnz	r0, ba432 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   ba424:	4423      	add	r3, r4
            *ptr++ = '0';
   ba426:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   ba428:	429d      	cmp	r5, r3
   ba42a:	d210      	bcs.n	ba44e <ultoa+0x38>
            *ptr++ = '0';
   ba42c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   ba430:	e7fa      	b.n	ba428 <ultoa+0x12>
            result.quot = a/radix;
   ba432:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   ba436:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   ba43a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   ba43c:	2809      	cmp	r0, #9
                *ptr += '0';
   ba43e:	bf94      	ite	ls
   ba440:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   ba442:	3157      	addhi	r1, #87	; 0x57
   ba444:	b2c9      	uxtb	r1, r1
   ba446:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   ba44a:	4630      	mov	r0, r6
	while(a){
   ba44c:	e7e9      	b.n	ba422 <ultoa+0xc>

	*ptr = '\0';
   ba44e:	2300      	movs	r3, #0
	str_reverse(buffer);
   ba450:	4620      	mov	r0, r4
	*ptr = '\0';
   ba452:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   ba454:	f7ff ffce 	bl	ba3f4 <_Z11str_reversePc>
	return buffer;
   ba458:	4620      	mov	r0, r4
}
   ba45a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   ba45c:	2000      	movs	r0, #0
   ba45e:	e7fc      	b.n	ba45a <ultoa+0x44>

000ba460 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba460:	4b01      	ldr	r3, [pc, #4]	; (ba468 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba462:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba464:	4770      	bx	lr
   ba466:	bf00      	nop
   ba468:	2003dc24 	.word	0x2003dc24

000ba46c <serialEventRun>:
{
   ba46c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba46e:	4b0b      	ldr	r3, [pc, #44]	; (ba49c <serialEventRun+0x30>)
   ba470:	b143      	cbz	r3, ba484 <serialEventRun+0x18>
   ba472:	f7ff ff5b 	bl	ba32c <_Z16_fetch_usbserialv>
   ba476:	6803      	ldr	r3, [r0, #0]
   ba478:	691b      	ldr	r3, [r3, #16]
   ba47a:	4798      	blx	r3
   ba47c:	2800      	cmp	r0, #0
   ba47e:	dd01      	ble.n	ba484 <serialEventRun+0x18>
        serialEvent();
   ba480:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba484:	4b06      	ldr	r3, [pc, #24]	; (ba4a0 <serialEventRun+0x34>)
   ba486:	b143      	cbz	r3, ba49a <serialEventRun+0x2e>
   ba488:	f000 f978 	bl	ba77c <_Z22__fetch_global_Serial1v>
   ba48c:	6803      	ldr	r3, [r0, #0]
   ba48e:	691b      	ldr	r3, [r3, #16]
   ba490:	4798      	blx	r3
   ba492:	2800      	cmp	r0, #0
   ba494:	dd01      	ble.n	ba49a <serialEventRun+0x2e>
        serialEvent1();
   ba496:	f3af 8000 	nop.w
}
   ba49a:	bd08      	pop	{r3, pc}
	...

000ba4a4 <_post_loop>:
{
   ba4a4:	b508      	push	{r3, lr}
	serialEventRun();
   ba4a6:	f7ff ffe1 	bl	ba46c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba4aa:	f7fd fc45 	bl	b7d38 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba4ae:	4b01      	ldr	r3, [pc, #4]	; (ba4b4 <_post_loop+0x10>)
   ba4b0:	6018      	str	r0, [r3, #0]
}
   ba4b2:	bd08      	pop	{r3, pc}
   ba4b4:	2003e72c 	.word	0x2003e72c

000ba4b8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba4b8:	4805      	ldr	r0, [pc, #20]	; (ba4d0 <_Z33system_initialize_user_backup_ramv+0x18>)
   ba4ba:	4a06      	ldr	r2, [pc, #24]	; (ba4d4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba4bc:	4906      	ldr	r1, [pc, #24]	; (ba4d8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba4be:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba4c0:	1a12      	subs	r2, r2, r0
   ba4c2:	f001 fbcb 	bl	bbc5c <memcpy>
    __backup_sram_signature = signature;
   ba4c6:	4b05      	ldr	r3, [pc, #20]	; (ba4dc <_Z33system_initialize_user_backup_ramv+0x24>)
   ba4c8:	4a05      	ldr	r2, [pc, #20]	; (ba4e0 <_Z33system_initialize_user_backup_ramv+0x28>)
   ba4ca:	601a      	str	r2, [r3, #0]
}
   ba4cc:	bd08      	pop	{r3, pc}
   ba4ce:	bf00      	nop
   ba4d0:	2003f400 	.word	0x2003f400
   ba4d4:	2003f404 	.word	0x2003f404
   ba4d8:	000bc888 	.word	0x000bc888
   ba4dc:	2003f400 	.word	0x2003f400
   ba4e0:	9a271c1e 	.word	0x9a271c1e

000ba4e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba4e4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba4e6:	2300      	movs	r3, #0
   ba4e8:	9300      	str	r3, [sp, #0]
   ba4ea:	461a      	mov	r2, r3
   ba4ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba4f0:	f7fd fdf4 	bl	b80dc <system_ctrl_set_result>
}
   ba4f4:	b003      	add	sp, #12
   ba4f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba4fc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba4fc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba4fe:	8843      	ldrh	r3, [r0, #2]
   ba500:	2b0a      	cmp	r3, #10
   ba502:	d008      	beq.n	ba516 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba504:	2b50      	cmp	r3, #80	; 0x50
   ba506:	d10b      	bne.n	ba520 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba508:	4b09      	ldr	r3, [pc, #36]	; (ba530 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba50a:	681b      	ldr	r3, [r3, #0]
   ba50c:	b14b      	cbz	r3, ba522 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba50e:	b003      	add	sp, #12
   ba510:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba514:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba516:	f7ff ffe5 	bl	ba4e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba51a:	b003      	add	sp, #12
   ba51c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba520:	2300      	movs	r3, #0
   ba522:	9300      	str	r3, [sp, #0]
   ba524:	461a      	mov	r2, r3
   ba526:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba52a:	f7fd fdd7 	bl	b80dc <system_ctrl_set_result>
}
   ba52e:	e7f4      	b.n	ba51a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba530:	2003e728 	.word	0x2003e728

000ba534 <module_user_init_hook>:
{
   ba534:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba536:	4812      	ldr	r0, [pc, #72]	; (ba580 <module_user_init_hook+0x4c>)
   ba538:	2100      	movs	r1, #0
   ba53a:	f7fd fe89 	bl	b8250 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba53e:	4b11      	ldr	r3, [pc, #68]	; (ba584 <module_user_init_hook+0x50>)
   ba540:	681a      	ldr	r2, [r3, #0]
   ba542:	4b11      	ldr	r3, [pc, #68]	; (ba588 <module_user_init_hook+0x54>)
   ba544:	429a      	cmp	r2, r3
   ba546:	4b11      	ldr	r3, [pc, #68]	; (ba58c <module_user_init_hook+0x58>)
   ba548:	bf0c      	ite	eq
   ba54a:	2201      	moveq	r2, #1
   ba54c:	2200      	movne	r2, #0
   ba54e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba550:	d001      	beq.n	ba556 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba552:	f7ff ffb1 	bl	ba4b8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba556:	f7fd fbd7 	bl	b7d08 <HAL_RNG_GetRandomNumber>
   ba55a:	4604      	mov	r4, r0
    srand(seed);
   ba55c:	f001 fbae 	bl	bbcbc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba560:	4b0b      	ldr	r3, [pc, #44]	; (ba590 <module_user_init_hook+0x5c>)
   ba562:	b113      	cbz	r3, ba56a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba564:	4620      	mov	r0, r4
   ba566:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba56a:	2100      	movs	r1, #0
   ba56c:	4808      	ldr	r0, [pc, #32]	; (ba590 <module_user_init_hook+0x5c>)
   ba56e:	f7fd fdcf 	bl	b8110 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba576:	4807      	ldr	r0, [pc, #28]	; (ba594 <module_user_init_hook+0x60>)
   ba578:	2100      	movs	r1, #0
   ba57a:	f7fd bda5 	b.w	b80c8 <system_ctrl_set_app_request_handler>
   ba57e:	bf00      	nop
   ba580:	000ba461 	.word	0x000ba461
   ba584:	2003f400 	.word	0x2003f400
   ba588:	9a271c1e 	.word	0x9a271c1e
   ba58c:	2003e724 	.word	0x2003e724
   ba590:	00000000 	.word	0x00000000
   ba594:	000ba4fd 	.word	0x000ba4fd

000ba598 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   ba598:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   ba59a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   ba59c:	d902      	bls.n	ba5a4 <pinAvailable+0xc>
    return false;
   ba59e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   ba5a0:	b002      	add	sp, #8
   ba5a2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   ba5a4:	f1a0 030b 	sub.w	r3, r0, #11
   ba5a8:	2b02      	cmp	r3, #2
   ba5aa:	d81a      	bhi.n	ba5e2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   ba5ac:	4c17      	ldr	r4, [pc, #92]	; (ba60c <pinAvailable+0x74>)
   ba5ae:	7821      	ldrb	r1, [r4, #0]
   ba5b0:	f3bf 8f5b 	dmb	ish
   ba5b4:	f011 0101 	ands.w	r1, r1, #1
   ba5b8:	d10b      	bne.n	ba5d2 <pinAvailable+0x3a>
   ba5ba:	4620      	mov	r0, r4
   ba5bc:	9101      	str	r1, [sp, #4]
   ba5be:	f7f9 fd7b 	bl	b40b8 <__cxa_guard_acquire>
   ba5c2:	9901      	ldr	r1, [sp, #4]
   ba5c4:	b128      	cbz	r0, ba5d2 <pinAvailable+0x3a>
   ba5c6:	4812      	ldr	r0, [pc, #72]	; (ba610 <pinAvailable+0x78>)
   ba5c8:	f7ff fb46 	bl	b9c58 <_ZN8SPIClassC1E19hal_spi_interface_t>
   ba5cc:	4620      	mov	r0, r4
   ba5ce:	f7f9 fd78 	bl	b40c2 <__cxa_guard_release>
   ba5d2:	4b0f      	ldr	r3, [pc, #60]	; (ba610 <pinAvailable+0x78>)
   ba5d4:	7818      	ldrb	r0, [r3, #0]
   ba5d6:	f7fd fc6f 	bl	b7eb8 <hal_spi_is_enabled>
   ba5da:	2800      	cmp	r0, #0
   ba5dc:	d1df      	bne.n	ba59e <pinAvailable+0x6>
  return true; // 'pin' is available
   ba5de:	2001      	movs	r0, #1
   ba5e0:	e7de      	b.n	ba5a0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   ba5e2:	2801      	cmp	r0, #1
   ba5e4:	d809      	bhi.n	ba5fa <pinAvailable+0x62>
   ba5e6:	f000 f889 	bl	ba6fc <_Z19__fetch_global_Wirev>
   ba5ea:	2100      	movs	r1, #0
   ba5ec:	7c00      	ldrb	r0, [r0, #16]
   ba5ee:	f7fd fc1b 	bl	b7e28 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   ba5f2:	f080 0001 	eor.w	r0, r0, #1
   ba5f6:	b2c0      	uxtb	r0, r0
   ba5f8:	e7d2      	b.n	ba5a0 <pinAvailable+0x8>
   ba5fa:	3809      	subs	r0, #9
   ba5fc:	2801      	cmp	r0, #1
   ba5fe:	d8ee      	bhi.n	ba5de <pinAvailable+0x46>
   ba600:	f000 f8bc 	bl	ba77c <_Z22__fetch_global_Serial1v>
   ba604:	7c00      	ldrb	r0, [r0, #16]
   ba606:	f7fd fcbf 	bl	b7f88 <hal_usart_is_enabled>
   ba60a:	e7f2      	b.n	ba5f2 <pinAvailable+0x5a>
   ba60c:	2003dc90 	.word	0x2003dc90
   ba610:	2003dc94 	.word	0x2003dc94

000ba614 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba614:	2823      	cmp	r0, #35	; 0x23
{
   ba616:	b538      	push	{r3, r4, r5, lr}
   ba618:	4604      	mov	r4, r0
   ba61a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba61c:	d80a      	bhi.n	ba634 <pinMode+0x20>
   ba61e:	29ff      	cmp	r1, #255	; 0xff
   ba620:	d008      	beq.n	ba634 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   ba622:	f7ff ffb9 	bl	ba598 <pinAvailable>
   ba626:	b128      	cbz	r0, ba634 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   ba628:	4629      	mov	r1, r5
   ba62a:	4620      	mov	r0, r4
}
   ba62c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   ba630:	f7fd bb92 	b.w	b7d58 <HAL_Pin_Mode>
}
   ba634:	bd38      	pop	{r3, r4, r5, pc}

000ba636 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   ba636:	b538      	push	{r3, r4, r5, lr}
   ba638:	4604      	mov	r4, r0
   ba63a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   ba63c:	f7fd fb94 	bl	b7d68 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   ba640:	28ff      	cmp	r0, #255	; 0xff
   ba642:	d010      	beq.n	ba666 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   ba644:	2806      	cmp	r0, #6
   ba646:	d804      	bhi.n	ba652 <digitalWrite+0x1c>
   ba648:	234d      	movs	r3, #77	; 0x4d
   ba64a:	fa23 f000 	lsr.w	r0, r3, r0
   ba64e:	07c3      	lsls	r3, r0, #31
   ba650:	d409      	bmi.n	ba666 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   ba652:	4620      	mov	r0, r4
   ba654:	f7ff ffa0 	bl	ba598 <pinAvailable>
   ba658:	b128      	cbz	r0, ba666 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   ba65a:	4629      	mov	r1, r5
   ba65c:	4620      	mov	r0, r4
}
   ba65e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   ba662:	f7fd bb89 	b.w	b7d78 <HAL_GPIO_Write>
}
   ba666:	bd38      	pop	{r3, r4, r5, pc}

000ba668 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   ba668:	280d      	cmp	r0, #13
{
   ba66a:	b510      	push	{r4, lr}
   ba66c:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   ba66e:	bf9c      	itt	ls
   ba670:	340e      	addls	r4, #14
   ba672:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   ba674:	4620      	mov	r0, r4
   ba676:	f7ff ff8f 	bl	ba598 <pinAvailable>
   ba67a:	b150      	cbz	r0, ba692 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   ba67c:	2103      	movs	r1, #3
   ba67e:	4620      	mov	r0, r4
   ba680:	f7fd fb62 	bl	b7d48 <HAL_Validate_Pin_Function>
   ba684:	2803      	cmp	r0, #3
   ba686:	d104      	bne.n	ba692 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   ba688:	4620      	mov	r0, r4
}
   ba68a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   ba68e:	f7fd bb7b 	b.w	b7d88 <hal_adc_read>
}
   ba692:	2000      	movs	r0, #0
   ba694:	bd10      	pop	{r4, pc}

000ba696 <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
   ba696:	b570      	push	{r4, r5, r6, lr}
   ba698:	4604      	mov	r4, r0
   ba69a:	460d      	mov	r5, r1
   ba69c:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
   ba69e:	f7ff ff7b 	bl	ba598 <pinAvailable>
   ba6a2:	b198      	cbz	r0, ba6cc <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   ba6a4:	2102      	movs	r1, #2
   ba6a6:	4620      	mov	r0, r4
   ba6a8:	f7fd fb4e 	bl	b7d48 <HAL_Validate_Pin_Function>
   ba6ac:	2802      	cmp	r0, #2
   ba6ae:	d10d      	bne.n	ba6cc <_Z11analogWritetmm+0x36>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   ba6b0:	4620      	mov	r0, r4
   ba6b2:	f7fd fb59 	bl	b7d68 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   ba6b6:	2801      	cmp	r0, #1
   ba6b8:	d001      	beq.n	ba6be <_Z11analogWritetmm+0x28>
   ba6ba:	2804      	cmp	r0, #4
   ba6bc:	d106      	bne.n	ba6cc <_Z11analogWritetmm+0x36>
        {
            return;
        }

        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   ba6be:	4632      	mov	r2, r6
   ba6c0:	4629      	mov	r1, r5
   ba6c2:	4620      	mov	r0, r4
    }
}
   ba6c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   ba6c8:	f7fd bb66 	b.w	b7d98 <hal_pwm_write_with_frequency_ext>
}
   ba6cc:	bd70      	pop	{r4, r5, r6, pc}

000ba6ce <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba6ce:	4770      	bx	lr

000ba6d0 <_Z17acquireWireBufferv>:
{
   ba6d0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   ba6d2:	2520      	movs	r5, #32
   ba6d4:	2314      	movs	r3, #20
{
   ba6d6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   ba6d8:	6003      	str	r3, [r0, #0]
   ba6da:	6085      	str	r5, [r0, #8]
   ba6dc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ba6de:	4906      	ldr	r1, [pc, #24]	; (ba6f8 <_Z17acquireWireBufferv+0x28>)
   ba6e0:	4628      	mov	r0, r5
   ba6e2:	f000 f871 	bl	ba7c8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ba6e6:	4904      	ldr	r1, [pc, #16]	; (ba6f8 <_Z17acquireWireBufferv+0x28>)
	};
   ba6e8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ba6ea:	4628      	mov	r0, r5
   ba6ec:	f000 f86c 	bl	ba7c8 <_ZnajRKSt9nothrow_t>
	};
   ba6f0:	60e0      	str	r0, [r4, #12]
}
   ba6f2:	4620      	mov	r0, r4
   ba6f4:	bd38      	pop	{r3, r4, r5, pc}
   ba6f6:	bf00      	nop
   ba6f8:	000bc6e4 	.word	0x000bc6e4

000ba6fc <_Z19__fetch_global_Wirev>:
{
   ba6fc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba6fe:	4d0e      	ldr	r5, [pc, #56]	; (ba738 <_Z19__fetch_global_Wirev+0x3c>)
   ba700:	7829      	ldrb	r1, [r5, #0]
   ba702:	f3bf 8f5b 	dmb	ish
   ba706:	f011 0401 	ands.w	r4, r1, #1
{
   ba70a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba70c:	d111      	bne.n	ba732 <_Z19__fetch_global_Wirev+0x36>
   ba70e:	4628      	mov	r0, r5
   ba710:	f7f9 fcd2 	bl	b40b8 <__cxa_guard_acquire>
   ba714:	b168      	cbz	r0, ba732 <_Z19__fetch_global_Wirev+0x36>
   ba716:	a801      	add	r0, sp, #4
   ba718:	f7ff ffda 	bl	ba6d0 <_Z17acquireWireBufferv>
   ba71c:	aa01      	add	r2, sp, #4
   ba71e:	4621      	mov	r1, r4
   ba720:	4806      	ldr	r0, [pc, #24]	; (ba73c <_Z19__fetch_global_Wirev+0x40>)
   ba722:	f7fd fe41 	bl	b83a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba726:	4628      	mov	r0, r5
   ba728:	f7f9 fccb 	bl	b40c2 <__cxa_guard_release>
   ba72c:	4804      	ldr	r0, [pc, #16]	; (ba740 <_Z19__fetch_global_Wirev+0x44>)
   ba72e:	f001 fa77 	bl	bbc20 <atexit>
	return wire;
}
   ba732:	4802      	ldr	r0, [pc, #8]	; (ba73c <_Z19__fetch_global_Wirev+0x40>)
   ba734:	b007      	add	sp, #28
   ba736:	bd30      	pop	{r4, r5, pc}
   ba738:	2003e730 	.word	0x2003e730
   ba73c:	2003e734 	.word	0x2003e734
   ba740:	000ba6cf 	.word	0x000ba6cf

000ba744 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba744:	4770      	bx	lr
	...

000ba748 <_Z20acquireSerial1Bufferv>:
{
   ba748:	b538      	push	{r3, r4, r5, lr}
   ba74a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba74c:	2514      	movs	r5, #20
   ba74e:	462a      	mov	r2, r5
   ba750:	2100      	movs	r1, #0
   ba752:	f001 faab 	bl	bbcac <memset>
   ba756:	8025      	strh	r5, [r4, #0]
   ba758:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba75a:	4907      	ldr	r1, [pc, #28]	; (ba778 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba75c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba75e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba760:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba762:	f000 f831 	bl	ba7c8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba766:	4904      	ldr	r1, [pc, #16]	; (ba778 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba768:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba76a:	4628      	mov	r0, r5
   ba76c:	f000 f82c 	bl	ba7c8 <_ZnajRKSt9nothrow_t>
    };
   ba770:	60e0      	str	r0, [r4, #12]
}
   ba772:	4620      	mov	r0, r4
   ba774:	bd38      	pop	{r3, r4, r5, pc}
   ba776:	bf00      	nop
   ba778:	000bc6e4 	.word	0x000bc6e4

000ba77c <_Z22__fetch_global_Serial1v>:
{
   ba77c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba77e:	4d0e      	ldr	r5, [pc, #56]	; (ba7b8 <_Z22__fetch_global_Serial1v+0x3c>)
   ba780:	7829      	ldrb	r1, [r5, #0]
   ba782:	f3bf 8f5b 	dmb	ish
   ba786:	f011 0401 	ands.w	r4, r1, #1
{
   ba78a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba78c:	d111      	bne.n	ba7b2 <_Z22__fetch_global_Serial1v+0x36>
   ba78e:	4628      	mov	r0, r5
   ba790:	f7f9 fc92 	bl	b40b8 <__cxa_guard_acquire>
   ba794:	b168      	cbz	r0, ba7b2 <_Z22__fetch_global_Serial1v+0x36>
   ba796:	a801      	add	r0, sp, #4
   ba798:	f7ff ffd6 	bl	ba748 <_Z20acquireSerial1Bufferv>
   ba79c:	aa01      	add	r2, sp, #4
   ba79e:	4621      	mov	r1, r4
   ba7a0:	4806      	ldr	r0, [pc, #24]	; (ba7bc <_Z22__fetch_global_Serial1v+0x40>)
   ba7a2:	f7ff fd3f 	bl	ba224 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba7a6:	4628      	mov	r0, r5
   ba7a8:	f7f9 fc8b 	bl	b40c2 <__cxa_guard_release>
   ba7ac:	4804      	ldr	r0, [pc, #16]	; (ba7c0 <_Z22__fetch_global_Serial1v+0x44>)
   ba7ae:	f001 fa37 	bl	bbc20 <atexit>
    return serial1;
}
   ba7b2:	4802      	ldr	r0, [pc, #8]	; (ba7bc <_Z22__fetch_global_Serial1v+0x40>)
   ba7b4:	b007      	add	sp, #28
   ba7b6:	bd30      	pop	{r4, r5, pc}
   ba7b8:	2003e748 	.word	0x2003e748
   ba7bc:	2003e74c 	.word	0x2003e74c
   ba7c0:	000ba745 	.word	0x000ba745

000ba7c4 <_ZnwjRKSt9nothrow_t>:
   ba7c4:	f7f9 bc67 	b.w	b4096 <_Znwj>

000ba7c8 <_ZnajRKSt9nothrow_t>:
   ba7c8:	f7f9 bc67 	b.w	b409a <_Znaj>
   ba7cc:	0000      	movs	r0, r0
	...

000ba7d0 <ceil>:
   ba7d0:	ec51 0b10 	vmov	r0, r1, d0
   ba7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba7d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
   ba7da:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   ba7de:	2d13      	cmp	r5, #19
   ba7e0:	ee10 6a10 	vmov	r6, s0
   ba7e4:	460c      	mov	r4, r1
   ba7e6:	dc32      	bgt.n	ba84e <ceil+0x7e>
   ba7e8:	2d00      	cmp	r5, #0
   ba7ea:	db1e      	blt.n	ba82a <ceil+0x5a>
   ba7ec:	4f36      	ldr	r7, [pc, #216]	; (ba8c8 <ceil+0xf8>)
   ba7ee:	412f      	asrs	r7, r5
   ba7f0:	ea01 0307 	and.w	r3, r1, r7
   ba7f4:	4303      	orrs	r3, r0
   ba7f6:	d02f      	beq.n	ba858 <ceil+0x88>
   ba7f8:	a331      	add	r3, pc, #196	; (adr r3, ba8c0 <ceil+0xf0>)
   ba7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba7fe:	f000 fb71 	bl	baee4 <__adddf3>
   ba802:	2200      	movs	r2, #0
   ba804:	2300      	movs	r3, #0
   ba806:	f000 ffb3 	bl	bb770 <__aeabi_dcmpgt>
   ba80a:	b148      	cbz	r0, ba820 <ceil+0x50>
   ba80c:	2c00      	cmp	r4, #0
   ba80e:	dd04      	ble.n	ba81a <ceil+0x4a>
   ba810:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   ba814:	fa43 f505 	asr.w	r5, r3, r5
   ba818:	442c      	add	r4, r5
   ba81a:	ea24 0407 	bic.w	r4, r4, r7
   ba81e:	2600      	movs	r6, #0
   ba820:	4623      	mov	r3, r4
   ba822:	4632      	mov	r2, r6
   ba824:	ec43 2b10 	vmov	d0, r2, r3
   ba828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba82a:	a325      	add	r3, pc, #148	; (adr r3, ba8c0 <ceil+0xf0>)
   ba82c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba830:	f000 fb58 	bl	baee4 <__adddf3>
   ba834:	2200      	movs	r2, #0
   ba836:	2300      	movs	r3, #0
   ba838:	f000 ff9a 	bl	bb770 <__aeabi_dcmpgt>
   ba83c:	2800      	cmp	r0, #0
   ba83e:	d0ef      	beq.n	ba820 <ceil+0x50>
   ba840:	2c00      	cmp	r4, #0
   ba842:	db39      	blt.n	ba8b8 <ceil+0xe8>
   ba844:	4326      	orrs	r6, r4
   ba846:	d033      	beq.n	ba8b0 <ceil+0xe0>
   ba848:	4c20      	ldr	r4, [pc, #128]	; (ba8cc <ceil+0xfc>)
   ba84a:	2600      	movs	r6, #0
   ba84c:	e7e8      	b.n	ba820 <ceil+0x50>
   ba84e:	2d33      	cmp	r5, #51	; 0x33
   ba850:	dd05      	ble.n	ba85e <ceil+0x8e>
   ba852:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   ba856:	d023      	beq.n	ba8a0 <ceil+0xd0>
   ba858:	ec41 0b10 	vmov	d0, r0, r1
   ba85c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba85e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   ba862:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   ba866:	40df      	lsrs	r7, r3
   ba868:	4207      	tst	r7, r0
   ba86a:	d0f5      	beq.n	ba858 <ceil+0x88>
   ba86c:	a314      	add	r3, pc, #80	; (adr r3, ba8c0 <ceil+0xf0>)
   ba86e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba872:	f000 fb37 	bl	baee4 <__adddf3>
   ba876:	2200      	movs	r2, #0
   ba878:	2300      	movs	r3, #0
   ba87a:	f000 ff79 	bl	bb770 <__aeabi_dcmpgt>
   ba87e:	2800      	cmp	r0, #0
   ba880:	d0ce      	beq.n	ba820 <ceil+0x50>
   ba882:	2c00      	cmp	r4, #0
   ba884:	dd09      	ble.n	ba89a <ceil+0xca>
   ba886:	2d14      	cmp	r5, #20
   ba888:	d014      	beq.n	ba8b4 <ceil+0xe4>
   ba88a:	2301      	movs	r3, #1
   ba88c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   ba890:	fa03 f505 	lsl.w	r5, r3, r5
   ba894:	19ae      	adds	r6, r5, r6
   ba896:	bf28      	it	cs
   ba898:	18e4      	addcs	r4, r4, r3
   ba89a:	ea26 0607 	bic.w	r6, r6, r7
   ba89e:	e7bf      	b.n	ba820 <ceil+0x50>
   ba8a0:	ee10 2a10 	vmov	r2, s0
   ba8a4:	460b      	mov	r3, r1
   ba8a6:	f000 fb1d 	bl	baee4 <__adddf3>
   ba8aa:	ec41 0b10 	vmov	d0, r0, r1
   ba8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba8b0:	4634      	mov	r4, r6
   ba8b2:	e7b5      	b.n	ba820 <ceil+0x50>
   ba8b4:	3401      	adds	r4, #1
   ba8b6:	e7f0      	b.n	ba89a <ceil+0xca>
   ba8b8:	2600      	movs	r6, #0
   ba8ba:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   ba8be:	e7af      	b.n	ba820 <ceil+0x50>
   ba8c0:	8800759c 	.word	0x8800759c
   ba8c4:	7e37e43c 	.word	0x7e37e43c
   ba8c8:	000fffff 	.word	0x000fffff
   ba8cc:	3ff00000 	.word	0x3ff00000

000ba8d0 <log10>:
   ba8d0:	b538      	push	{r3, r4, r5, lr}
   ba8d2:	ed2d 8b02 	vpush	{d8}
   ba8d6:	ec55 4b10 	vmov	r4, r5, d0
   ba8da:	f000 f841 	bl	ba960 <__ieee754_log10>
   ba8de:	4b1e      	ldr	r3, [pc, #120]	; (ba958 <log10+0x88>)
   ba8e0:	eeb0 8a40 	vmov.f32	s16, s0
   ba8e4:	eef0 8a60 	vmov.f32	s17, s1
   ba8e8:	f993 3000 	ldrsb.w	r3, [r3]
   ba8ec:	3301      	adds	r3, #1
   ba8ee:	d01a      	beq.n	ba926 <log10+0x56>
   ba8f0:	4622      	mov	r2, r4
   ba8f2:	462b      	mov	r3, r5
   ba8f4:	4620      	mov	r0, r4
   ba8f6:	4629      	mov	r1, r5
   ba8f8:	f000 ff44 	bl	bb784 <__aeabi_dcmpun>
   ba8fc:	b998      	cbnz	r0, ba926 <log10+0x56>
   ba8fe:	2200      	movs	r2, #0
   ba900:	2300      	movs	r3, #0
   ba902:	4620      	mov	r0, r4
   ba904:	4629      	mov	r1, r5
   ba906:	f000 ff1f 	bl	bb748 <__aeabi_dcmple>
   ba90a:	b160      	cbz	r0, ba926 <log10+0x56>
   ba90c:	2200      	movs	r2, #0
   ba90e:	2300      	movs	r3, #0
   ba910:	4620      	mov	r0, r4
   ba912:	4629      	mov	r1, r5
   ba914:	f000 ff04 	bl	bb720 <__aeabi_dcmpeq>
   ba918:	b160      	cbz	r0, ba934 <log10+0x64>
   ba91a:	f7fd fc89 	bl	b8230 <__errno>
   ba91e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; ba950 <log10+0x80>
   ba922:	2322      	movs	r3, #34	; 0x22
   ba924:	6003      	str	r3, [r0, #0]
   ba926:	eeb0 0a48 	vmov.f32	s0, s16
   ba92a:	eef0 0a68 	vmov.f32	s1, s17
   ba92e:	ecbd 8b02 	vpop	{d8}
   ba932:	bd38      	pop	{r3, r4, r5, pc}
   ba934:	f7fd fc7c 	bl	b8230 <__errno>
   ba938:	ecbd 8b02 	vpop	{d8}
   ba93c:	4603      	mov	r3, r0
   ba93e:	2221      	movs	r2, #33	; 0x21
   ba940:	601a      	str	r2, [r3, #0]
   ba942:	4806      	ldr	r0, [pc, #24]	; (ba95c <log10+0x8c>)
   ba944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ba948:	f000 b8a2 	b.w	baa90 <nan>
   ba94c:	f3af 8000 	nop.w
   ba950:	00000000 	.word	0x00000000
   ba954:	fff00000 	.word	0xfff00000
   ba958:	2003dc20 	.word	0x2003dc20
   ba95c:	000bc6e8 	.word	0x000bc6e8

000ba960 <__ieee754_log10>:
   ba960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba964:	ec55 4b10 	vmov	r4, r5, d0
   ba968:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
   ba96c:	462b      	mov	r3, r5
   ba96e:	da1e      	bge.n	ba9ae <__ieee754_log10+0x4e>
   ba970:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   ba974:	4322      	orrs	r2, r4
   ba976:	d060      	beq.n	baa3a <__ieee754_log10+0xda>
   ba978:	2d00      	cmp	r5, #0
   ba97a:	db68      	blt.n	baa4e <__ieee754_log10+0xee>
   ba97c:	4b40      	ldr	r3, [pc, #256]	; (baa80 <__ieee754_log10+0x120>)
   ba97e:	4629      	mov	r1, r5
   ba980:	2200      	movs	r2, #0
   ba982:	ee10 0a10 	vmov	r0, s0
   ba986:	f000 fc63 	bl	bb250 <__aeabi_dmul>
   ba98a:	4a3e      	ldr	r2, [pc, #248]	; (baa84 <__ieee754_log10+0x124>)
   ba98c:	460d      	mov	r5, r1
   ba98e:	462b      	mov	r3, r5
   ba990:	4293      	cmp	r3, r2
   ba992:	4604      	mov	r4, r0
   ba994:	f06f 0135 	mvn.w	r1, #53	; 0x35
   ba998:	dd0e      	ble.n	ba9b8 <__ieee754_log10+0x58>
   ba99a:	4622      	mov	r2, r4
   ba99c:	462b      	mov	r3, r5
   ba99e:	4620      	mov	r0, r4
   ba9a0:	4629      	mov	r1, r5
   ba9a2:	f000 fa9f 	bl	baee4 <__adddf3>
   ba9a6:	ec41 0b10 	vmov	d0, r0, r1
   ba9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba9ae:	4a35      	ldr	r2, [pc, #212]	; (baa84 <__ieee754_log10+0x124>)
   ba9b0:	4293      	cmp	r3, r2
   ba9b2:	f04f 0100 	mov.w	r1, #0
   ba9b6:	dcf0      	bgt.n	ba99a <__ieee754_log10+0x3a>
   ba9b8:	1518      	asrs	r0, r3, #20
   ba9ba:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   ba9be:	4408      	add	r0, r1
   ba9c0:	0fc7      	lsrs	r7, r0, #31
   ba9c2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   ba9c6:	f3c3 0613 	ubfx	r6, r3, #0, #20
   ba9ca:	f000 fbd7 	bl	bb17c <__aeabi_i2d>
   ba9ce:	f5c7 737f 	rsb	r3, r7, #1020	; 0x3fc
   ba9d2:	3303      	adds	r3, #3
   ba9d4:	ea46 5503 	orr.w	r5, r6, r3, lsl #20
   ba9d8:	ec45 4b10 	vmov	d0, r4, r5
   ba9dc:	4606      	mov	r6, r0
   ba9de:	460f      	mov	r7, r1
   ba9e0:	f000 f85e 	bl	baaa0 <__ieee754_log>
   ba9e4:	a320      	add	r3, pc, #128	; (adr r3, baa68 <__ieee754_log10+0x108>)
   ba9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba9ea:	4630      	mov	r0, r6
   ba9ec:	4639      	mov	r1, r7
   ba9ee:	ec59 8b10 	vmov	r8, r9, d0
   ba9f2:	f000 fc2d 	bl	bb250 <__aeabi_dmul>
   ba9f6:	a31e      	add	r3, pc, #120	; (adr r3, baa70 <__ieee754_log10+0x110>)
   ba9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba9fc:	4604      	mov	r4, r0
   ba9fe:	460d      	mov	r5, r1
   baa00:	4640      	mov	r0, r8
   baa02:	4649      	mov	r1, r9
   baa04:	f000 fc24 	bl	bb250 <__aeabi_dmul>
   baa08:	4602      	mov	r2, r0
   baa0a:	460b      	mov	r3, r1
   baa0c:	4620      	mov	r0, r4
   baa0e:	4629      	mov	r1, r5
   baa10:	f000 fa68 	bl	baee4 <__adddf3>
   baa14:	a318      	add	r3, pc, #96	; (adr r3, baa78 <__ieee754_log10+0x118>)
   baa16:	e9d3 2300 	ldrd	r2, r3, [r3]
   baa1a:	4604      	mov	r4, r0
   baa1c:	460d      	mov	r5, r1
   baa1e:	4630      	mov	r0, r6
   baa20:	4639      	mov	r1, r7
   baa22:	f000 fc15 	bl	bb250 <__aeabi_dmul>
   baa26:	4602      	mov	r2, r0
   baa28:	460b      	mov	r3, r1
   baa2a:	4620      	mov	r0, r4
   baa2c:	4629      	mov	r1, r5
   baa2e:	f000 fa59 	bl	baee4 <__adddf3>
   baa32:	ec41 0b10 	vmov	d0, r0, r1
   baa36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   baa3a:	2200      	movs	r2, #0
   baa3c:	2300      	movs	r3, #0
   baa3e:	4912      	ldr	r1, [pc, #72]	; (baa88 <__ieee754_log10+0x128>)
   baa40:	2000      	movs	r0, #0
   baa42:	f000 fd2f 	bl	bb4a4 <__aeabi_ddiv>
   baa46:	ec41 0b10 	vmov	d0, r0, r1
   baa4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   baa4e:	ee10 2a10 	vmov	r2, s0
   baa52:	4620      	mov	r0, r4
   baa54:	4629      	mov	r1, r5
   baa56:	f000 fa43 	bl	baee0 <__aeabi_dsub>
   baa5a:	2200      	movs	r2, #0
   baa5c:	2300      	movs	r3, #0
   baa5e:	f000 fd21 	bl	bb4a4 <__aeabi_ddiv>
   baa62:	ec41 0b10 	vmov	d0, r0, r1
   baa66:	e7a0      	b.n	ba9aa <__ieee754_log10+0x4a>
   baa68:	11f12b36 	.word	0x11f12b36
   baa6c:	3d59fef3 	.word	0x3d59fef3
   baa70:	1526e50e 	.word	0x1526e50e
   baa74:	3fdbcb7b 	.word	0x3fdbcb7b
   baa78:	509f6000 	.word	0x509f6000
   baa7c:	3fd34413 	.word	0x3fd34413
   baa80:	43500000 	.word	0x43500000
   baa84:	7fefffff 	.word	0x7fefffff
   baa88:	c3500000 	.word	0xc3500000
   baa8c:	00000000 	.word	0x00000000

000baa90 <nan>:
   baa90:	ed9f 0b01 	vldr	d0, [pc, #4]	; baa98 <nan+0x8>
   baa94:	4770      	bx	lr
   baa96:	bf00      	nop
   baa98:	00000000 	.word	0x00000000
   baa9c:	7ff80000 	.word	0x7ff80000

000baaa0 <__ieee754_log>:
   baaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baaa4:	ec51 0b10 	vmov	r0, r1, d0
   baaa8:	ed2d 8b02 	vpush	{d8}
   baaac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   baab0:	b085      	sub	sp, #20
   baab2:	460f      	mov	r7, r1
   baab4:	da58      	bge.n	bab68 <__ieee754_log+0xc8>
   baab6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   baaba:	4303      	orrs	r3, r0
   baabc:	ee10 2a10 	vmov	r2, s0
   baac0:	f000 80fc 	beq.w	bacbc <__ieee754_log+0x21c>
   baac4:	2900      	cmp	r1, #0
   baac6:	f2c0 813c 	blt.w	bad42 <__ieee754_log+0x2a2>
   baaca:	4be1      	ldr	r3, [pc, #900]	; (bae50 <__ieee754_log+0x3b0>)
   baacc:	2200      	movs	r2, #0
   baace:	f000 fbbf 	bl	bb250 <__aeabi_dmul>
   baad2:	4be0      	ldr	r3, [pc, #896]	; (bae54 <__ieee754_log+0x3b4>)
   baad4:	460f      	mov	r7, r1
   baad6:	429f      	cmp	r7, r3
   baad8:	f06f 0235 	mvn.w	r2, #53	; 0x35
   baadc:	dc49      	bgt.n	bab72 <__ieee754_log+0xd2>
   baade:	153e      	asrs	r6, r7, #20
   baae0:	f3c7 0713 	ubfx	r7, r7, #0, #20
   baae4:	f507 2315 	add.w	r3, r7, #610304	; 0x95000
   baae8:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   baaec:	f603 7364 	addw	r3, r3, #3940	; 0xf64
   baaf0:	4416      	add	r6, r2
   baaf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
   baaf6:	eb06 5613 	add.w	r6, r6, r3, lsr #20
   baafa:	f083 537f 	eor.w	r3, r3, #1069547520	; 0x3fc00000
   baafe:	f483 1340 	eor.w	r3, r3, #3145728	; 0x300000
   bab02:	ea43 0107 	orr.w	r1, r3, r7
   bab06:	2200      	movs	r2, #0
   bab08:	4bd3      	ldr	r3, [pc, #844]	; (bae58 <__ieee754_log+0x3b8>)
   bab0a:	f000 f9e9 	bl	baee0 <__aeabi_dsub>
   bab0e:	1cbb      	adds	r3, r7, #2
   bab10:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bab14:	2b02      	cmp	r3, #2
   bab16:	4682      	mov	sl, r0
   bab18:	468b      	mov	fp, r1
   bab1a:	dc35      	bgt.n	bab88 <__ieee754_log+0xe8>
   bab1c:	2200      	movs	r2, #0
   bab1e:	2300      	movs	r3, #0
   bab20:	f000 fdfe 	bl	bb720 <__aeabi_dcmpeq>
   bab24:	2800      	cmp	r0, #0
   bab26:	f000 80d6 	beq.w	bacd6 <__ieee754_log+0x236>
   bab2a:	2e00      	cmp	r6, #0
   bab2c:	f000 8160 	beq.w	badf0 <__ieee754_log+0x350>
   bab30:	4630      	mov	r0, r6
   bab32:	f000 fb23 	bl	bb17c <__aeabi_i2d>
   bab36:	a3b0      	add	r3, pc, #704	; (adr r3, badf8 <__ieee754_log+0x358>)
   bab38:	e9d3 2300 	ldrd	r2, r3, [r3]
   bab3c:	4606      	mov	r6, r0
   bab3e:	460f      	mov	r7, r1
   bab40:	f000 fb86 	bl	bb250 <__aeabi_dmul>
   bab44:	a3ae      	add	r3, pc, #696	; (adr r3, bae00 <__ieee754_log+0x360>)
   bab46:	e9d3 2300 	ldrd	r2, r3, [r3]
   bab4a:	4604      	mov	r4, r0
   bab4c:	460d      	mov	r5, r1
   bab4e:	4630      	mov	r0, r6
   bab50:	4639      	mov	r1, r7
   bab52:	f000 fb7d 	bl	bb250 <__aeabi_dmul>
   bab56:	4602      	mov	r2, r0
   bab58:	460b      	mov	r3, r1
   bab5a:	4620      	mov	r0, r4
   bab5c:	4629      	mov	r1, r5
   bab5e:	f000 f9c1 	bl	baee4 <__adddf3>
   bab62:	ec41 0b10 	vmov	d0, r0, r1
   bab66:	e00a      	b.n	bab7e <__ieee754_log+0xde>
   bab68:	4bba      	ldr	r3, [pc, #744]	; (bae54 <__ieee754_log+0x3b4>)
   bab6a:	429f      	cmp	r7, r3
   bab6c:	f04f 0200 	mov.w	r2, #0
   bab70:	ddb5      	ble.n	baade <__ieee754_log+0x3e>
   bab72:	4602      	mov	r2, r0
   bab74:	460b      	mov	r3, r1
   bab76:	f000 f9b5 	bl	baee4 <__adddf3>
   bab7a:	ec41 0b10 	vmov	d0, r0, r1
   bab7e:	b005      	add	sp, #20
   bab80:	ecbd 8b02 	vpop	{d8}
   bab84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bab88:	f5a7 23c2 	sub.w	r3, r7, #397312	; 0x61000
   bab8c:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   bab90:	9301      	str	r3, [sp, #4]
   bab92:	2200      	movs	r2, #0
   bab94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bab98:	f000 f9a4 	bl	baee4 <__adddf3>
   bab9c:	4602      	mov	r2, r0
   bab9e:	460b      	mov	r3, r1
   baba0:	4650      	mov	r0, sl
   baba2:	4659      	mov	r1, fp
   baba4:	f000 fc7e 	bl	bb4a4 <__aeabi_ddiv>
   baba8:	ec41 0b18 	vmov	d8, r0, r1
   babac:	4630      	mov	r0, r6
   babae:	f000 fae5 	bl	bb17c <__aeabi_i2d>
   babb2:	ec53 2b18 	vmov	r2, r3, d8
   babb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   babba:	ec51 0b18 	vmov	r0, r1, d8
   babbe:	f000 fb47 	bl	bb250 <__aeabi_dmul>
   babc2:	4602      	mov	r2, r0
   babc4:	460b      	mov	r3, r1
   babc6:	4680      	mov	r8, r0
   babc8:	4689      	mov	r9, r1
   babca:	f000 fb41 	bl	bb250 <__aeabi_dmul>
   babce:	a38e      	add	r3, pc, #568	; (adr r3, bae08 <__ieee754_log+0x368>)
   babd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   babd4:	4604      	mov	r4, r0
   babd6:	460d      	mov	r5, r1
   babd8:	f000 fb3a 	bl	bb250 <__aeabi_dmul>
   babdc:	a38c      	add	r3, pc, #560	; (adr r3, bae10 <__ieee754_log+0x370>)
   babde:	e9d3 2300 	ldrd	r2, r3, [r3]
   babe2:	f000 f97f 	bl	baee4 <__adddf3>
   babe6:	4622      	mov	r2, r4
   babe8:	462b      	mov	r3, r5
   babea:	f000 fb31 	bl	bb250 <__aeabi_dmul>
   babee:	a38a      	add	r3, pc, #552	; (adr r3, bae18 <__ieee754_log+0x378>)
   babf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   babf4:	f000 f976 	bl	baee4 <__adddf3>
   babf8:	4622      	mov	r2, r4
   babfa:	462b      	mov	r3, r5
   babfc:	f000 fb28 	bl	bb250 <__aeabi_dmul>
   bac00:	a387      	add	r3, pc, #540	; (adr r3, bae20 <__ieee754_log+0x380>)
   bac02:	e9d3 2300 	ldrd	r2, r3, [r3]
   bac06:	f000 f96d 	bl	baee4 <__adddf3>
   bac0a:	4642      	mov	r2, r8
   bac0c:	464b      	mov	r3, r9
   bac0e:	f000 fb1f 	bl	bb250 <__aeabi_dmul>
   bac12:	a385      	add	r3, pc, #532	; (adr r3, bae28 <__ieee754_log+0x388>)
   bac14:	e9d3 2300 	ldrd	r2, r3, [r3]
   bac18:	4680      	mov	r8, r0
   bac1a:	4689      	mov	r9, r1
   bac1c:	4620      	mov	r0, r4
   bac1e:	4629      	mov	r1, r5
   bac20:	f000 fb16 	bl	bb250 <__aeabi_dmul>
   bac24:	a382      	add	r3, pc, #520	; (adr r3, bae30 <__ieee754_log+0x390>)
   bac26:	e9d3 2300 	ldrd	r2, r3, [r3]
   bac2a:	f000 f95b 	bl	baee4 <__adddf3>
   bac2e:	4622      	mov	r2, r4
   bac30:	462b      	mov	r3, r5
   bac32:	f000 fb0d 	bl	bb250 <__aeabi_dmul>
   bac36:	a380      	add	r3, pc, #512	; (adr r3, bae38 <__ieee754_log+0x398>)
   bac38:	e9d3 2300 	ldrd	r2, r3, [r3]
   bac3c:	f000 f952 	bl	baee4 <__adddf3>
   bac40:	4622      	mov	r2, r4
   bac42:	462b      	mov	r3, r5
   bac44:	f000 fb04 	bl	bb250 <__aeabi_dmul>
   bac48:	460b      	mov	r3, r1
   bac4a:	4602      	mov	r2, r0
   bac4c:	4649      	mov	r1, r9
   bac4e:	4640      	mov	r0, r8
   bac50:	f000 f948 	bl	baee4 <__adddf3>
   bac54:	f5c7 27d7 	rsb	r7, r7, #440320	; 0x6b800
   bac58:	9b01      	ldr	r3, [sp, #4]
   bac5a:	3751      	adds	r7, #81	; 0x51
   bac5c:	431f      	orrs	r7, r3
   bac5e:	2f00      	cmp	r7, #0
   bac60:	4680      	mov	r8, r0
   bac62:	4689      	mov	r9, r1
   bac64:	dd5f      	ble.n	bad26 <__ieee754_log+0x286>
   bac66:	4b7d      	ldr	r3, [pc, #500]	; (bae5c <__ieee754_log+0x3bc>)
   bac68:	2200      	movs	r2, #0
   bac6a:	4650      	mov	r0, sl
   bac6c:	4659      	mov	r1, fp
   bac6e:	f000 faef 	bl	bb250 <__aeabi_dmul>
   bac72:	4652      	mov	r2, sl
   bac74:	465b      	mov	r3, fp
   bac76:	f000 faeb 	bl	bb250 <__aeabi_dmul>
   bac7a:	4604      	mov	r4, r0
   bac7c:	460d      	mov	r5, r1
   bac7e:	2e00      	cmp	r6, #0
   bac80:	d169      	bne.n	bad56 <__ieee754_log+0x2b6>
   bac82:	4622      	mov	r2, r4
   bac84:	462b      	mov	r3, r5
   bac86:	4640      	mov	r0, r8
   bac88:	4649      	mov	r1, r9
   bac8a:	f000 f92b 	bl	baee4 <__adddf3>
   bac8e:	ec53 2b18 	vmov	r2, r3, d8
   bac92:	f000 fadd 	bl	bb250 <__aeabi_dmul>
   bac96:	4602      	mov	r2, r0
   bac98:	460b      	mov	r3, r1
   bac9a:	4620      	mov	r0, r4
   bac9c:	4629      	mov	r1, r5
   bac9e:	f000 f91f 	bl	baee0 <__aeabi_dsub>
   baca2:	4602      	mov	r2, r0
   baca4:	460b      	mov	r3, r1
   baca6:	4650      	mov	r0, sl
   baca8:	4659      	mov	r1, fp
   bacaa:	f000 f919 	bl	baee0 <__aeabi_dsub>
   bacae:	ec41 0b10 	vmov	d0, r0, r1
   bacb2:	b005      	add	sp, #20
   bacb4:	ecbd 8b02 	vpop	{d8}
   bacb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bacbc:	2200      	movs	r2, #0
   bacbe:	2300      	movs	r3, #0
   bacc0:	4967      	ldr	r1, [pc, #412]	; (bae60 <__ieee754_log+0x3c0>)
   bacc2:	2000      	movs	r0, #0
   bacc4:	f000 fbee 	bl	bb4a4 <__aeabi_ddiv>
   bacc8:	ec41 0b10 	vmov	d0, r0, r1
   baccc:	b005      	add	sp, #20
   bacce:	ecbd 8b02 	vpop	{d8}
   bacd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bacd6:	a35a      	add	r3, pc, #360	; (adr r3, bae40 <__ieee754_log+0x3a0>)
   bacd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bacdc:	4650      	mov	r0, sl
   bacde:	4659      	mov	r1, fp
   bace0:	f000 fab6 	bl	bb250 <__aeabi_dmul>
   bace4:	4602      	mov	r2, r0
   bace6:	460b      	mov	r3, r1
   bace8:	2000      	movs	r0, #0
   bacea:	495c      	ldr	r1, [pc, #368]	; (bae5c <__ieee754_log+0x3bc>)
   bacec:	f000 f8f8 	bl	baee0 <__aeabi_dsub>
   bacf0:	4652      	mov	r2, sl
   bacf2:	4604      	mov	r4, r0
   bacf4:	460d      	mov	r5, r1
   bacf6:	465b      	mov	r3, fp
   bacf8:	4650      	mov	r0, sl
   bacfa:	4659      	mov	r1, fp
   bacfc:	f000 faa8 	bl	bb250 <__aeabi_dmul>
   bad00:	4602      	mov	r2, r0
   bad02:	460b      	mov	r3, r1
   bad04:	4620      	mov	r0, r4
   bad06:	4629      	mov	r1, r5
   bad08:	f000 faa2 	bl	bb250 <__aeabi_dmul>
   bad0c:	4604      	mov	r4, r0
   bad0e:	460d      	mov	r5, r1
   bad10:	2e00      	cmp	r6, #0
   bad12:	d159      	bne.n	badc8 <__ieee754_log+0x328>
   bad14:	4602      	mov	r2, r0
   bad16:	460b      	mov	r3, r1
   bad18:	4650      	mov	r0, sl
   bad1a:	4659      	mov	r1, fp
   bad1c:	f000 f8e0 	bl	baee0 <__aeabi_dsub>
   bad20:	ec41 0b10 	vmov	d0, r0, r1
   bad24:	e72b      	b.n	bab7e <__ieee754_log+0xde>
   bad26:	2e00      	cmp	r6, #0
   bad28:	f040 809c 	bne.w	bae64 <__ieee754_log+0x3c4>
   bad2c:	4602      	mov	r2, r0
   bad2e:	460b      	mov	r3, r1
   bad30:	4650      	mov	r0, sl
   bad32:	4659      	mov	r1, fp
   bad34:	f000 f8d4 	bl	baee0 <__aeabi_dsub>
   bad38:	ec53 2b18 	vmov	r2, r3, d8
   bad3c:	f000 fa88 	bl	bb250 <__aeabi_dmul>
   bad40:	e7af      	b.n	baca2 <__ieee754_log+0x202>
   bad42:	460b      	mov	r3, r1
   bad44:	f000 f8cc 	bl	baee0 <__aeabi_dsub>
   bad48:	2200      	movs	r2, #0
   bad4a:	2300      	movs	r3, #0
   bad4c:	f000 fbaa 	bl	bb4a4 <__aeabi_ddiv>
   bad50:	ec41 0b10 	vmov	d0, r0, r1
   bad54:	e713      	b.n	bab7e <__ieee754_log+0xde>
   bad56:	a328      	add	r3, pc, #160	; (adr r3, badf8 <__ieee754_log+0x358>)
   bad58:	e9d3 2300 	ldrd	r2, r3, [r3]
   bad5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   bad60:	f000 fa76 	bl	bb250 <__aeabi_dmul>
   bad64:	4622      	mov	r2, r4
   bad66:	462b      	mov	r3, r5
   bad68:	4606      	mov	r6, r0
   bad6a:	460f      	mov	r7, r1
   bad6c:	4640      	mov	r0, r8
   bad6e:	4649      	mov	r1, r9
   bad70:	f000 f8b8 	bl	baee4 <__adddf3>
   bad74:	ec53 2b18 	vmov	r2, r3, d8
   bad78:	f000 fa6a 	bl	bb250 <__aeabi_dmul>
   bad7c:	a320      	add	r3, pc, #128	; (adr r3, bae00 <__ieee754_log+0x360>)
   bad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bad82:	4680      	mov	r8, r0
   bad84:	4689      	mov	r9, r1
   bad86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   bad8a:	f000 fa61 	bl	bb250 <__aeabi_dmul>
   bad8e:	4602      	mov	r2, r0
   bad90:	460b      	mov	r3, r1
   bad92:	4640      	mov	r0, r8
   bad94:	4649      	mov	r1, r9
   bad96:	f000 f8a5 	bl	baee4 <__adddf3>
   bad9a:	4602      	mov	r2, r0
   bad9c:	460b      	mov	r3, r1
   bad9e:	4620      	mov	r0, r4
   bada0:	4629      	mov	r1, r5
   bada2:	f000 f89d 	bl	baee0 <__aeabi_dsub>
   bada6:	4652      	mov	r2, sl
   bada8:	465b      	mov	r3, fp
   badaa:	f000 f899 	bl	baee0 <__aeabi_dsub>
   badae:	4602      	mov	r2, r0
   badb0:	460b      	mov	r3, r1
   badb2:	4630      	mov	r0, r6
   badb4:	4639      	mov	r1, r7
   badb6:	f000 f893 	bl	baee0 <__aeabi_dsub>
   badba:	ec41 0b10 	vmov	d0, r0, r1
   badbe:	b005      	add	sp, #20
   badc0:	ecbd 8b02 	vpop	{d8}
   badc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   badc8:	4630      	mov	r0, r6
   badca:	f000 f9d7 	bl	bb17c <__aeabi_i2d>
   badce:	a30a      	add	r3, pc, #40	; (adr r3, badf8 <__ieee754_log+0x358>)
   badd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   badd4:	4680      	mov	r8, r0
   badd6:	4689      	mov	r9, r1
   badd8:	f000 fa3a 	bl	bb250 <__aeabi_dmul>
   baddc:	a308      	add	r3, pc, #32	; (adr r3, bae00 <__ieee754_log+0x360>)
   badde:	e9d3 2300 	ldrd	r2, r3, [r3]
   bade2:	4606      	mov	r6, r0
   bade4:	460f      	mov	r7, r1
   bade6:	4640      	mov	r0, r8
   bade8:	4649      	mov	r1, r9
   badea:	f000 fa31 	bl	bb250 <__aeabi_dmul>
   badee:	e7d4      	b.n	bad9a <__ieee754_log+0x2fa>
   badf0:	ed9f 0b15 	vldr	d0, [pc, #84]	; bae48 <__ieee754_log+0x3a8>
   badf4:	e6c3      	b.n	bab7e <__ieee754_log+0xde>
   badf6:	bf00      	nop
   badf8:	fee00000 	.word	0xfee00000
   badfc:	3fe62e42 	.word	0x3fe62e42
   bae00:	35793c76 	.word	0x35793c76
   bae04:	3dea39ef 	.word	0x3dea39ef
   bae08:	df3e5244 	.word	0xdf3e5244
   bae0c:	3fc2f112 	.word	0x3fc2f112
   bae10:	96cb03de 	.word	0x96cb03de
   bae14:	3fc74664 	.word	0x3fc74664
   bae18:	94229359 	.word	0x94229359
   bae1c:	3fd24924 	.word	0x3fd24924
   bae20:	55555593 	.word	0x55555593
   bae24:	3fe55555 	.word	0x3fe55555
   bae28:	d078c69f 	.word	0xd078c69f
   bae2c:	3fc39a09 	.word	0x3fc39a09
   bae30:	1d8e78af 	.word	0x1d8e78af
   bae34:	3fcc71c5 	.word	0x3fcc71c5
   bae38:	9997fa04 	.word	0x9997fa04
   bae3c:	3fd99999 	.word	0x3fd99999
   bae40:	55555555 	.word	0x55555555
   bae44:	3fd55555 	.word	0x3fd55555
	...
   bae50:	43500000 	.word	0x43500000
   bae54:	7fefffff 	.word	0x7fefffff
   bae58:	3ff00000 	.word	0x3ff00000
   bae5c:	3fe00000 	.word	0x3fe00000
   bae60:	c3500000 	.word	0xc3500000
   bae64:	a318      	add	r3, pc, #96	; (adr r3, baec8 <__ieee754_log+0x428>)
   bae66:	e9d3 2300 	ldrd	r2, r3, [r3]
   bae6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   bae6e:	f000 f9ef 	bl	bb250 <__aeabi_dmul>
   bae72:	4642      	mov	r2, r8
   bae74:	464b      	mov	r3, r9
   bae76:	4604      	mov	r4, r0
   bae78:	460d      	mov	r5, r1
   bae7a:	4650      	mov	r0, sl
   bae7c:	4659      	mov	r1, fp
   bae7e:	f000 f82f 	bl	baee0 <__aeabi_dsub>
   bae82:	ec53 2b18 	vmov	r2, r3, d8
   bae86:	f000 f9e3 	bl	bb250 <__aeabi_dmul>
   bae8a:	a311      	add	r3, pc, #68	; (adr r3, baed0 <__ieee754_log+0x430>)
   bae8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   bae90:	4606      	mov	r6, r0
   bae92:	460f      	mov	r7, r1
   bae94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   bae98:	f000 f9da 	bl	bb250 <__aeabi_dmul>
   bae9c:	4602      	mov	r2, r0
   bae9e:	460b      	mov	r3, r1
   baea0:	4630      	mov	r0, r6
   baea2:	4639      	mov	r1, r7
   baea4:	f000 f81c 	bl	baee0 <__aeabi_dsub>
   baea8:	4652      	mov	r2, sl
   baeaa:	465b      	mov	r3, fp
   baeac:	f000 f818 	bl	baee0 <__aeabi_dsub>
   baeb0:	4602      	mov	r2, r0
   baeb2:	460b      	mov	r3, r1
   baeb4:	4620      	mov	r0, r4
   baeb6:	4629      	mov	r1, r5
   baeb8:	f000 f812 	bl	baee0 <__aeabi_dsub>
   baebc:	ec41 0b10 	vmov	d0, r0, r1
   baec0:	e65d      	b.n	bab7e <__ieee754_log+0xde>
   baec2:	bf00      	nop
   baec4:	f3af 8000 	nop.w
   baec8:	fee00000 	.word	0xfee00000
   baecc:	3fe62e42 	.word	0x3fe62e42
   baed0:	35793c76 	.word	0x35793c76
   baed4:	3dea39ef 	.word	0x3dea39ef

000baed8 <__aeabi_drsub>:
   baed8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   baedc:	e002      	b.n	baee4 <__adddf3>
   baede:	bf00      	nop

000baee0 <__aeabi_dsub>:
   baee0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000baee4 <__adddf3>:
   baee4:	b530      	push	{r4, r5, lr}
   baee6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   baeea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   baeee:	ea94 0f05 	teq	r4, r5
   baef2:	bf08      	it	eq
   baef4:	ea90 0f02 	teqeq	r0, r2
   baef8:	bf1f      	itttt	ne
   baefa:	ea54 0c00 	orrsne.w	ip, r4, r0
   baefe:	ea55 0c02 	orrsne.w	ip, r5, r2
   baf02:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   baf06:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   baf0a:	f000 80e2 	beq.w	bb0d2 <__adddf3+0x1ee>
   baf0e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   baf12:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   baf16:	bfb8      	it	lt
   baf18:	426d      	neglt	r5, r5
   baf1a:	dd0c      	ble.n	baf36 <__adddf3+0x52>
   baf1c:	442c      	add	r4, r5
   baf1e:	ea80 0202 	eor.w	r2, r0, r2
   baf22:	ea81 0303 	eor.w	r3, r1, r3
   baf26:	ea82 0000 	eor.w	r0, r2, r0
   baf2a:	ea83 0101 	eor.w	r1, r3, r1
   baf2e:	ea80 0202 	eor.w	r2, r0, r2
   baf32:	ea81 0303 	eor.w	r3, r1, r3
   baf36:	2d36      	cmp	r5, #54	; 0x36
   baf38:	bf88      	it	hi
   baf3a:	bd30      	pophi	{r4, r5, pc}
   baf3c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   baf40:	ea4f 3101 	mov.w	r1, r1, lsl #12
   baf44:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   baf48:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   baf4c:	d002      	beq.n	baf54 <__adddf3+0x70>
   baf4e:	4240      	negs	r0, r0
   baf50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   baf54:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   baf58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   baf5c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   baf60:	d002      	beq.n	baf68 <__adddf3+0x84>
   baf62:	4252      	negs	r2, r2
   baf64:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   baf68:	ea94 0f05 	teq	r4, r5
   baf6c:	f000 80a7 	beq.w	bb0be <__adddf3+0x1da>
   baf70:	f1a4 0401 	sub.w	r4, r4, #1
   baf74:	f1d5 0e20 	rsbs	lr, r5, #32
   baf78:	db0d      	blt.n	baf96 <__adddf3+0xb2>
   baf7a:	fa02 fc0e 	lsl.w	ip, r2, lr
   baf7e:	fa22 f205 	lsr.w	r2, r2, r5
   baf82:	1880      	adds	r0, r0, r2
   baf84:	f141 0100 	adc.w	r1, r1, #0
   baf88:	fa03 f20e 	lsl.w	r2, r3, lr
   baf8c:	1880      	adds	r0, r0, r2
   baf8e:	fa43 f305 	asr.w	r3, r3, r5
   baf92:	4159      	adcs	r1, r3
   baf94:	e00e      	b.n	bafb4 <__adddf3+0xd0>
   baf96:	f1a5 0520 	sub.w	r5, r5, #32
   baf9a:	f10e 0e20 	add.w	lr, lr, #32
   baf9e:	2a01      	cmp	r2, #1
   bafa0:	fa03 fc0e 	lsl.w	ip, r3, lr
   bafa4:	bf28      	it	cs
   bafa6:	f04c 0c02 	orrcs.w	ip, ip, #2
   bafaa:	fa43 f305 	asr.w	r3, r3, r5
   bafae:	18c0      	adds	r0, r0, r3
   bafb0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bafb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bafb8:	d507      	bpl.n	bafca <__adddf3+0xe6>
   bafba:	f04f 0e00 	mov.w	lr, #0
   bafbe:	f1dc 0c00 	rsbs	ip, ip, #0
   bafc2:	eb7e 0000 	sbcs.w	r0, lr, r0
   bafc6:	eb6e 0101 	sbc.w	r1, lr, r1
   bafca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bafce:	d31b      	bcc.n	bb008 <__adddf3+0x124>
   bafd0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bafd4:	d30c      	bcc.n	baff0 <__adddf3+0x10c>
   bafd6:	0849      	lsrs	r1, r1, #1
   bafd8:	ea5f 0030 	movs.w	r0, r0, rrx
   bafdc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bafe0:	f104 0401 	add.w	r4, r4, #1
   bafe4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bafe8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bafec:	f080 809a 	bcs.w	bb124 <__adddf3+0x240>
   baff0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   baff4:	bf08      	it	eq
   baff6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   baffa:	f150 0000 	adcs.w	r0, r0, #0
   baffe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb002:	ea41 0105 	orr.w	r1, r1, r5
   bb006:	bd30      	pop	{r4, r5, pc}
   bb008:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb00c:	4140      	adcs	r0, r0
   bb00e:	eb41 0101 	adc.w	r1, r1, r1
   bb012:	3c01      	subs	r4, #1
   bb014:	bf28      	it	cs
   bb016:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb01a:	d2e9      	bcs.n	baff0 <__adddf3+0x10c>
   bb01c:	f091 0f00 	teq	r1, #0
   bb020:	bf04      	itt	eq
   bb022:	4601      	moveq	r1, r0
   bb024:	2000      	moveq	r0, #0
   bb026:	fab1 f381 	clz	r3, r1
   bb02a:	bf08      	it	eq
   bb02c:	3320      	addeq	r3, #32
   bb02e:	f1a3 030b 	sub.w	r3, r3, #11
   bb032:	f1b3 0220 	subs.w	r2, r3, #32
   bb036:	da0c      	bge.n	bb052 <__adddf3+0x16e>
   bb038:	320c      	adds	r2, #12
   bb03a:	dd08      	ble.n	bb04e <__adddf3+0x16a>
   bb03c:	f102 0c14 	add.w	ip, r2, #20
   bb040:	f1c2 020c 	rsb	r2, r2, #12
   bb044:	fa01 f00c 	lsl.w	r0, r1, ip
   bb048:	fa21 f102 	lsr.w	r1, r1, r2
   bb04c:	e00c      	b.n	bb068 <__adddf3+0x184>
   bb04e:	f102 0214 	add.w	r2, r2, #20
   bb052:	bfd8      	it	le
   bb054:	f1c2 0c20 	rsble	ip, r2, #32
   bb058:	fa01 f102 	lsl.w	r1, r1, r2
   bb05c:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb060:	bfdc      	itt	le
   bb062:	ea41 010c 	orrle.w	r1, r1, ip
   bb066:	4090      	lslle	r0, r2
   bb068:	1ae4      	subs	r4, r4, r3
   bb06a:	bfa2      	ittt	ge
   bb06c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb070:	4329      	orrge	r1, r5
   bb072:	bd30      	popge	{r4, r5, pc}
   bb074:	ea6f 0404 	mvn.w	r4, r4
   bb078:	3c1f      	subs	r4, #31
   bb07a:	da1c      	bge.n	bb0b6 <__adddf3+0x1d2>
   bb07c:	340c      	adds	r4, #12
   bb07e:	dc0e      	bgt.n	bb09e <__adddf3+0x1ba>
   bb080:	f104 0414 	add.w	r4, r4, #20
   bb084:	f1c4 0220 	rsb	r2, r4, #32
   bb088:	fa20 f004 	lsr.w	r0, r0, r4
   bb08c:	fa01 f302 	lsl.w	r3, r1, r2
   bb090:	ea40 0003 	orr.w	r0, r0, r3
   bb094:	fa21 f304 	lsr.w	r3, r1, r4
   bb098:	ea45 0103 	orr.w	r1, r5, r3
   bb09c:	bd30      	pop	{r4, r5, pc}
   bb09e:	f1c4 040c 	rsb	r4, r4, #12
   bb0a2:	f1c4 0220 	rsb	r2, r4, #32
   bb0a6:	fa20 f002 	lsr.w	r0, r0, r2
   bb0aa:	fa01 f304 	lsl.w	r3, r1, r4
   bb0ae:	ea40 0003 	orr.w	r0, r0, r3
   bb0b2:	4629      	mov	r1, r5
   bb0b4:	bd30      	pop	{r4, r5, pc}
   bb0b6:	fa21 f004 	lsr.w	r0, r1, r4
   bb0ba:	4629      	mov	r1, r5
   bb0bc:	bd30      	pop	{r4, r5, pc}
   bb0be:	f094 0f00 	teq	r4, #0
   bb0c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb0c6:	bf06      	itte	eq
   bb0c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb0cc:	3401      	addeq	r4, #1
   bb0ce:	3d01      	subne	r5, #1
   bb0d0:	e74e      	b.n	baf70 <__adddf3+0x8c>
   bb0d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb0d6:	bf18      	it	ne
   bb0d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb0dc:	d029      	beq.n	bb132 <__adddf3+0x24e>
   bb0de:	ea94 0f05 	teq	r4, r5
   bb0e2:	bf08      	it	eq
   bb0e4:	ea90 0f02 	teqeq	r0, r2
   bb0e8:	d005      	beq.n	bb0f6 <__adddf3+0x212>
   bb0ea:	ea54 0c00 	orrs.w	ip, r4, r0
   bb0ee:	bf04      	itt	eq
   bb0f0:	4619      	moveq	r1, r3
   bb0f2:	4610      	moveq	r0, r2
   bb0f4:	bd30      	pop	{r4, r5, pc}
   bb0f6:	ea91 0f03 	teq	r1, r3
   bb0fa:	bf1e      	ittt	ne
   bb0fc:	2100      	movne	r1, #0
   bb0fe:	2000      	movne	r0, #0
   bb100:	bd30      	popne	{r4, r5, pc}
   bb102:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb106:	d105      	bne.n	bb114 <__adddf3+0x230>
   bb108:	0040      	lsls	r0, r0, #1
   bb10a:	4149      	adcs	r1, r1
   bb10c:	bf28      	it	cs
   bb10e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb112:	bd30      	pop	{r4, r5, pc}
   bb114:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb118:	bf3c      	itt	cc
   bb11a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb11e:	bd30      	popcc	{r4, r5, pc}
   bb120:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb124:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb128:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb12c:	f04f 0000 	mov.w	r0, #0
   bb130:	bd30      	pop	{r4, r5, pc}
   bb132:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb136:	bf1a      	itte	ne
   bb138:	4619      	movne	r1, r3
   bb13a:	4610      	movne	r0, r2
   bb13c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb140:	bf1c      	itt	ne
   bb142:	460b      	movne	r3, r1
   bb144:	4602      	movne	r2, r0
   bb146:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb14a:	bf06      	itte	eq
   bb14c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb150:	ea91 0f03 	teqeq	r1, r3
   bb154:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb158:	bd30      	pop	{r4, r5, pc}
   bb15a:	bf00      	nop

000bb15c <__aeabi_ui2d>:
   bb15c:	f090 0f00 	teq	r0, #0
   bb160:	bf04      	itt	eq
   bb162:	2100      	moveq	r1, #0
   bb164:	4770      	bxeq	lr
   bb166:	b530      	push	{r4, r5, lr}
   bb168:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb16c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb170:	f04f 0500 	mov.w	r5, #0
   bb174:	f04f 0100 	mov.w	r1, #0
   bb178:	e750      	b.n	bb01c <__adddf3+0x138>
   bb17a:	bf00      	nop

000bb17c <__aeabi_i2d>:
   bb17c:	f090 0f00 	teq	r0, #0
   bb180:	bf04      	itt	eq
   bb182:	2100      	moveq	r1, #0
   bb184:	4770      	bxeq	lr
   bb186:	b530      	push	{r4, r5, lr}
   bb188:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb18c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb190:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb194:	bf48      	it	mi
   bb196:	4240      	negmi	r0, r0
   bb198:	f04f 0100 	mov.w	r1, #0
   bb19c:	e73e      	b.n	bb01c <__adddf3+0x138>
   bb19e:	bf00      	nop

000bb1a0 <__aeabi_f2d>:
   bb1a0:	0042      	lsls	r2, r0, #1
   bb1a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb1a6:	ea4f 0131 	mov.w	r1, r1, rrx
   bb1aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb1ae:	bf1f      	itttt	ne
   bb1b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb1b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb1b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb1bc:	4770      	bxne	lr
   bb1be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb1c2:	bf08      	it	eq
   bb1c4:	4770      	bxeq	lr
   bb1c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb1ca:	bf04      	itt	eq
   bb1cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb1d0:	4770      	bxeq	lr
   bb1d2:	b530      	push	{r4, r5, lr}
   bb1d4:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb1d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb1dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb1e0:	e71c      	b.n	bb01c <__adddf3+0x138>
   bb1e2:	bf00      	nop

000bb1e4 <__aeabi_ul2d>:
   bb1e4:	ea50 0201 	orrs.w	r2, r0, r1
   bb1e8:	bf08      	it	eq
   bb1ea:	4770      	bxeq	lr
   bb1ec:	b530      	push	{r4, r5, lr}
   bb1ee:	f04f 0500 	mov.w	r5, #0
   bb1f2:	e00a      	b.n	bb20a <__aeabi_l2d+0x16>

000bb1f4 <__aeabi_l2d>:
   bb1f4:	ea50 0201 	orrs.w	r2, r0, r1
   bb1f8:	bf08      	it	eq
   bb1fa:	4770      	bxeq	lr
   bb1fc:	b530      	push	{r4, r5, lr}
   bb1fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb202:	d502      	bpl.n	bb20a <__aeabi_l2d+0x16>
   bb204:	4240      	negs	r0, r0
   bb206:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb20a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb20e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb212:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb216:	f43f aed8 	beq.w	bafca <__adddf3+0xe6>
   bb21a:	f04f 0203 	mov.w	r2, #3
   bb21e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb222:	bf18      	it	ne
   bb224:	3203      	addne	r2, #3
   bb226:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb22a:	bf18      	it	ne
   bb22c:	3203      	addne	r2, #3
   bb22e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb232:	f1c2 0320 	rsb	r3, r2, #32
   bb236:	fa00 fc03 	lsl.w	ip, r0, r3
   bb23a:	fa20 f002 	lsr.w	r0, r0, r2
   bb23e:	fa01 fe03 	lsl.w	lr, r1, r3
   bb242:	ea40 000e 	orr.w	r0, r0, lr
   bb246:	fa21 f102 	lsr.w	r1, r1, r2
   bb24a:	4414      	add	r4, r2
   bb24c:	e6bd      	b.n	bafca <__adddf3+0xe6>
   bb24e:	bf00      	nop

000bb250 <__aeabi_dmul>:
   bb250:	b570      	push	{r4, r5, r6, lr}
   bb252:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb256:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb25a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb25e:	bf1d      	ittte	ne
   bb260:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb264:	ea94 0f0c 	teqne	r4, ip
   bb268:	ea95 0f0c 	teqne	r5, ip
   bb26c:	f000 f8de 	bleq	bb42c <__aeabi_dmul+0x1dc>
   bb270:	442c      	add	r4, r5
   bb272:	ea81 0603 	eor.w	r6, r1, r3
   bb276:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bb27a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bb27e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bb282:	bf18      	it	ne
   bb284:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bb288:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb28c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb290:	d038      	beq.n	bb304 <__aeabi_dmul+0xb4>
   bb292:	fba0 ce02 	umull	ip, lr, r0, r2
   bb296:	f04f 0500 	mov.w	r5, #0
   bb29a:	fbe1 e502 	umlal	lr, r5, r1, r2
   bb29e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bb2a2:	fbe0 e503 	umlal	lr, r5, r0, r3
   bb2a6:	f04f 0600 	mov.w	r6, #0
   bb2aa:	fbe1 5603 	umlal	r5, r6, r1, r3
   bb2ae:	f09c 0f00 	teq	ip, #0
   bb2b2:	bf18      	it	ne
   bb2b4:	f04e 0e01 	orrne.w	lr, lr, #1
   bb2b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb2bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb2c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb2c4:	d204      	bcs.n	bb2d0 <__aeabi_dmul+0x80>
   bb2c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb2ca:	416d      	adcs	r5, r5
   bb2cc:	eb46 0606 	adc.w	r6, r6, r6
   bb2d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb2d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb2d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb2dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb2e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb2e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb2e8:	bf88      	it	hi
   bb2ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb2ee:	d81e      	bhi.n	bb32e <__aeabi_dmul+0xde>
   bb2f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb2f4:	bf08      	it	eq
   bb2f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb2fa:	f150 0000 	adcs.w	r0, r0, #0
   bb2fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb302:	bd70      	pop	{r4, r5, r6, pc}
   bb304:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb308:	ea46 0101 	orr.w	r1, r6, r1
   bb30c:	ea40 0002 	orr.w	r0, r0, r2
   bb310:	ea81 0103 	eor.w	r1, r1, r3
   bb314:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb318:	bfc2      	ittt	gt
   bb31a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb31e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb322:	bd70      	popgt	{r4, r5, r6, pc}
   bb324:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb328:	f04f 0e00 	mov.w	lr, #0
   bb32c:	3c01      	subs	r4, #1
   bb32e:	f300 80ab 	bgt.w	bb488 <__aeabi_dmul+0x238>
   bb332:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb336:	bfde      	ittt	le
   bb338:	2000      	movle	r0, #0
   bb33a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb33e:	bd70      	pople	{r4, r5, r6, pc}
   bb340:	f1c4 0400 	rsb	r4, r4, #0
   bb344:	3c20      	subs	r4, #32
   bb346:	da35      	bge.n	bb3b4 <__aeabi_dmul+0x164>
   bb348:	340c      	adds	r4, #12
   bb34a:	dc1b      	bgt.n	bb384 <__aeabi_dmul+0x134>
   bb34c:	f104 0414 	add.w	r4, r4, #20
   bb350:	f1c4 0520 	rsb	r5, r4, #32
   bb354:	fa00 f305 	lsl.w	r3, r0, r5
   bb358:	fa20 f004 	lsr.w	r0, r0, r4
   bb35c:	fa01 f205 	lsl.w	r2, r1, r5
   bb360:	ea40 0002 	orr.w	r0, r0, r2
   bb364:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb368:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb36c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb370:	fa21 f604 	lsr.w	r6, r1, r4
   bb374:	eb42 0106 	adc.w	r1, r2, r6
   bb378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb37c:	bf08      	it	eq
   bb37e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb382:	bd70      	pop	{r4, r5, r6, pc}
   bb384:	f1c4 040c 	rsb	r4, r4, #12
   bb388:	f1c4 0520 	rsb	r5, r4, #32
   bb38c:	fa00 f304 	lsl.w	r3, r0, r4
   bb390:	fa20 f005 	lsr.w	r0, r0, r5
   bb394:	fa01 f204 	lsl.w	r2, r1, r4
   bb398:	ea40 0002 	orr.w	r0, r0, r2
   bb39c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb3a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb3a4:	f141 0100 	adc.w	r1, r1, #0
   bb3a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb3ac:	bf08      	it	eq
   bb3ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb3b2:	bd70      	pop	{r4, r5, r6, pc}
   bb3b4:	f1c4 0520 	rsb	r5, r4, #32
   bb3b8:	fa00 f205 	lsl.w	r2, r0, r5
   bb3bc:	ea4e 0e02 	orr.w	lr, lr, r2
   bb3c0:	fa20 f304 	lsr.w	r3, r0, r4
   bb3c4:	fa01 f205 	lsl.w	r2, r1, r5
   bb3c8:	ea43 0302 	orr.w	r3, r3, r2
   bb3cc:	fa21 f004 	lsr.w	r0, r1, r4
   bb3d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb3d4:	fa21 f204 	lsr.w	r2, r1, r4
   bb3d8:	ea20 0002 	bic.w	r0, r0, r2
   bb3dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bb3e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb3e4:	bf08      	it	eq
   bb3e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb3ea:	bd70      	pop	{r4, r5, r6, pc}
   bb3ec:	f094 0f00 	teq	r4, #0
   bb3f0:	d10f      	bne.n	bb412 <__aeabi_dmul+0x1c2>
   bb3f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bb3f6:	0040      	lsls	r0, r0, #1
   bb3f8:	eb41 0101 	adc.w	r1, r1, r1
   bb3fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb400:	bf08      	it	eq
   bb402:	3c01      	subeq	r4, #1
   bb404:	d0f7      	beq.n	bb3f6 <__aeabi_dmul+0x1a6>
   bb406:	ea41 0106 	orr.w	r1, r1, r6
   bb40a:	f095 0f00 	teq	r5, #0
   bb40e:	bf18      	it	ne
   bb410:	4770      	bxne	lr
   bb412:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb416:	0052      	lsls	r2, r2, #1
   bb418:	eb43 0303 	adc.w	r3, r3, r3
   bb41c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb420:	bf08      	it	eq
   bb422:	3d01      	subeq	r5, #1
   bb424:	d0f7      	beq.n	bb416 <__aeabi_dmul+0x1c6>
   bb426:	ea43 0306 	orr.w	r3, r3, r6
   bb42a:	4770      	bx	lr
   bb42c:	ea94 0f0c 	teq	r4, ip
   bb430:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb434:	bf18      	it	ne
   bb436:	ea95 0f0c 	teqne	r5, ip
   bb43a:	d00c      	beq.n	bb456 <__aeabi_dmul+0x206>
   bb43c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb440:	bf18      	it	ne
   bb442:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb446:	d1d1      	bne.n	bb3ec <__aeabi_dmul+0x19c>
   bb448:	ea81 0103 	eor.w	r1, r1, r3
   bb44c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb450:	f04f 0000 	mov.w	r0, #0
   bb454:	bd70      	pop	{r4, r5, r6, pc}
   bb456:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb45a:	bf06      	itte	eq
   bb45c:	4610      	moveq	r0, r2
   bb45e:	4619      	moveq	r1, r3
   bb460:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb464:	d019      	beq.n	bb49a <__aeabi_dmul+0x24a>
   bb466:	ea94 0f0c 	teq	r4, ip
   bb46a:	d102      	bne.n	bb472 <__aeabi_dmul+0x222>
   bb46c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb470:	d113      	bne.n	bb49a <__aeabi_dmul+0x24a>
   bb472:	ea95 0f0c 	teq	r5, ip
   bb476:	d105      	bne.n	bb484 <__aeabi_dmul+0x234>
   bb478:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb47c:	bf1c      	itt	ne
   bb47e:	4610      	movne	r0, r2
   bb480:	4619      	movne	r1, r3
   bb482:	d10a      	bne.n	bb49a <__aeabi_dmul+0x24a>
   bb484:	ea81 0103 	eor.w	r1, r1, r3
   bb488:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb48c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb494:	f04f 0000 	mov.w	r0, #0
   bb498:	bd70      	pop	{r4, r5, r6, pc}
   bb49a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb49e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb4a2:	bd70      	pop	{r4, r5, r6, pc}

000bb4a4 <__aeabi_ddiv>:
   bb4a4:	b570      	push	{r4, r5, r6, lr}
   bb4a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb4aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb4ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb4b2:	bf1d      	ittte	ne
   bb4b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb4b8:	ea94 0f0c 	teqne	r4, ip
   bb4bc:	ea95 0f0c 	teqne	r5, ip
   bb4c0:	f000 f8a7 	bleq	bb612 <__aeabi_ddiv+0x16e>
   bb4c4:	eba4 0405 	sub.w	r4, r4, r5
   bb4c8:	ea81 0e03 	eor.w	lr, r1, r3
   bb4cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb4d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb4d4:	f000 8088 	beq.w	bb5e8 <__aeabi_ddiv+0x144>
   bb4d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb4dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb4e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bb4e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bb4e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bb4ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bb4f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bb4f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bb4f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bb4fc:	429d      	cmp	r5, r3
   bb4fe:	bf08      	it	eq
   bb500:	4296      	cmpeq	r6, r2
   bb502:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bb506:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bb50a:	d202      	bcs.n	bb512 <__aeabi_ddiv+0x6e>
   bb50c:	085b      	lsrs	r3, r3, #1
   bb50e:	ea4f 0232 	mov.w	r2, r2, rrx
   bb512:	1ab6      	subs	r6, r6, r2
   bb514:	eb65 0503 	sbc.w	r5, r5, r3
   bb518:	085b      	lsrs	r3, r3, #1
   bb51a:	ea4f 0232 	mov.w	r2, r2, rrx
   bb51e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bb522:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bb526:	ebb6 0e02 	subs.w	lr, r6, r2
   bb52a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb52e:	bf22      	ittt	cs
   bb530:	1ab6      	subcs	r6, r6, r2
   bb532:	4675      	movcs	r5, lr
   bb534:	ea40 000c 	orrcs.w	r0, r0, ip
   bb538:	085b      	lsrs	r3, r3, #1
   bb53a:	ea4f 0232 	mov.w	r2, r2, rrx
   bb53e:	ebb6 0e02 	subs.w	lr, r6, r2
   bb542:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb546:	bf22      	ittt	cs
   bb548:	1ab6      	subcs	r6, r6, r2
   bb54a:	4675      	movcs	r5, lr
   bb54c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bb550:	085b      	lsrs	r3, r3, #1
   bb552:	ea4f 0232 	mov.w	r2, r2, rrx
   bb556:	ebb6 0e02 	subs.w	lr, r6, r2
   bb55a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb55e:	bf22      	ittt	cs
   bb560:	1ab6      	subcs	r6, r6, r2
   bb562:	4675      	movcs	r5, lr
   bb564:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bb568:	085b      	lsrs	r3, r3, #1
   bb56a:	ea4f 0232 	mov.w	r2, r2, rrx
   bb56e:	ebb6 0e02 	subs.w	lr, r6, r2
   bb572:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb576:	bf22      	ittt	cs
   bb578:	1ab6      	subcs	r6, r6, r2
   bb57a:	4675      	movcs	r5, lr
   bb57c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bb580:	ea55 0e06 	orrs.w	lr, r5, r6
   bb584:	d018      	beq.n	bb5b8 <__aeabi_ddiv+0x114>
   bb586:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bb58a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bb58e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bb592:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bb596:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bb59a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bb59e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb5a2:	d1c0      	bne.n	bb526 <__aeabi_ddiv+0x82>
   bb5a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb5a8:	d10b      	bne.n	bb5c2 <__aeabi_ddiv+0x11e>
   bb5aa:	ea41 0100 	orr.w	r1, r1, r0
   bb5ae:	f04f 0000 	mov.w	r0, #0
   bb5b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb5b6:	e7b6      	b.n	bb526 <__aeabi_ddiv+0x82>
   bb5b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb5bc:	bf04      	itt	eq
   bb5be:	4301      	orreq	r1, r0
   bb5c0:	2000      	moveq	r0, #0
   bb5c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb5c6:	bf88      	it	hi
   bb5c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb5cc:	f63f aeaf 	bhi.w	bb32e <__aeabi_dmul+0xde>
   bb5d0:	ebb5 0c03 	subs.w	ip, r5, r3
   bb5d4:	bf04      	itt	eq
   bb5d6:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb5da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb5de:	f150 0000 	adcs.w	r0, r0, #0
   bb5e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb5e6:	bd70      	pop	{r4, r5, r6, pc}
   bb5e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb5ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb5f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb5f4:	bfc2      	ittt	gt
   bb5f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb5fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb5fe:	bd70      	popgt	{r4, r5, r6, pc}
   bb600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb604:	f04f 0e00 	mov.w	lr, #0
   bb608:	3c01      	subs	r4, #1
   bb60a:	e690      	b.n	bb32e <__aeabi_dmul+0xde>
   bb60c:	ea45 0e06 	orr.w	lr, r5, r6
   bb610:	e68d      	b.n	bb32e <__aeabi_dmul+0xde>
   bb612:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb616:	ea94 0f0c 	teq	r4, ip
   bb61a:	bf08      	it	eq
   bb61c:	ea95 0f0c 	teqeq	r5, ip
   bb620:	f43f af3b 	beq.w	bb49a <__aeabi_dmul+0x24a>
   bb624:	ea94 0f0c 	teq	r4, ip
   bb628:	d10a      	bne.n	bb640 <__aeabi_ddiv+0x19c>
   bb62a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb62e:	f47f af34 	bne.w	bb49a <__aeabi_dmul+0x24a>
   bb632:	ea95 0f0c 	teq	r5, ip
   bb636:	f47f af25 	bne.w	bb484 <__aeabi_dmul+0x234>
   bb63a:	4610      	mov	r0, r2
   bb63c:	4619      	mov	r1, r3
   bb63e:	e72c      	b.n	bb49a <__aeabi_dmul+0x24a>
   bb640:	ea95 0f0c 	teq	r5, ip
   bb644:	d106      	bne.n	bb654 <__aeabi_ddiv+0x1b0>
   bb646:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb64a:	f43f aefd 	beq.w	bb448 <__aeabi_dmul+0x1f8>
   bb64e:	4610      	mov	r0, r2
   bb650:	4619      	mov	r1, r3
   bb652:	e722      	b.n	bb49a <__aeabi_dmul+0x24a>
   bb654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb658:	bf18      	it	ne
   bb65a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb65e:	f47f aec5 	bne.w	bb3ec <__aeabi_dmul+0x19c>
   bb662:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bb666:	f47f af0d 	bne.w	bb484 <__aeabi_dmul+0x234>
   bb66a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bb66e:	f47f aeeb 	bne.w	bb448 <__aeabi_dmul+0x1f8>
   bb672:	e712      	b.n	bb49a <__aeabi_dmul+0x24a>

000bb674 <__gedf2>:
   bb674:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb678:	e006      	b.n	bb688 <__cmpdf2+0x4>
   bb67a:	bf00      	nop

000bb67c <__ledf2>:
   bb67c:	f04f 0c01 	mov.w	ip, #1
   bb680:	e002      	b.n	bb688 <__cmpdf2+0x4>
   bb682:	bf00      	nop

000bb684 <__cmpdf2>:
   bb684:	f04f 0c01 	mov.w	ip, #1
   bb688:	f84d cd04 	str.w	ip, [sp, #-4]!
   bb68c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb694:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb698:	bf18      	it	ne
   bb69a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bb69e:	d01b      	beq.n	bb6d8 <__cmpdf2+0x54>
   bb6a0:	b001      	add	sp, #4
   bb6a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bb6a6:	bf0c      	ite	eq
   bb6a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bb6ac:	ea91 0f03 	teqne	r1, r3
   bb6b0:	bf02      	ittt	eq
   bb6b2:	ea90 0f02 	teqeq	r0, r2
   bb6b6:	2000      	moveq	r0, #0
   bb6b8:	4770      	bxeq	lr
   bb6ba:	f110 0f00 	cmn.w	r0, #0
   bb6be:	ea91 0f03 	teq	r1, r3
   bb6c2:	bf58      	it	pl
   bb6c4:	4299      	cmppl	r1, r3
   bb6c6:	bf08      	it	eq
   bb6c8:	4290      	cmpeq	r0, r2
   bb6ca:	bf2c      	ite	cs
   bb6cc:	17d8      	asrcs	r0, r3, #31
   bb6ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bb6d2:	f040 0001 	orr.w	r0, r0, #1
   bb6d6:	4770      	bx	lr
   bb6d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb6dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb6e0:	d102      	bne.n	bb6e8 <__cmpdf2+0x64>
   bb6e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb6e6:	d107      	bne.n	bb6f8 <__cmpdf2+0x74>
   bb6e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb6ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb6f0:	d1d6      	bne.n	bb6a0 <__cmpdf2+0x1c>
   bb6f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb6f6:	d0d3      	beq.n	bb6a0 <__cmpdf2+0x1c>
   bb6f8:	f85d 0b04 	ldr.w	r0, [sp], #4
   bb6fc:	4770      	bx	lr
   bb6fe:	bf00      	nop

000bb700 <__aeabi_cdrcmple>:
   bb700:	4684      	mov	ip, r0
   bb702:	4610      	mov	r0, r2
   bb704:	4662      	mov	r2, ip
   bb706:	468c      	mov	ip, r1
   bb708:	4619      	mov	r1, r3
   bb70a:	4663      	mov	r3, ip
   bb70c:	e000      	b.n	bb710 <__aeabi_cdcmpeq>
   bb70e:	bf00      	nop

000bb710 <__aeabi_cdcmpeq>:
   bb710:	b501      	push	{r0, lr}
   bb712:	f7ff ffb7 	bl	bb684 <__cmpdf2>
   bb716:	2800      	cmp	r0, #0
   bb718:	bf48      	it	mi
   bb71a:	f110 0f00 	cmnmi.w	r0, #0
   bb71e:	bd01      	pop	{r0, pc}

000bb720 <__aeabi_dcmpeq>:
   bb720:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb724:	f7ff fff4 	bl	bb710 <__aeabi_cdcmpeq>
   bb728:	bf0c      	ite	eq
   bb72a:	2001      	moveq	r0, #1
   bb72c:	2000      	movne	r0, #0
   bb72e:	f85d fb08 	ldr.w	pc, [sp], #8
   bb732:	bf00      	nop

000bb734 <__aeabi_dcmplt>:
   bb734:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb738:	f7ff ffea 	bl	bb710 <__aeabi_cdcmpeq>
   bb73c:	bf34      	ite	cc
   bb73e:	2001      	movcc	r0, #1
   bb740:	2000      	movcs	r0, #0
   bb742:	f85d fb08 	ldr.w	pc, [sp], #8
   bb746:	bf00      	nop

000bb748 <__aeabi_dcmple>:
   bb748:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb74c:	f7ff ffe0 	bl	bb710 <__aeabi_cdcmpeq>
   bb750:	bf94      	ite	ls
   bb752:	2001      	movls	r0, #1
   bb754:	2000      	movhi	r0, #0
   bb756:	f85d fb08 	ldr.w	pc, [sp], #8
   bb75a:	bf00      	nop

000bb75c <__aeabi_dcmpge>:
   bb75c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb760:	f7ff ffce 	bl	bb700 <__aeabi_cdrcmple>
   bb764:	bf94      	ite	ls
   bb766:	2001      	movls	r0, #1
   bb768:	2000      	movhi	r0, #0
   bb76a:	f85d fb08 	ldr.w	pc, [sp], #8
   bb76e:	bf00      	nop

000bb770 <__aeabi_dcmpgt>:
   bb770:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb774:	f7ff ffc4 	bl	bb700 <__aeabi_cdrcmple>
   bb778:	bf34      	ite	cc
   bb77a:	2001      	movcc	r0, #1
   bb77c:	2000      	movcs	r0, #0
   bb77e:	f85d fb08 	ldr.w	pc, [sp], #8
   bb782:	bf00      	nop

000bb784 <__aeabi_dcmpun>:
   bb784:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb788:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb78c:	d102      	bne.n	bb794 <__aeabi_dcmpun+0x10>
   bb78e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb792:	d10a      	bne.n	bb7aa <__aeabi_dcmpun+0x26>
   bb794:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb798:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb79c:	d102      	bne.n	bb7a4 <__aeabi_dcmpun+0x20>
   bb79e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb7a2:	d102      	bne.n	bb7aa <__aeabi_dcmpun+0x26>
   bb7a4:	f04f 0000 	mov.w	r0, #0
   bb7a8:	4770      	bx	lr
   bb7aa:	f04f 0001 	mov.w	r0, #1
   bb7ae:	4770      	bx	lr

000bb7b0 <__aeabi_d2iz>:
   bb7b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb7b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb7b8:	d215      	bcs.n	bb7e6 <__aeabi_d2iz+0x36>
   bb7ba:	d511      	bpl.n	bb7e0 <__aeabi_d2iz+0x30>
   bb7bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb7c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb7c4:	d912      	bls.n	bb7ec <__aeabi_d2iz+0x3c>
   bb7c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb7ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb7ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb7d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb7d6:	fa23 f002 	lsr.w	r0, r3, r2
   bb7da:	bf18      	it	ne
   bb7dc:	4240      	negne	r0, r0
   bb7de:	4770      	bx	lr
   bb7e0:	f04f 0000 	mov.w	r0, #0
   bb7e4:	4770      	bx	lr
   bb7e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb7ea:	d105      	bne.n	bb7f8 <__aeabi_d2iz+0x48>
   bb7ec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bb7f0:	bf08      	it	eq
   bb7f2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bb7f6:	4770      	bx	lr
   bb7f8:	f04f 0000 	mov.w	r0, #0
   bb7fc:	4770      	bx	lr
   bb7fe:	bf00      	nop

000bb800 <__aeabi_d2uiz>:
   bb800:	004a      	lsls	r2, r1, #1
   bb802:	d211      	bcs.n	bb828 <__aeabi_d2uiz+0x28>
   bb804:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb808:	d211      	bcs.n	bb82e <__aeabi_d2uiz+0x2e>
   bb80a:	d50d      	bpl.n	bb828 <__aeabi_d2uiz+0x28>
   bb80c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb810:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb814:	d40e      	bmi.n	bb834 <__aeabi_d2uiz+0x34>
   bb816:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb81a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb81e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb822:	fa23 f002 	lsr.w	r0, r3, r2
   bb826:	4770      	bx	lr
   bb828:	f04f 0000 	mov.w	r0, #0
   bb82c:	4770      	bx	lr
   bb82e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb832:	d102      	bne.n	bb83a <__aeabi_d2uiz+0x3a>
   bb834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb838:	4770      	bx	lr
   bb83a:	f04f 0000 	mov.w	r0, #0
   bb83e:	4770      	bx	lr

000bb840 <__aeabi_d2f>:
   bb840:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb844:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb848:	bf24      	itt	cs
   bb84a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb84e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb852:	d90d      	bls.n	bb870 <__aeabi_d2f+0x30>
   bb854:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb858:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb85c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb860:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb864:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb868:	bf08      	it	eq
   bb86a:	f020 0001 	biceq.w	r0, r0, #1
   bb86e:	4770      	bx	lr
   bb870:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb874:	d121      	bne.n	bb8ba <__aeabi_d2f+0x7a>
   bb876:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb87a:	bfbc      	itt	lt
   bb87c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb880:	4770      	bxlt	lr
   bb882:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb886:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb88a:	f1c2 0218 	rsb	r2, r2, #24
   bb88e:	f1c2 0c20 	rsb	ip, r2, #32
   bb892:	fa10 f30c 	lsls.w	r3, r0, ip
   bb896:	fa20 f002 	lsr.w	r0, r0, r2
   bb89a:	bf18      	it	ne
   bb89c:	f040 0001 	orrne.w	r0, r0, #1
   bb8a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb8a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb8a8:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb8ac:	ea40 000c 	orr.w	r0, r0, ip
   bb8b0:	fa23 f302 	lsr.w	r3, r3, r2
   bb8b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb8b8:	e7cc      	b.n	bb854 <__aeabi_d2f+0x14>
   bb8ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb8be:	d107      	bne.n	bb8d0 <__aeabi_d2f+0x90>
   bb8c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb8c4:	bf1e      	ittt	ne
   bb8c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb8ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb8ce:	4770      	bxne	lr
   bb8d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb8d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb8d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb8dc:	4770      	bx	lr
   bb8de:	bf00      	nop

000bb8e0 <__aeabi_uldivmod>:
   bb8e0:	b953      	cbnz	r3, bb8f8 <__aeabi_uldivmod+0x18>
   bb8e2:	b94a      	cbnz	r2, bb8f8 <__aeabi_uldivmod+0x18>
   bb8e4:	2900      	cmp	r1, #0
   bb8e6:	bf08      	it	eq
   bb8e8:	2800      	cmpeq	r0, #0
   bb8ea:	bf1c      	itt	ne
   bb8ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   bb8f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   bb8f4:	f000 b992 	b.w	bbc1c <__aeabi_idiv0>
   bb8f8:	f1ad 0c08 	sub.w	ip, sp, #8
   bb8fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   bb900:	f000 f824 	bl	bb94c <__udivmoddi4>
   bb904:	f8dd e004 	ldr.w	lr, [sp, #4]
   bb908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   bb90c:	b004      	add	sp, #16
   bb90e:	4770      	bx	lr

000bb910 <__aeabi_d2ulz>:
   bb910:	b5d0      	push	{r4, r6, r7, lr}
   bb912:	4b0c      	ldr	r3, [pc, #48]	; (bb944 <__aeabi_d2ulz+0x34>)
   bb914:	2200      	movs	r2, #0
   bb916:	4606      	mov	r6, r0
   bb918:	460f      	mov	r7, r1
   bb91a:	f7ff fc99 	bl	bb250 <__aeabi_dmul>
   bb91e:	f7ff ff6f 	bl	bb800 <__aeabi_d2uiz>
   bb922:	4604      	mov	r4, r0
   bb924:	f7ff fc1a 	bl	bb15c <__aeabi_ui2d>
   bb928:	4b07      	ldr	r3, [pc, #28]	; (bb948 <__aeabi_d2ulz+0x38>)
   bb92a:	2200      	movs	r2, #0
   bb92c:	f7ff fc90 	bl	bb250 <__aeabi_dmul>
   bb930:	4602      	mov	r2, r0
   bb932:	460b      	mov	r3, r1
   bb934:	4630      	mov	r0, r6
   bb936:	4639      	mov	r1, r7
   bb938:	f7ff fad2 	bl	baee0 <__aeabi_dsub>
   bb93c:	f7ff ff60 	bl	bb800 <__aeabi_d2uiz>
   bb940:	4621      	mov	r1, r4
   bb942:	bdd0      	pop	{r4, r6, r7, pc}
   bb944:	3df00000 	.word	0x3df00000
   bb948:	41f00000 	.word	0x41f00000

000bb94c <__udivmoddi4>:
   bb94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb950:	9d08      	ldr	r5, [sp, #32]
   bb952:	4604      	mov	r4, r0
   bb954:	468e      	mov	lr, r1
   bb956:	2b00      	cmp	r3, #0
   bb958:	d14d      	bne.n	bb9f6 <__udivmoddi4+0xaa>
   bb95a:	428a      	cmp	r2, r1
   bb95c:	4694      	mov	ip, r2
   bb95e:	d969      	bls.n	bba34 <__udivmoddi4+0xe8>
   bb960:	fab2 f282 	clz	r2, r2
   bb964:	b152      	cbz	r2, bb97c <__udivmoddi4+0x30>
   bb966:	fa01 f302 	lsl.w	r3, r1, r2
   bb96a:	f1c2 0120 	rsb	r1, r2, #32
   bb96e:	fa20 f101 	lsr.w	r1, r0, r1
   bb972:	fa0c fc02 	lsl.w	ip, ip, r2
   bb976:	ea41 0e03 	orr.w	lr, r1, r3
   bb97a:	4094      	lsls	r4, r2
   bb97c:	ea4f 481c 	mov.w	r8, ip, lsr #16
   bb980:	0c21      	lsrs	r1, r4, #16
   bb982:	fbbe f6f8 	udiv	r6, lr, r8
   bb986:	fa1f f78c 	uxth.w	r7, ip
   bb98a:	fb08 e316 	mls	r3, r8, r6, lr
   bb98e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   bb992:	fb06 f107 	mul.w	r1, r6, r7
   bb996:	4299      	cmp	r1, r3
   bb998:	d90a      	bls.n	bb9b0 <__udivmoddi4+0x64>
   bb99a:	eb1c 0303 	adds.w	r3, ip, r3
   bb99e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   bb9a2:	f080 811f 	bcs.w	bbbe4 <__udivmoddi4+0x298>
   bb9a6:	4299      	cmp	r1, r3
   bb9a8:	f240 811c 	bls.w	bbbe4 <__udivmoddi4+0x298>
   bb9ac:	3e02      	subs	r6, #2
   bb9ae:	4463      	add	r3, ip
   bb9b0:	1a5b      	subs	r3, r3, r1
   bb9b2:	b2a4      	uxth	r4, r4
   bb9b4:	fbb3 f0f8 	udiv	r0, r3, r8
   bb9b8:	fb08 3310 	mls	r3, r8, r0, r3
   bb9bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   bb9c0:	fb00 f707 	mul.w	r7, r0, r7
   bb9c4:	42a7      	cmp	r7, r4
   bb9c6:	d90a      	bls.n	bb9de <__udivmoddi4+0x92>
   bb9c8:	eb1c 0404 	adds.w	r4, ip, r4
   bb9cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bb9d0:	f080 810a 	bcs.w	bbbe8 <__udivmoddi4+0x29c>
   bb9d4:	42a7      	cmp	r7, r4
   bb9d6:	f240 8107 	bls.w	bbbe8 <__udivmoddi4+0x29c>
   bb9da:	4464      	add	r4, ip
   bb9dc:	3802      	subs	r0, #2
   bb9de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   bb9e2:	1be4      	subs	r4, r4, r7
   bb9e4:	2600      	movs	r6, #0
   bb9e6:	b11d      	cbz	r5, bb9f0 <__udivmoddi4+0xa4>
   bb9e8:	40d4      	lsrs	r4, r2
   bb9ea:	2300      	movs	r3, #0
   bb9ec:	e9c5 4300 	strd	r4, r3, [r5]
   bb9f0:	4631      	mov	r1, r6
   bb9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb9f6:	428b      	cmp	r3, r1
   bb9f8:	d909      	bls.n	bba0e <__udivmoddi4+0xc2>
   bb9fa:	2d00      	cmp	r5, #0
   bb9fc:	f000 80ef 	beq.w	bbbde <__udivmoddi4+0x292>
   bba00:	2600      	movs	r6, #0
   bba02:	e9c5 0100 	strd	r0, r1, [r5]
   bba06:	4630      	mov	r0, r6
   bba08:	4631      	mov	r1, r6
   bba0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bba0e:	fab3 f683 	clz	r6, r3
   bba12:	2e00      	cmp	r6, #0
   bba14:	d14a      	bne.n	bbaac <__udivmoddi4+0x160>
   bba16:	428b      	cmp	r3, r1
   bba18:	d302      	bcc.n	bba20 <__udivmoddi4+0xd4>
   bba1a:	4282      	cmp	r2, r0
   bba1c:	f200 80f9 	bhi.w	bbc12 <__udivmoddi4+0x2c6>
   bba20:	1a84      	subs	r4, r0, r2
   bba22:	eb61 0303 	sbc.w	r3, r1, r3
   bba26:	2001      	movs	r0, #1
   bba28:	469e      	mov	lr, r3
   bba2a:	2d00      	cmp	r5, #0
   bba2c:	d0e0      	beq.n	bb9f0 <__udivmoddi4+0xa4>
   bba2e:	e9c5 4e00 	strd	r4, lr, [r5]
   bba32:	e7dd      	b.n	bb9f0 <__udivmoddi4+0xa4>
   bba34:	b902      	cbnz	r2, bba38 <__udivmoddi4+0xec>
   bba36:	deff      	udf	#255	; 0xff
   bba38:	fab2 f282 	clz	r2, r2
   bba3c:	2a00      	cmp	r2, #0
   bba3e:	f040 8092 	bne.w	bbb66 <__udivmoddi4+0x21a>
   bba42:	eba1 010c 	sub.w	r1, r1, ip
   bba46:	ea4f 471c 	mov.w	r7, ip, lsr #16
   bba4a:	fa1f fe8c 	uxth.w	lr, ip
   bba4e:	2601      	movs	r6, #1
   bba50:	0c20      	lsrs	r0, r4, #16
   bba52:	fbb1 f3f7 	udiv	r3, r1, r7
   bba56:	fb07 1113 	mls	r1, r7, r3, r1
   bba5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   bba5e:	fb0e f003 	mul.w	r0, lr, r3
   bba62:	4288      	cmp	r0, r1
   bba64:	d908      	bls.n	bba78 <__udivmoddi4+0x12c>
   bba66:	eb1c 0101 	adds.w	r1, ip, r1
   bba6a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   bba6e:	d202      	bcs.n	bba76 <__udivmoddi4+0x12a>
   bba70:	4288      	cmp	r0, r1
   bba72:	f200 80cb 	bhi.w	bbc0c <__udivmoddi4+0x2c0>
   bba76:	4643      	mov	r3, r8
   bba78:	1a09      	subs	r1, r1, r0
   bba7a:	b2a4      	uxth	r4, r4
   bba7c:	fbb1 f0f7 	udiv	r0, r1, r7
   bba80:	fb07 1110 	mls	r1, r7, r0, r1
   bba84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   bba88:	fb0e fe00 	mul.w	lr, lr, r0
   bba8c:	45a6      	cmp	lr, r4
   bba8e:	d908      	bls.n	bbaa2 <__udivmoddi4+0x156>
   bba90:	eb1c 0404 	adds.w	r4, ip, r4
   bba94:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   bba98:	d202      	bcs.n	bbaa0 <__udivmoddi4+0x154>
   bba9a:	45a6      	cmp	lr, r4
   bba9c:	f200 80bb 	bhi.w	bbc16 <__udivmoddi4+0x2ca>
   bbaa0:	4608      	mov	r0, r1
   bbaa2:	eba4 040e 	sub.w	r4, r4, lr
   bbaa6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   bbaaa:	e79c      	b.n	bb9e6 <__udivmoddi4+0x9a>
   bbaac:	f1c6 0720 	rsb	r7, r6, #32
   bbab0:	40b3      	lsls	r3, r6
   bbab2:	fa22 fc07 	lsr.w	ip, r2, r7
   bbab6:	ea4c 0c03 	orr.w	ip, ip, r3
   bbaba:	fa20 f407 	lsr.w	r4, r0, r7
   bbabe:	fa01 f306 	lsl.w	r3, r1, r6
   bbac2:	431c      	orrs	r4, r3
   bbac4:	40f9      	lsrs	r1, r7
   bbac6:	ea4f 491c 	mov.w	r9, ip, lsr #16
   bbaca:	fa00 f306 	lsl.w	r3, r0, r6
   bbace:	fbb1 f8f9 	udiv	r8, r1, r9
   bbad2:	0c20      	lsrs	r0, r4, #16
   bbad4:	fa1f fe8c 	uxth.w	lr, ip
   bbad8:	fb09 1118 	mls	r1, r9, r8, r1
   bbadc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   bbae0:	fb08 f00e 	mul.w	r0, r8, lr
   bbae4:	4288      	cmp	r0, r1
   bbae6:	fa02 f206 	lsl.w	r2, r2, r6
   bbaea:	d90b      	bls.n	bbb04 <__udivmoddi4+0x1b8>
   bbaec:	eb1c 0101 	adds.w	r1, ip, r1
   bbaf0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   bbaf4:	f080 8088 	bcs.w	bbc08 <__udivmoddi4+0x2bc>
   bbaf8:	4288      	cmp	r0, r1
   bbafa:	f240 8085 	bls.w	bbc08 <__udivmoddi4+0x2bc>
   bbafe:	f1a8 0802 	sub.w	r8, r8, #2
   bbb02:	4461      	add	r1, ip
   bbb04:	1a09      	subs	r1, r1, r0
   bbb06:	b2a4      	uxth	r4, r4
   bbb08:	fbb1 f0f9 	udiv	r0, r1, r9
   bbb0c:	fb09 1110 	mls	r1, r9, r0, r1
   bbb10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   bbb14:	fb00 fe0e 	mul.w	lr, r0, lr
   bbb18:	458e      	cmp	lr, r1
   bbb1a:	d908      	bls.n	bbb2e <__udivmoddi4+0x1e2>
   bbb1c:	eb1c 0101 	adds.w	r1, ip, r1
   bbb20:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   bbb24:	d26c      	bcs.n	bbc00 <__udivmoddi4+0x2b4>
   bbb26:	458e      	cmp	lr, r1
   bbb28:	d96a      	bls.n	bbc00 <__udivmoddi4+0x2b4>
   bbb2a:	3802      	subs	r0, #2
   bbb2c:	4461      	add	r1, ip
   bbb2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   bbb32:	fba0 9402 	umull	r9, r4, r0, r2
   bbb36:	eba1 010e 	sub.w	r1, r1, lr
   bbb3a:	42a1      	cmp	r1, r4
   bbb3c:	46c8      	mov	r8, r9
   bbb3e:	46a6      	mov	lr, r4
   bbb40:	d356      	bcc.n	bbbf0 <__udivmoddi4+0x2a4>
   bbb42:	d053      	beq.n	bbbec <__udivmoddi4+0x2a0>
   bbb44:	b15d      	cbz	r5, bbb5e <__udivmoddi4+0x212>
   bbb46:	ebb3 0208 	subs.w	r2, r3, r8
   bbb4a:	eb61 010e 	sbc.w	r1, r1, lr
   bbb4e:	fa01 f707 	lsl.w	r7, r1, r7
   bbb52:	fa22 f306 	lsr.w	r3, r2, r6
   bbb56:	40f1      	lsrs	r1, r6
   bbb58:	431f      	orrs	r7, r3
   bbb5a:	e9c5 7100 	strd	r7, r1, [r5]
   bbb5e:	2600      	movs	r6, #0
   bbb60:	4631      	mov	r1, r6
   bbb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbb66:	f1c2 0320 	rsb	r3, r2, #32
   bbb6a:	40d8      	lsrs	r0, r3
   bbb6c:	fa0c fc02 	lsl.w	ip, ip, r2
   bbb70:	fa21 f303 	lsr.w	r3, r1, r3
   bbb74:	4091      	lsls	r1, r2
   bbb76:	4301      	orrs	r1, r0
   bbb78:	ea4f 471c 	mov.w	r7, ip, lsr #16
   bbb7c:	fa1f fe8c 	uxth.w	lr, ip
   bbb80:	fbb3 f0f7 	udiv	r0, r3, r7
   bbb84:	fb07 3610 	mls	r6, r7, r0, r3
   bbb88:	0c0b      	lsrs	r3, r1, #16
   bbb8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   bbb8e:	fb00 f60e 	mul.w	r6, r0, lr
   bbb92:	429e      	cmp	r6, r3
   bbb94:	fa04 f402 	lsl.w	r4, r4, r2
   bbb98:	d908      	bls.n	bbbac <__udivmoddi4+0x260>
   bbb9a:	eb1c 0303 	adds.w	r3, ip, r3
   bbb9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   bbba2:	d22f      	bcs.n	bbc04 <__udivmoddi4+0x2b8>
   bbba4:	429e      	cmp	r6, r3
   bbba6:	d92d      	bls.n	bbc04 <__udivmoddi4+0x2b8>
   bbba8:	3802      	subs	r0, #2
   bbbaa:	4463      	add	r3, ip
   bbbac:	1b9b      	subs	r3, r3, r6
   bbbae:	b289      	uxth	r1, r1
   bbbb0:	fbb3 f6f7 	udiv	r6, r3, r7
   bbbb4:	fb07 3316 	mls	r3, r7, r6, r3
   bbbb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   bbbbc:	fb06 f30e 	mul.w	r3, r6, lr
   bbbc0:	428b      	cmp	r3, r1
   bbbc2:	d908      	bls.n	bbbd6 <__udivmoddi4+0x28a>
   bbbc4:	eb1c 0101 	adds.w	r1, ip, r1
   bbbc8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   bbbcc:	d216      	bcs.n	bbbfc <__udivmoddi4+0x2b0>
   bbbce:	428b      	cmp	r3, r1
   bbbd0:	d914      	bls.n	bbbfc <__udivmoddi4+0x2b0>
   bbbd2:	3e02      	subs	r6, #2
   bbbd4:	4461      	add	r1, ip
   bbbd6:	1ac9      	subs	r1, r1, r3
   bbbd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   bbbdc:	e738      	b.n	bba50 <__udivmoddi4+0x104>
   bbbde:	462e      	mov	r6, r5
   bbbe0:	4628      	mov	r0, r5
   bbbe2:	e705      	b.n	bb9f0 <__udivmoddi4+0xa4>
   bbbe4:	4606      	mov	r6, r0
   bbbe6:	e6e3      	b.n	bb9b0 <__udivmoddi4+0x64>
   bbbe8:	4618      	mov	r0, r3
   bbbea:	e6f8      	b.n	bb9de <__udivmoddi4+0x92>
   bbbec:	454b      	cmp	r3, r9
   bbbee:	d2a9      	bcs.n	bbb44 <__udivmoddi4+0x1f8>
   bbbf0:	ebb9 0802 	subs.w	r8, r9, r2
   bbbf4:	eb64 0e0c 	sbc.w	lr, r4, ip
   bbbf8:	3801      	subs	r0, #1
   bbbfa:	e7a3      	b.n	bbb44 <__udivmoddi4+0x1f8>
   bbbfc:	4646      	mov	r6, r8
   bbbfe:	e7ea      	b.n	bbbd6 <__udivmoddi4+0x28a>
   bbc00:	4620      	mov	r0, r4
   bbc02:	e794      	b.n	bbb2e <__udivmoddi4+0x1e2>
   bbc04:	4640      	mov	r0, r8
   bbc06:	e7d1      	b.n	bbbac <__udivmoddi4+0x260>
   bbc08:	46d0      	mov	r8, sl
   bbc0a:	e77b      	b.n	bbb04 <__udivmoddi4+0x1b8>
   bbc0c:	3b02      	subs	r3, #2
   bbc0e:	4461      	add	r1, ip
   bbc10:	e732      	b.n	bba78 <__udivmoddi4+0x12c>
   bbc12:	4630      	mov	r0, r6
   bbc14:	e709      	b.n	bba2a <__udivmoddi4+0xde>
   bbc16:	4464      	add	r4, ip
   bbc18:	3802      	subs	r0, #2
   bbc1a:	e742      	b.n	bbaa2 <__udivmoddi4+0x156>

000bbc1c <__aeabi_idiv0>:
   bbc1c:	4770      	bx	lr
   bbc1e:	bf00      	nop

000bbc20 <atexit>:
   bbc20:	2300      	movs	r3, #0
   bbc22:	4601      	mov	r1, r0
   bbc24:	461a      	mov	r2, r3
   bbc26:	4618      	mov	r0, r3
   bbc28:	f000 b9ac 	b.w	bbf84 <__register_exitproc>

000bbc2c <isprint>:
   bbc2c:	4b02      	ldr	r3, [pc, #8]	; (bbc38 <isprint+0xc>)
   bbc2e:	4418      	add	r0, r3
   bbc30:	7840      	ldrb	r0, [r0, #1]
   bbc32:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bbc36:	4770      	bx	lr
   bbc38:	000bc759 	.word	0x000bc759

000bbc3c <memcmp>:
   bbc3c:	b510      	push	{r4, lr}
   bbc3e:	3901      	subs	r1, #1
   bbc40:	4402      	add	r2, r0
   bbc42:	4290      	cmp	r0, r2
   bbc44:	d101      	bne.n	bbc4a <memcmp+0xe>
   bbc46:	2000      	movs	r0, #0
   bbc48:	e005      	b.n	bbc56 <memcmp+0x1a>
   bbc4a:	7803      	ldrb	r3, [r0, #0]
   bbc4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bbc50:	42a3      	cmp	r3, r4
   bbc52:	d001      	beq.n	bbc58 <memcmp+0x1c>
   bbc54:	1b18      	subs	r0, r3, r4
   bbc56:	bd10      	pop	{r4, pc}
   bbc58:	3001      	adds	r0, #1
   bbc5a:	e7f2      	b.n	bbc42 <memcmp+0x6>

000bbc5c <memcpy>:
   bbc5c:	440a      	add	r2, r1
   bbc5e:	4291      	cmp	r1, r2
   bbc60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bbc64:	d100      	bne.n	bbc68 <memcpy+0xc>
   bbc66:	4770      	bx	lr
   bbc68:	b510      	push	{r4, lr}
   bbc6a:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbc6e:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbc72:	4291      	cmp	r1, r2
   bbc74:	d1f9      	bne.n	bbc6a <memcpy+0xe>
   bbc76:	bd10      	pop	{r4, pc}

000bbc78 <memmove>:
   bbc78:	4288      	cmp	r0, r1
   bbc7a:	b510      	push	{r4, lr}
   bbc7c:	eb01 0402 	add.w	r4, r1, r2
   bbc80:	d902      	bls.n	bbc88 <memmove+0x10>
   bbc82:	4284      	cmp	r4, r0
   bbc84:	4623      	mov	r3, r4
   bbc86:	d807      	bhi.n	bbc98 <memmove+0x20>
   bbc88:	1e43      	subs	r3, r0, #1
   bbc8a:	42a1      	cmp	r1, r4
   bbc8c:	d008      	beq.n	bbca0 <memmove+0x28>
   bbc8e:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbc92:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbc96:	e7f8      	b.n	bbc8a <memmove+0x12>
   bbc98:	4402      	add	r2, r0
   bbc9a:	4601      	mov	r1, r0
   bbc9c:	428a      	cmp	r2, r1
   bbc9e:	d100      	bne.n	bbca2 <memmove+0x2a>
   bbca0:	bd10      	pop	{r4, pc}
   bbca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bbca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bbcaa:	e7f7      	b.n	bbc9c <memmove+0x24>

000bbcac <memset>:
   bbcac:	4402      	add	r2, r0
   bbcae:	4603      	mov	r3, r0
   bbcb0:	4293      	cmp	r3, r2
   bbcb2:	d100      	bne.n	bbcb6 <memset+0xa>
   bbcb4:	4770      	bx	lr
   bbcb6:	f803 1b01 	strb.w	r1, [r3], #1
   bbcba:	e7f9      	b.n	bbcb0 <memset+0x4>

000bbcbc <srand>:
   bbcbc:	b538      	push	{r3, r4, r5, lr}
   bbcbe:	4b10      	ldr	r3, [pc, #64]	; (bbd00 <srand+0x44>)
   bbcc0:	681d      	ldr	r5, [r3, #0]
   bbcc2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbcc4:	4604      	mov	r4, r0
   bbcc6:	b9b3      	cbnz	r3, bbcf6 <srand+0x3a>
   bbcc8:	2018      	movs	r0, #24
   bbcca:	f7fc fa89 	bl	b81e0 <malloc>
   bbcce:	4602      	mov	r2, r0
   bbcd0:	63a8      	str	r0, [r5, #56]	; 0x38
   bbcd2:	b920      	cbnz	r0, bbcde <srand+0x22>
   bbcd4:	4b0b      	ldr	r3, [pc, #44]	; (bbd04 <srand+0x48>)
   bbcd6:	480c      	ldr	r0, [pc, #48]	; (bbd08 <srand+0x4c>)
   bbcd8:	2142      	movs	r1, #66	; 0x42
   bbcda:	f7fc fab1 	bl	b8240 <__assert_func>
   bbcde:	490b      	ldr	r1, [pc, #44]	; (bbd0c <srand+0x50>)
   bbce0:	4b0b      	ldr	r3, [pc, #44]	; (bbd10 <srand+0x54>)
   bbce2:	e9c0 1300 	strd	r1, r3, [r0]
   bbce6:	4b0b      	ldr	r3, [pc, #44]	; (bbd14 <srand+0x58>)
   bbce8:	6083      	str	r3, [r0, #8]
   bbcea:	230b      	movs	r3, #11
   bbcec:	8183      	strh	r3, [r0, #12]
   bbcee:	2100      	movs	r1, #0
   bbcf0:	2001      	movs	r0, #1
   bbcf2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbcf6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbcf8:	2200      	movs	r2, #0
   bbcfa:	611c      	str	r4, [r3, #16]
   bbcfc:	615a      	str	r2, [r3, #20]
   bbcfe:	bd38      	pop	{r3, r4, r5, pc}
   bbd00:	2003dc24 	.word	0x2003dc24
   bbd04:	000bc6e9 	.word	0x000bc6e9
   bbd08:	000bc700 	.word	0x000bc700
   bbd0c:	abcd330e 	.word	0xabcd330e
   bbd10:	e66d1234 	.word	0xe66d1234
   bbd14:	0005deec 	.word	0x0005deec

000bbd18 <rand>:
   bbd18:	4b16      	ldr	r3, [pc, #88]	; (bbd74 <rand+0x5c>)
   bbd1a:	b510      	push	{r4, lr}
   bbd1c:	681c      	ldr	r4, [r3, #0]
   bbd1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bbd20:	b9b3      	cbnz	r3, bbd50 <rand+0x38>
   bbd22:	2018      	movs	r0, #24
   bbd24:	f7fc fa5c 	bl	b81e0 <malloc>
   bbd28:	63a0      	str	r0, [r4, #56]	; 0x38
   bbd2a:	b928      	cbnz	r0, bbd38 <rand+0x20>
   bbd2c:	4602      	mov	r2, r0
   bbd2e:	4b12      	ldr	r3, [pc, #72]	; (bbd78 <rand+0x60>)
   bbd30:	4812      	ldr	r0, [pc, #72]	; (bbd7c <rand+0x64>)
   bbd32:	214e      	movs	r1, #78	; 0x4e
   bbd34:	f7fc fa84 	bl	b8240 <__assert_func>
   bbd38:	4a11      	ldr	r2, [pc, #68]	; (bbd80 <rand+0x68>)
   bbd3a:	4b12      	ldr	r3, [pc, #72]	; (bbd84 <rand+0x6c>)
   bbd3c:	e9c0 2300 	strd	r2, r3, [r0]
   bbd40:	4b11      	ldr	r3, [pc, #68]	; (bbd88 <rand+0x70>)
   bbd42:	6083      	str	r3, [r0, #8]
   bbd44:	230b      	movs	r3, #11
   bbd46:	8183      	strh	r3, [r0, #12]
   bbd48:	2201      	movs	r2, #1
   bbd4a:	2300      	movs	r3, #0
   bbd4c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bbd50:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bbd52:	4a0e      	ldr	r2, [pc, #56]	; (bbd8c <rand+0x74>)
   bbd54:	6920      	ldr	r0, [r4, #16]
   bbd56:	6963      	ldr	r3, [r4, #20]
   bbd58:	490d      	ldr	r1, [pc, #52]	; (bbd90 <rand+0x78>)
   bbd5a:	4342      	muls	r2, r0
   bbd5c:	fb01 2203 	mla	r2, r1, r3, r2
   bbd60:	fba0 0101 	umull	r0, r1, r0, r1
   bbd64:	1c43      	adds	r3, r0, #1
   bbd66:	eb42 0001 	adc.w	r0, r2, r1
   bbd6a:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bbd6e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bbd72:	bd10      	pop	{r4, pc}
   bbd74:	2003dc24 	.word	0x2003dc24
   bbd78:	000bc6e9 	.word	0x000bc6e9
   bbd7c:	000bc700 	.word	0x000bc700
   bbd80:	abcd330e 	.word	0xabcd330e
   bbd84:	e66d1234 	.word	0xe66d1234
   bbd88:	0005deec 	.word	0x0005deec
   bbd8c:	5851f42d 	.word	0x5851f42d
   bbd90:	4c957f2d 	.word	0x4c957f2d

000bbd94 <strchr>:
   bbd94:	b2c9      	uxtb	r1, r1
   bbd96:	4603      	mov	r3, r0
   bbd98:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbd9c:	b11a      	cbz	r2, bbda6 <strchr+0x12>
   bbd9e:	428a      	cmp	r2, r1
   bbda0:	d1f9      	bne.n	bbd96 <strchr+0x2>
   bbda2:	4618      	mov	r0, r3
   bbda4:	4770      	bx	lr
   bbda6:	2900      	cmp	r1, #0
   bbda8:	bf18      	it	ne
   bbdaa:	2300      	movne	r3, #0
   bbdac:	e7f9      	b.n	bbda2 <strchr+0xe>

000bbdae <strchrnul>:
   bbdae:	b510      	push	{r4, lr}
   bbdb0:	4604      	mov	r4, r0
   bbdb2:	f7ff ffef 	bl	bbd94 <strchr>
   bbdb6:	b918      	cbnz	r0, bbdc0 <strchrnul+0x12>
   bbdb8:	4620      	mov	r0, r4
   bbdba:	f000 f814 	bl	bbde6 <strlen>
   bbdbe:	4420      	add	r0, r4
   bbdc0:	bd10      	pop	{r4, pc}

000bbdc2 <strcmp>:
   bbdc2:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbdc6:	f811 3b01 	ldrb.w	r3, [r1], #1
   bbdca:	2a01      	cmp	r2, #1
   bbdcc:	bf28      	it	cs
   bbdce:	429a      	cmpcs	r2, r3
   bbdd0:	d0f7      	beq.n	bbdc2 <strcmp>
   bbdd2:	1ad0      	subs	r0, r2, r3
   bbdd4:	4770      	bx	lr

000bbdd6 <strcpy>:
   bbdd6:	4603      	mov	r3, r0
   bbdd8:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbddc:	f803 2b01 	strb.w	r2, [r3], #1
   bbde0:	2a00      	cmp	r2, #0
   bbde2:	d1f9      	bne.n	bbdd8 <strcpy+0x2>
   bbde4:	4770      	bx	lr

000bbde6 <strlen>:
   bbde6:	4603      	mov	r3, r0
   bbde8:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbdec:	2a00      	cmp	r2, #0
   bbdee:	d1fb      	bne.n	bbde8 <strlen+0x2>
   bbdf0:	1a18      	subs	r0, r3, r0
   bbdf2:	3801      	subs	r0, #1
   bbdf4:	4770      	bx	lr

000bbdf6 <strncmp>:
   bbdf6:	b510      	push	{r4, lr}
   bbdf8:	b17a      	cbz	r2, bbe1a <strncmp+0x24>
   bbdfa:	4603      	mov	r3, r0
   bbdfc:	3901      	subs	r1, #1
   bbdfe:	1884      	adds	r4, r0, r2
   bbe00:	f813 0b01 	ldrb.w	r0, [r3], #1
   bbe04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bbe08:	4290      	cmp	r0, r2
   bbe0a:	d101      	bne.n	bbe10 <strncmp+0x1a>
   bbe0c:	42a3      	cmp	r3, r4
   bbe0e:	d101      	bne.n	bbe14 <strncmp+0x1e>
   bbe10:	1a80      	subs	r0, r0, r2
   bbe12:	bd10      	pop	{r4, pc}
   bbe14:	2800      	cmp	r0, #0
   bbe16:	d1f3      	bne.n	bbe00 <strncmp+0xa>
   bbe18:	e7fa      	b.n	bbe10 <strncmp+0x1a>
   bbe1a:	4610      	mov	r0, r2
   bbe1c:	e7f9      	b.n	bbe12 <strncmp+0x1c>

000bbe1e <strncpy>:
   bbe1e:	b510      	push	{r4, lr}
   bbe20:	3901      	subs	r1, #1
   bbe22:	4603      	mov	r3, r0
   bbe24:	b132      	cbz	r2, bbe34 <strncpy+0x16>
   bbe26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bbe2a:	f803 4b01 	strb.w	r4, [r3], #1
   bbe2e:	3a01      	subs	r2, #1
   bbe30:	2c00      	cmp	r4, #0
   bbe32:	d1f7      	bne.n	bbe24 <strncpy+0x6>
   bbe34:	441a      	add	r2, r3
   bbe36:	2100      	movs	r1, #0
   bbe38:	4293      	cmp	r3, r2
   bbe3a:	d100      	bne.n	bbe3e <strncpy+0x20>
   bbe3c:	bd10      	pop	{r4, pc}
   bbe3e:	f803 1b01 	strb.w	r1, [r3], #1
   bbe42:	e7f9      	b.n	bbe38 <strncpy+0x1a>

000bbe44 <strrchr>:
   bbe44:	b538      	push	{r3, r4, r5, lr}
   bbe46:	4603      	mov	r3, r0
   bbe48:	460c      	mov	r4, r1
   bbe4a:	b969      	cbnz	r1, bbe68 <strrchr+0x24>
   bbe4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bbe50:	f7ff bfa0 	b.w	bbd94 <strchr>
   bbe54:	1c43      	adds	r3, r0, #1
   bbe56:	4605      	mov	r5, r0
   bbe58:	4621      	mov	r1, r4
   bbe5a:	4618      	mov	r0, r3
   bbe5c:	f7ff ff9a 	bl	bbd94 <strchr>
   bbe60:	2800      	cmp	r0, #0
   bbe62:	d1f7      	bne.n	bbe54 <strrchr+0x10>
   bbe64:	4628      	mov	r0, r5
   bbe66:	bd38      	pop	{r3, r4, r5, pc}
   bbe68:	2500      	movs	r5, #0
   bbe6a:	e7f5      	b.n	bbe58 <strrchr+0x14>

000bbe6c <_strtol_l.constprop.0>:
   bbe6c:	2b01      	cmp	r3, #1
   bbe6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbe72:	d001      	beq.n	bbe78 <_strtol_l.constprop.0+0xc>
   bbe74:	2b24      	cmp	r3, #36	; 0x24
   bbe76:	d906      	bls.n	bbe86 <_strtol_l.constprop.0+0x1a>
   bbe78:	f7fc f9da 	bl	b8230 <__errno>
   bbe7c:	2316      	movs	r3, #22
   bbe7e:	6003      	str	r3, [r0, #0]
   bbe80:	2000      	movs	r0, #0
   bbe82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbe86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bbf6c <_strtol_l.constprop.0+0x100>
   bbe8a:	460d      	mov	r5, r1
   bbe8c:	462e      	mov	r6, r5
   bbe8e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbe92:	f814 700c 	ldrb.w	r7, [r4, ip]
   bbe96:	f017 0708 	ands.w	r7, r7, #8
   bbe9a:	d1f7      	bne.n	bbe8c <_strtol_l.constprop.0+0x20>
   bbe9c:	2c2d      	cmp	r4, #45	; 0x2d
   bbe9e:	d132      	bne.n	bbf06 <_strtol_l.constprop.0+0x9a>
   bbea0:	782c      	ldrb	r4, [r5, #0]
   bbea2:	2701      	movs	r7, #1
   bbea4:	1cb5      	adds	r5, r6, #2
   bbea6:	2b00      	cmp	r3, #0
   bbea8:	d05b      	beq.n	bbf62 <_strtol_l.constprop.0+0xf6>
   bbeaa:	2b10      	cmp	r3, #16
   bbeac:	d109      	bne.n	bbec2 <_strtol_l.constprop.0+0x56>
   bbeae:	2c30      	cmp	r4, #48	; 0x30
   bbeb0:	d107      	bne.n	bbec2 <_strtol_l.constprop.0+0x56>
   bbeb2:	782c      	ldrb	r4, [r5, #0]
   bbeb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bbeb8:	2c58      	cmp	r4, #88	; 0x58
   bbeba:	d14d      	bne.n	bbf58 <_strtol_l.constprop.0+0xec>
   bbebc:	786c      	ldrb	r4, [r5, #1]
   bbebe:	2310      	movs	r3, #16
   bbec0:	3502      	adds	r5, #2
   bbec2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bbec6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bbeca:	f04f 0c00 	mov.w	ip, #0
   bbece:	fbb8 f9f3 	udiv	r9, r8, r3
   bbed2:	4666      	mov	r6, ip
   bbed4:	fb03 8a19 	mls	sl, r3, r9, r8
   bbed8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bbedc:	f1be 0f09 	cmp.w	lr, #9
   bbee0:	d816      	bhi.n	bbf10 <_strtol_l.constprop.0+0xa4>
   bbee2:	4674      	mov	r4, lr
   bbee4:	42a3      	cmp	r3, r4
   bbee6:	dd24      	ble.n	bbf32 <_strtol_l.constprop.0+0xc6>
   bbee8:	f1bc 0f00 	cmp.w	ip, #0
   bbeec:	db1e      	blt.n	bbf2c <_strtol_l.constprop.0+0xc0>
   bbeee:	45b1      	cmp	r9, r6
   bbef0:	d31c      	bcc.n	bbf2c <_strtol_l.constprop.0+0xc0>
   bbef2:	d101      	bne.n	bbef8 <_strtol_l.constprop.0+0x8c>
   bbef4:	45a2      	cmp	sl, r4
   bbef6:	db19      	blt.n	bbf2c <_strtol_l.constprop.0+0xc0>
   bbef8:	fb06 4603 	mla	r6, r6, r3, r4
   bbefc:	f04f 0c01 	mov.w	ip, #1
   bbf00:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbf04:	e7e8      	b.n	bbed8 <_strtol_l.constprop.0+0x6c>
   bbf06:	2c2b      	cmp	r4, #43	; 0x2b
   bbf08:	bf04      	itt	eq
   bbf0a:	782c      	ldrbeq	r4, [r5, #0]
   bbf0c:	1cb5      	addeq	r5, r6, #2
   bbf0e:	e7ca      	b.n	bbea6 <_strtol_l.constprop.0+0x3a>
   bbf10:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bbf14:	f1be 0f19 	cmp.w	lr, #25
   bbf18:	d801      	bhi.n	bbf1e <_strtol_l.constprop.0+0xb2>
   bbf1a:	3c37      	subs	r4, #55	; 0x37
   bbf1c:	e7e2      	b.n	bbee4 <_strtol_l.constprop.0+0x78>
   bbf1e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bbf22:	f1be 0f19 	cmp.w	lr, #25
   bbf26:	d804      	bhi.n	bbf32 <_strtol_l.constprop.0+0xc6>
   bbf28:	3c57      	subs	r4, #87	; 0x57
   bbf2a:	e7db      	b.n	bbee4 <_strtol_l.constprop.0+0x78>
   bbf2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bbf30:	e7e6      	b.n	bbf00 <_strtol_l.constprop.0+0x94>
   bbf32:	f1bc 0f00 	cmp.w	ip, #0
   bbf36:	da05      	bge.n	bbf44 <_strtol_l.constprop.0+0xd8>
   bbf38:	2322      	movs	r3, #34	; 0x22
   bbf3a:	6003      	str	r3, [r0, #0]
   bbf3c:	4646      	mov	r6, r8
   bbf3e:	b942      	cbnz	r2, bbf52 <_strtol_l.constprop.0+0xe6>
   bbf40:	4630      	mov	r0, r6
   bbf42:	e79e      	b.n	bbe82 <_strtol_l.constprop.0+0x16>
   bbf44:	b107      	cbz	r7, bbf48 <_strtol_l.constprop.0+0xdc>
   bbf46:	4276      	negs	r6, r6
   bbf48:	2a00      	cmp	r2, #0
   bbf4a:	d0f9      	beq.n	bbf40 <_strtol_l.constprop.0+0xd4>
   bbf4c:	f1bc 0f00 	cmp.w	ip, #0
   bbf50:	d000      	beq.n	bbf54 <_strtol_l.constprop.0+0xe8>
   bbf52:	1e69      	subs	r1, r5, #1
   bbf54:	6011      	str	r1, [r2, #0]
   bbf56:	e7f3      	b.n	bbf40 <_strtol_l.constprop.0+0xd4>
   bbf58:	2430      	movs	r4, #48	; 0x30
   bbf5a:	2b00      	cmp	r3, #0
   bbf5c:	d1b1      	bne.n	bbec2 <_strtol_l.constprop.0+0x56>
   bbf5e:	2308      	movs	r3, #8
   bbf60:	e7af      	b.n	bbec2 <_strtol_l.constprop.0+0x56>
   bbf62:	2c30      	cmp	r4, #48	; 0x30
   bbf64:	d0a5      	beq.n	bbeb2 <_strtol_l.constprop.0+0x46>
   bbf66:	230a      	movs	r3, #10
   bbf68:	e7ab      	b.n	bbec2 <_strtol_l.constprop.0+0x56>
   bbf6a:	bf00      	nop
   bbf6c:	000bc75a 	.word	0x000bc75a

000bbf70 <strtol>:
   bbf70:	4613      	mov	r3, r2
   bbf72:	460a      	mov	r2, r1
   bbf74:	4601      	mov	r1, r0
   bbf76:	4802      	ldr	r0, [pc, #8]	; (bbf80 <strtol+0x10>)
   bbf78:	6800      	ldr	r0, [r0, #0]
   bbf7a:	f7ff bf77 	b.w	bbe6c <_strtol_l.constprop.0>
   bbf7e:	bf00      	nop
   bbf80:	2003dc24 	.word	0x2003dc24

000bbf84 <__register_exitproc>:
   bbf84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbf88:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc044 <__register_exitproc+0xc0>
   bbf8c:	4606      	mov	r6, r0
   bbf8e:	f8d8 0000 	ldr.w	r0, [r8]
   bbf92:	461f      	mov	r7, r3
   bbf94:	460d      	mov	r5, r1
   bbf96:	4691      	mov	r9, r2
   bbf98:	f000 f856 	bl	bc048 <__retarget_lock_acquire_recursive>
   bbf9c:	4b25      	ldr	r3, [pc, #148]	; (bc034 <__register_exitproc+0xb0>)
   bbf9e:	681c      	ldr	r4, [r3, #0]
   bbfa0:	b934      	cbnz	r4, bbfb0 <__register_exitproc+0x2c>
   bbfa2:	4c25      	ldr	r4, [pc, #148]	; (bc038 <__register_exitproc+0xb4>)
   bbfa4:	601c      	str	r4, [r3, #0]
   bbfa6:	4b25      	ldr	r3, [pc, #148]	; (bc03c <__register_exitproc+0xb8>)
   bbfa8:	b113      	cbz	r3, bbfb0 <__register_exitproc+0x2c>
   bbfaa:	681b      	ldr	r3, [r3, #0]
   bbfac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bbfb0:	6863      	ldr	r3, [r4, #4]
   bbfb2:	2b1f      	cmp	r3, #31
   bbfb4:	dd07      	ble.n	bbfc6 <__register_exitproc+0x42>
   bbfb6:	f8d8 0000 	ldr.w	r0, [r8]
   bbfba:	f000 f847 	bl	bc04c <__retarget_lock_release_recursive>
   bbfbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bbfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbfc6:	b34e      	cbz	r6, bc01c <__register_exitproc+0x98>
   bbfc8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bbfcc:	b988      	cbnz	r0, bbff2 <__register_exitproc+0x6e>
   bbfce:	4b1c      	ldr	r3, [pc, #112]	; (bc040 <__register_exitproc+0xbc>)
   bbfd0:	b923      	cbnz	r3, bbfdc <__register_exitproc+0x58>
   bbfd2:	f8d8 0000 	ldr.w	r0, [r8]
   bbfd6:	f000 f838 	bl	bc04a <__retarget_lock_release>
   bbfda:	e7f0      	b.n	bbfbe <__register_exitproc+0x3a>
   bbfdc:	f44f 7084 	mov.w	r0, #264	; 0x108
   bbfe0:	f7fc f8fe 	bl	b81e0 <malloc>
   bbfe4:	2800      	cmp	r0, #0
   bbfe6:	d0f4      	beq.n	bbfd2 <__register_exitproc+0x4e>
   bbfe8:	2300      	movs	r3, #0
   bbfea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bbfee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bbff2:	6863      	ldr	r3, [r4, #4]
   bbff4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bbff8:	2201      	movs	r2, #1
   bbffa:	409a      	lsls	r2, r3
   bbffc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc000:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc004:	4313      	orrs	r3, r2
   bc006:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc00a:	2e02      	cmp	r6, #2
   bc00c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc010:	bf02      	ittt	eq
   bc012:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc016:	4313      	orreq	r3, r2
   bc018:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc01c:	6863      	ldr	r3, [r4, #4]
   bc01e:	f8d8 0000 	ldr.w	r0, [r8]
   bc022:	1c5a      	adds	r2, r3, #1
   bc024:	3302      	adds	r3, #2
   bc026:	6062      	str	r2, [r4, #4]
   bc028:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc02c:	f000 f80e 	bl	bc04c <__retarget_lock_release_recursive>
   bc030:	2000      	movs	r0, #0
   bc032:	e7c6      	b.n	bbfc2 <__register_exitproc+0x3e>
   bc034:	2003e7ec 	.word	0x2003e7ec
   bc038:	2003e760 	.word	0x2003e760
   bc03c:	00000000 	.word	0x00000000
   bc040:	000b81e1 	.word	0x000b81e1
   bc044:	2003dc88 	.word	0x2003dc88

000bc048 <__retarget_lock_acquire_recursive>:
   bc048:	4770      	bx	lr

000bc04a <__retarget_lock_release>:
   bc04a:	4770      	bx	lr

000bc04c <__retarget_lock_release_recursive>:
   bc04c:	4770      	bx	lr

000bc04e <link_code_end>:
	...

000bc050 <dynalib_user>:
   bc050:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc060:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   bc070:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   bc080:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   bc090:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   bc0a0:	4f4d 4544 7525 003e 3032 3336 302f 2f34     MODE%u>.2063/04/
   bc0b0:	3530 3220 3a30 3030 303a 0030 6f43 6c75     05 20:00:00.Coul
   bc0c0:	6e64 7427 6620 6e69 2064 5452 0043 5452     dn't find RTC.RT
   bc0d0:	2043 7369 4e20 544f 6920 696e 6974 6c61     C is NOT initial
   bc0e0:	7a69 6465 202c 656c 2774 2073 6573 2074     ized, let's set 
   bc0f0:	6874 2065 6974 656d 0021 3930 313a 3a34     the time!.09:14:
   bc100:	3931 4a00 6e75 3220 2036 3032 3232 4f00     19.Jun 26 2022.O
   bc110:	6666 6573 2074 7369 0020 6954 656d 6920     ffset is .Time i
   bc120:	2073 6573 2174 5300 3a44 0020 6425 5300     s set!.SD: .%d.S
   bc130:	7444 7365 2e74 7874 0074 4e20 204f 4143     Dtest.txt. NO CA
   bc140:	4452 0a00 6548 7720 7361 6120 6d20 6e61     RD..He was a man
   bc150:	202e 6154 656b 6820 6d69 6620 726f 6120     . Take him for a
   bc160:	6c6c 6920 206e 6c61 2e6c 4900 7320 6168     ll in all..I sha
   bc170:	6c6c 6e20 746f 6c20 6f6f 206b 7075 6e6f     ll not look upon
   bc180:	6820 7369 6c20 6b69 2065 6761 6961 2e6e      his like again.
   bc190:	2d00 6148 6c6d 7465 202c 6341 2074 2c31     .-Hamlet, Act 1,
   bc1a0:	5320 6563 656e 3220 5400 6568 6d72 636f      Scene 2.Thermoc
   bc1b0:	756f 6c70 2065 6d61 6c70 6669 6569 2072     ouple amplifier 
   bc1c0:	6f6e 2074 6f66 6e75 2e64 4320 6568 6b63     not found. Check
   bc1d0:	7720 7269 6e69 2167 4600 756f 646e 4d20      wiring!.Found M
   bc1e0:	5043 3639 3030 0021 4441 2043 6572 6f73     CP9600!.ADC reso
   bc1f0:	756c 6974 6e6f 7320 7465 7420 206f 3100     lution set to .1
   bc200:	0038 3631 3100 0034 3231 2000 6962 7374     8.16.14.12. bits
   bc210:	5400 6568 6d72 636f 756f 6c70 2065 7974     .Thermocouple ty
   bc220:	6570 7320 7465 7420 206f 4b00 4a00 5400     pe set to .K.J.T
   bc230:	4e00 5200 2000 7974 6570 4600 6c69 6574     .N.R. type.Filte
   bc240:	2072 6f63 6665 6966 6963 6e65 2074 6176     r coefficient va
   bc250:	756c 2065 6573 2074 6f74 203a 4100 656c     lue set to: .Ale
   bc260:	7472 2320 2031 6574 706d 7265 7461 7275     rt #1 temperatur
   bc270:	2065 6573 2074 6f74 0020 2d2d 2d2d 2d2d     e set to .------
   bc280:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   bc290:	2d2d 2d2d 2d2d 2d2d 2500 3430 2f64 3025     --------.%04d/%0
   bc2a0:	6432 252f 3230 2064 3025 6432 253a 3230     2d/%02d %02d:%02
   bc2b0:	3a64 3025 6432 4300 6f6c 6b63 203a 2000     d:%02d.Clock: . 
   bc2c0:	4150 5353 202c 4142 2044 4954 454d 2000     PASS, BAD TIME. 
   bc2d0:	4146 4c49 2000 4150 5353 4200 7461 3d20     FAIL. PASS.Bat =
   bc2e0:	0020 0956 0a00 0a0a 6e49 7469 6169 696c      .V.....Initiali
   bc2f0:	697a 676e 2e2e 0a2e 0a00 6954 656d 7473     zing......Timest
   bc300:	6d61 2070 203d 5300 7465 7520 2070 6f66     amp = .Set up fo
   bc310:	2072 6f73 6c69 6d20 696f 7473 7275 2065     r soil moisture 
   bc320:	6e61 2064 6172 6e69 6720 7561 6567 2c00     and rain gauge.,
   bc330:	4100 4344 203a 2000 5675 5300 696f 206c     .ADC: . uV.Soil 
   bc340:	6f6d 7369 7574 6572 5b20 5d56 203a 5000     moisture [V]: .P
   bc350:	7261 6974 6c63 0065 6557 6120 6572 6920     article.We are i
   bc360:	206e 6874 7369 6620 6c6f 6564 3a72 0020     n this folder: .
   bc370:	7250 6e69 2074 7245 6f72 0072 7553 7070     Print Error.Supp
   bc380:	736f 6465 7420 206f 6562 6920 206e 6f4c     osed to be in Lo
   bc390:	7367 4c00 676f 2500 3530 0064 6946 656c     gs.Log.%05d.File
   bc3a0:	614e 656d 3a43 0020 5320 204e 203d 0000     NameC: . SN = ..

000bc3b0 <_ZTVN8particle11SPISettingsE>:
	...
   bc3b8:	4215 000b 40c9 000b 40e7 000b               .B...@...@..

000bc3c4 <_ZTV4File>:
	...
   bc3cc:	40e5 000b 40f5 000b 4177 000b 4103 000b     .@...@..wA...A..
   bc3dc:	40cb 000b 4109 000b 412f 000b 4129 000b     .@...A../A..)A..
   bc3ec:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   bc3fc:	4354 5b20 5675 005d 6946 696e 6873 6920     TC [uV].Finish i
   bc40c:	696e 6974 6c61 7a69 7461 6f69 216e 5300     nitialization!.S
   bc41c:	2044 6572 6461 6e69 0067 4453 6e20 746f     D reading.SD not
   bc42c:	7220 6165 6964 676e 0000 0000                reading....

000bc438 <_ZTVN5spark10LogHandlerE>:
	...
   bc448:	40a5 000b 5001 000b                         .@...P..

000bc450 <_ZTVN5spark16SerialLogHandlerE>:
	...
   bc458:	5059 000b 508d 000b 94bd 000b 5003 000b     YP...P.......P..

000bc468 <_ZL11daysInMonth>:
   bc468:	1c1f 1e1f 1e1f 1f1f 1f1e 1f1e               ............

000bc474 <_ZTVN5spark13EthernetClassE>:
	...
   bc47c:	8333 000b 8329 000b 831f 000b 8315 000b     3...)...........
   bc48c:	8309 000b 82fd 000b 9815 000b 981d 000b     ................
   bc49c:	82f1 000b 82e9 000b 82df 000b 82d5 000b     ................
   bc4ac:	984d 000b                                   M...

000bc4b0 <_ZTV7TwoWire>:
	...
   bc4b8:	8351 000b 839b 000b 8373 000b 8353 000b     Q.......s...S...
   bc4c8:	837b 000b 8383 000b 838b 000b 8393 000b     {...............

000bc4d8 <_ZTV9IPAddress>:
	...
   bc4e0:	845d 000b 844d 000b 844f 000b 7525 7500     ]...M...O...%u.u
   bc4f0:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   bc500:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   bc510:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   bc520:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   bc530:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   bc540:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   bc550:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   bc560:	6961 006c                                   ail.

000bc564 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bc56c:	8909 000b 892f 000b 88ed 000b 856b 000b     ..../.......k...

000bc57c <_ZTVN5spark16StreamLogHandlerE>:
	...
   bc584:	8d65 000b 8d7d 000b 94bd 000b 5003 000b     e...}........P..

000bc594 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bc59c:	8d91 000b 8da5 000b 9661 000b 88f5 000b     ........a.......

000bc5ac <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bc5b4:	8907 000b 893d 000b 9421 000b 88f7 000b     ....=...!.......

000bc5c4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bc5cc:	8905 000b 894b 000b 8ccd 000b 896d 000b     ....K.......m...

000bc5dc <_ZTVN5spark12NetworkClassE>:
	...
   bc5e4:	97d5 000b 97df 000b 97e9 000b 97f3 000b     ................
   bc5f4:	97fd 000b 9809 000b 9815 000b 981d 000b     ................
   bc604:	9825 000b 9831 000b 9839 000b 9843 000b     %...1...9...C...
   bc614:	984d 000b 616e 006e 6e69 0066 766f 0066     M...nan.inf.ovf.

000bc624 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bc624:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   bc634:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   bc644:	6d69 0065                                   ime.

000bc648 <_ZTV11USARTSerial>:
	...
   bc650:	a1a9 000b a215 000b a1ed 000b 9939 000b     ............9...
   bc660:	a1bd 000b a1d9 000b a1cb 000b a1e7 000b     ................
   bc670:	a1ab 000b a1af 000b                         ........

000bc678 <_ZTV9USBSerial>:
	...
   bc680:	a267 000b a2cf 000b a2a5 000b 9939 000b     g...........9...
   bc690:	a297 000b a269 000b a279 000b a2c9 000b     ....i...y.......
   bc6a0:	a289 000b a261 000b                         ....a...

000bc6a8 <_ZTVN5spark9WiFiClassE>:
	...
   bc6b0:	a3d7 000b a3cd 000b a3c3 000b a379 000b     ............y...
   bc6c0:	a3b7 000b a3ab 000b 9815 000b 981d 000b     ................
   bc6d0:	a39f 000b a397 000b a38d 000b a383 000b     ................
   bc6e0:	984d 000b                                   M...

000bc6e4 <_ZSt7nothrow>:
   bc6e4:	0000 0000 5200 4545 544e 6d20 6c61 6f6c     .....REENT mallo
   bc6f4:	2063 7573 6363 6565 6564 0064 742f 706d     c succeeded./tmp
   bc704:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bc714:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bc724:	3131 3432 315f 3036 3136 3038 3336 2f39     1124_1606180639/
   bc734:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bc744:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bc754:	646e 632e                                    nd.c.

000bc759 <_ctype_>:
   bc759:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bc769:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bc779:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bc789:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bc799:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bc7a9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bc7b9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bc7c9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bc7d9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bc85a <link_const_variable_data_end>:
	...

000bc85c <link_constructors_location>:
   bc85c:	000b52a5 	.word	0x000b52a5
   bc860:	000b82c5 	.word	0x000b82c5
   bc864:	000b833d 	.word	0x000b833d
   bc868:	000b94ad 	.word	0x000b94ad
   bc86c:	000b9925 	.word	0x000b9925
   bc870:	000b9c41 	.word	0x000b9c41
   bc874:	000ba171 	.word	0x000ba171
   bc878:	000ba195 	.word	0x000ba195
   bc87c:	000ba3e1 	.word	0x000ba3e1
